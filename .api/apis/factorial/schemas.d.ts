declare const DeleteApi20241001ResourcesApiPublicWebhookSubscriptionsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "target_url", "type", "enabled", "api_version"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the webhook subscription";
                    readonly examples: readonly [1];
                };
                readonly target_url: {
                    readonly type: "string";
                    readonly description: "URL where the webhook payload will be sent";
                    readonly examples: readonly ["https://webhook.site/"];
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the webhook subscription";
                    readonly examples: readonly ["ats/job_posting/create"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the webhook subscription";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the webhook subscription";
                    readonly examples: readonly ["Webhook subscription of a job posting created"];
                };
                readonly challenge: {
                    readonly type: "string";
                    readonly description: "String to verify the subscription";
                    readonly examples: readonly ["2bca4e6d-9aaf-4f11-9e5d"];
                };
                readonly enabled: {
                    readonly type: "boolean";
                    readonly description: "Boolean to enable/disable the subscription";
                    readonly examples: readonly [true];
                };
                readonly api_version: {
                    readonly type: "string";
                    readonly description: "API version of the webhook subscription that determines the schema of the payload";
                    readonly examples: readonly ["2024-10-01"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesAtsApplicationsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "ats_job_posting_id", "ats_candidate_id", "created_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Id of the application";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company id of the application";
                    readonly examples: readonly [1];
                };
                readonly ats_job_posting_id: {
                    readonly type: "integer";
                    readonly description: "Job posting id of the application";
                    readonly examples: readonly [1];
                };
                readonly ats_candidate_id: {
                    readonly type: "integer";
                    readonly description: "Candidate id of the application";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee id of the application";
                    readonly examples: readonly [1];
                };
                readonly phone: {
                    readonly type: "string";
                    readonly description: "Candidate phone of the application";
                    readonly examples: readonly ["123321"];
                };
                readonly qualified: {
                    readonly type: "boolean";
                    readonly description: "Qualified of the application";
                    readonly examples: readonly [true];
                };
                readonly ats_application_phase_id: {
                    readonly type: "integer";
                    readonly description: "Application phase id";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Application created at date";
                    readonly examples: readonly ["2024-08-19T14:30:00Z"];
                };
                readonly cover_letter: {
                    readonly type: "string";
                    readonly description: "Application cover letter";
                    readonly examples: readonly ["cover_letter"];
                };
                readonly ats_conversation_id: {
                    readonly type: "integer";
                    readonly description: "Application conversation id";
                    readonly examples: readonly [1];
                };
                readonly medium: {
                    readonly type: "string";
                    readonly description: "Application medium";
                    readonly examples: readonly ["medium"];
                };
                readonly rating_average: {
                    readonly type: "integer";
                    readonly description: "Application average rating";
                    readonly examples: readonly [1];
                };
                readonly ats_rejection_reason_id: {
                    readonly type: "integer";
                    readonly description: "Application rejection reason id";
                    readonly examples: readonly [1];
                };
                readonly source_id: {
                    readonly type: "integer";
                    readonly description: "Application source id";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesAtsCandidatesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "first_name", "last_name", "full_name", "talent_pool", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the candidate.";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "company identifier.";
                    readonly examples: readonly [1];
                };
                readonly first_name: {
                    readonly type: "string";
                    readonly description: "name of the candidate.";
                    readonly examples: readonly ["Ana"];
                };
                readonly last_name: {
                    readonly type: "string";
                    readonly description: "last name of the candidate.";
                    readonly examples: readonly ["Fernandez Perez"];
                };
                readonly full_name: {
                    readonly type: "string";
                    readonly description: "full name of the candidate.";
                    readonly examples: readonly ["Ana Fernandez Perez"];
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "email of the candidate.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly talent_pool: {
                    readonly type: "boolean";
                    readonly description: "is the candidate part of talent pool?";
                    readonly examples: readonly [true];
                };
                readonly phone_number: {
                    readonly type: "string";
                    readonly description: "phone number of the candidate.";
                    readonly examples: readonly [645786980];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "creation date of the candidate.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "last update of the candidate.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly consent_given_at: {
                    readonly type: "string";
                    readonly description: "date when the consent was given.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly inactive_since: {
                    readonly type: "string";
                    readonly description: "date when the candidate became inactive.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly ats_job_posting_ids: {
                    readonly type: "array";
                    readonly description: "list of job posting identifiers.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                };
                readonly personal_url: {
                    readonly type: "string";
                    readonly description: "personal web resource from the candidate.";
                    readonly examples: readonly ["https://anaperez.factorial.com"];
                };
                readonly consent_expiration_date: {
                    readonly type: "string";
                    readonly description: "date when the consent expires.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly consent_to_talent_pool: {
                    readonly type: "boolean";
                    readonly description: "consent to talent pool.";
                    readonly examples: readonly [true];
                };
                readonly medium: {
                    readonly type: "string";
                    readonly description: "specifies additional details related to the source of the candidate, such as the referrer name for example if the source is referred.";
                    readonly examples: readonly ["email"];
                };
                readonly source_id: {
                    readonly type: "integer";
                    readonly description: "candidate source identifier, refers to ats/candidate_sources endpoint.";
                    readonly examples: readonly [1];
                };
                readonly gender: {
                    readonly type: "string";
                    readonly description: "gender of the candidate.\n\n`female` `male` `unanswered` `other`";
                    readonly enum: readonly ["female", "male", "unanswered", "other"];
                    readonly examples: readonly ["female"];
                };
                readonly score: {
                    readonly type: "number";
                    readonly description: "score of the candidate.";
                    readonly examples: readonly [7];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesAtsFeedbacksId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "created_at", "ats_candidate_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "the ID of the feedback entry.";
                    readonly examples: readonly [1];
                };
                readonly rating: {
                    readonly type: "integer";
                    readonly description: "the overall rating from 1 to 5 for the candidate's application.";
                    readonly examples: readonly [4];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "the description of the feedback provided.";
                    readonly examples: readonly ["The candidate has a great attitude and is a good fit for the team."];
                };
                readonly ats_application_id: {
                    readonly type: "integer";
                    readonly description: "the ID of the application related to the feedback.";
                    readonly examples: readonly [1];
                };
                readonly ats_application_phase_id: {
                    readonly type: "integer";
                    readonly description: "the ID of the phase within the application related to the feedback.";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "the date and time when the feedback entry was created.";
                    readonly examples: readonly ["2022-01-01T00:00:00Z"];
                };
                readonly ats_candidate_id: {
                    readonly type: "integer";
                    readonly description: "the ID of the candidate to whom the feedback is associated.";
                    readonly examples: readonly [1];
                };
                readonly ats_evaluation_forms_id: {
                    readonly type: "integer";
                    readonly description: "the ID of the evaluation form to which the feedback belongs if the evaluation forms feature is active.";
                    readonly examples: readonly [1];
                };
                readonly evaluation_form_answers: {
                    readonly type: "array";
                    readonly description: "the answers from the evaluation form, if this feedback is related to an evaluation form.";
                    readonly items: {};
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesAtsJobPostingsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "ats_company_id", "title", "remote", "status", "cv_requirement", "cover_letter_requirement", "phone_requirement", "photo_requirement", "salary_period", "created_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the job posting";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly ats_company_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the ATS company associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "Title of the job posting";
                    readonly examples: readonly ["My job title"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Description of the job posting";
                    readonly examples: readonly ["My job description"];
                };
                readonly contract_type: {
                    readonly type: "string";
                };
                readonly workplace_type: {
                    readonly type: "string";
                };
                readonly remote: {
                    readonly type: "boolean";
                    readonly description: "Indicates if the job posting is remote";
                    readonly examples: readonly ["true"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The current status of the job posting (e.g., draft, published, archived)\n\n`draft` `published` `unlisted` `archived` `cancelled`";
                    readonly enum: readonly ["draft", "published", "unlisted", "archived", "cancelled"];
                    readonly examples: readonly ["draft"];
                };
                readonly schedule_type: {
                    readonly type: "string";
                    readonly description: "The schedule type of the job posting (e.g., full_time, part_time)";
                    readonly examples: readonly ["full_time"];
                };
                readonly team_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the team associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly location_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the location associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the legal entity associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly salary_format: {
                    readonly type: "string";
                    readonly description: "The format of the salary (e.g., range, fixed_amount)";
                    readonly examples: readonly ["range"];
                };
                readonly salary_from_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The minimum salary amount in cents";
                    readonly examples: readonly ["3000000"];
                };
                readonly salary_to_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The maximum salary amount in cents";
                    readonly examples: readonly ["5000000"];
                };
                readonly hide_salary: {
                    readonly type: "boolean";
                    readonly description: "Indicates whether the salary information for the job posting should be hidden from applicants.";
                    readonly examples: readonly ["true"];
                };
                readonly cv_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the CV (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["mandatory"];
                };
                readonly cover_letter_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the cover letter (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["optional"];
                };
                readonly phone_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the phone number (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["do_not_ask"];
                };
                readonly photo_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the phone number (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["do_not_ask"];
                };
                readonly preview_token: {
                    readonly type: "string";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "If published, the public URL of the job posting. Otherwise will be null";
                    readonly examples: readonly ["https://my-factorial-domain/job_posting/job-title-slug"];
                };
                readonly salary_period: {
                    readonly type: "string";
                    readonly enum: readonly ["annual", "monthly", "daily"];
                    readonly description: "`annual` `monthly` `daily`";
                };
                readonly published_at: {
                    readonly type: "string";
                    readonly description: "Published date in ISO 8601 format of the job. If never been published the value will be null";
                    readonly examples: readonly ["Tue, 02 Jul 2024 08:28:00.000000000 UTC +00:00"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Date in ISO 8601 format when the job posting was created";
                    readonly examples: readonly ["Wed, 10 Jul 2024 13:30:02.000000000 UTC +00:00"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesAttendanceOvertimeRequestsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "author_id", "status", "date", "hours_amount_in_cents", "approver", "is_editable"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly approver_id: {
                    readonly type: "integer";
                };
                readonly author_id: {
                    readonly type: "integer";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["pending", "approved", "rejected", "none"];
                    readonly description: "`pending` `approved` `rejected` `none`";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly reason: {
                    readonly type: "string";
                };
                readonly date: {
                    readonly type: "string";
                };
                readonly hours_amount_in_cents: {
                    readonly type: "integer";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly approver: {
                    readonly type: "boolean";
                };
                readonly approver_full_name: {
                    readonly type: "string";
                };
                readonly is_editable: {
                    readonly type: "boolean";
                    readonly description: "Defines if the overtime request can be edited";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesAttendanceShiftsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "date", "reference_date", "created_at", "company_id", "minutes"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the shift";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the employee assigned to the shift";
                    readonly examples: readonly [1];
                };
                readonly date: {
                    readonly type: "string";
                    readonly description: "Date of the shift";
                    readonly examples: readonly ["2023-10-01"];
                };
                readonly reference_date: {
                    readonly type: "string";
                    readonly description: "Reference date for the shift";
                    readonly examples: readonly ["2023-09-30"];
                };
                readonly clock_in: {
                    readonly type: "string";
                    readonly description: "Time when the employee clocked in";
                    readonly examples: readonly ["08:30"];
                };
                readonly clock_out: {
                    readonly type: "string";
                    readonly description: "Time when the employee clocked out";
                    readonly examples: readonly ["12:30"];
                };
                readonly in_source: {
                    readonly type: "string";
                    readonly description: "Source of the clock-in time";
                    readonly examples: readonly ["automatic"];
                };
                readonly out_source: {
                    readonly type: "string";
                    readonly description: "Source of the clock-out time";
                    readonly examples: readonly ["automatic"];
                };
                readonly observations: {
                    readonly type: "string";
                    readonly description: "Additional observations about the shift";
                    readonly examples: readonly ["Employee arrived late due to traffic"];
                };
                readonly location_type: {
                    readonly type: "string";
                    readonly description: "Type of location for the shift\n\n`office` `business_trip` `work_from_home`";
                    readonly enum: readonly ["office", "business_trip", "work_from_home"];
                    readonly examples: readonly ["office"];
                };
                readonly half_day: {
                    readonly type: "string";
                    readonly description: "Indicates which worked part of the day\n\n`beginning_of_day` `end_of_day`";
                    readonly enum: readonly ["beginning_of_day", "end_of_day"];
                    readonly examples: readonly ["beginning_of_day"];
                };
                readonly in_location_latitude: {
                    readonly type: "number";
                    readonly description: "Latitude of the clock-in location";
                    readonly examples: readonly [37.7749];
                };
                readonly in_location_longitude: {
                    readonly type: "number";
                    readonly description: "Longitude of the clock-in location";
                    readonly examples: readonly [-122.4194];
                };
                readonly in_location_accuracy: {
                    readonly type: "number";
                    readonly description: "Accuracy of the clock-in location";
                    readonly examples: readonly [5];
                };
                readonly out_location_latitude: {
                    readonly type: "number";
                    readonly description: "Latitude of the clock-out location";
                    readonly examples: readonly [37.7749];
                };
                readonly out_location_longitude: {
                    readonly type: "number";
                    readonly description: "Longitude of the clock-out location";
                    readonly examples: readonly [-122.4194];
                };
                readonly out_location_accuracy: {
                    readonly type: "number";
                    readonly description: "Accuracy of the clock-out location";
                    readonly examples: readonly [5.7];
                };
                readonly workable: {
                    readonly type: "boolean";
                    readonly description: "Indicates if the shift is workable";
                    readonly examples: readonly [true];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Timestamp when the shift record was created";
                    readonly examples: readonly ["2023-10-01T08:00:00Z"];
                };
                readonly workplace_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the location";
                    readonly examples: readonly [1];
                };
                readonly time_settings_break_configuration_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the break configuration";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the company";
                    readonly examples: readonly [1];
                };
                readonly minutes: {
                    readonly type: "integer";
                    readonly description: "Number in minutes of the shift";
                    readonly examples: readonly [152];
                };
                readonly clock_in_with_seconds: {
                    readonly type: "string";
                    readonly description: "Clock in time with seconds";
                    readonly examples: readonly ["08:30:15"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesContractsCompensationsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "contract_version_id", "contracts_taxonomy_id", "unit"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Compensation ID";
                    readonly examples: readonly [1];
                };
                readonly contract_version_id: {
                    readonly type: "integer";
                    readonly description: "Contract version ID";
                    readonly examples: readonly [1];
                };
                readonly contracts_taxonomy_id: {
                    readonly type: "integer";
                    readonly description: "Contracts taxonomy ID";
                    readonly examples: readonly [1];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Compensation description";
                    readonly examples: readonly ["Compensation for Meal"];
                };
                readonly compensation_type: {
                    readonly type: "string";
                    readonly description: "Required field. You can only use the following options: fixed, undefined, up_to, per_worked_day, per_worked_hour";
                    readonly examples: readonly ["fixed"];
                };
                readonly amount: {
                    readonly type: "integer";
                    readonly description: "Required field unless your compensation type is undefined";
                    readonly examples: readonly [1000];
                };
                readonly unit: {
                    readonly type: "string";
                    readonly description: "Unit of the compensation";
                    readonly examples: readonly ["Money"];
                };
                readonly sync_with_supplements: {
                    readonly type: "boolean";
                    readonly description: "Sync with supplements";
                };
                readonly payroll_policy_id: {
                    readonly type: "integer";
                    readonly description: "Payroll policy ID";
                    readonly examples: readonly [1];
                };
                readonly recurrence_count: {
                    readonly type: "integer";
                    readonly description: "Recurrence count";
                    readonly examples: readonly [1];
                };
                readonly starts_on: {
                    readonly type: "string";
                    readonly description: "When the compensation starts_on";
                    readonly examples: readonly ["2022-01-01"];
                };
                readonly recurrence: {
                    readonly type: "string";
                    readonly description: "Compensation recurrence";
                    readonly examples: readonly ["monthly"];
                };
                readonly first_payment_on: {
                    readonly type: "string";
                    readonly description: "When the first payment is done";
                    readonly examples: readonly ["2022-01-01"];
                };
                readonly calculation: {
                    readonly type: "string";
                    readonly description: "Compensation calculation";
                    readonly examples: readonly ["current period"];
                };
                readonly currency: {
                    readonly type: "string";
                };
                readonly time_condition: {
                    readonly type: "string";
                    readonly enum: readonly ["full_day", "half_day", "custom"];
                    readonly description: "`full_day` `half_day` `custom`";
                };
                readonly minimum_amount_of_hours: {
                    readonly type: "integer";
                };
                readonly minimum_amount_of_hours_in_cents: {
                    readonly type: "integer";
                    readonly description: "Compensation expected minimum amount of hours in cents";
                    readonly examples: readonly [1000];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesContractsContractVersionsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["company_id", "employee_id", "effective_on", "has_payroll", "created_at", "updated_at", "fr_forfait_jours"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier for the contract version.";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "identifier for company.";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "employee identifier, refers to /employees/employees endpoint.";
                    readonly examples: readonly [1];
                };
                readonly effective_on: {
                    readonly type: "string";
                    readonly description: "the day the specific contract starts, in case of hiring the same than starts_on.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly job_title: {
                    readonly type: "string";
                    readonly description: "job title of the employee.";
                    readonly examples: readonly ["Designer"];
                };
                readonly job_catalog_level: {
                    readonly type: "string";
                    readonly description: "the level of the employee in the job catalog.";
                    readonly examples: readonly ["Senior Designer"];
                };
                readonly job_catalog_role: {
                    readonly type: "string";
                    readonly description: "the role of the employee in the job catalog.";
                    readonly examples: readonly ["Designer"];
                };
                readonly starts_on: {
                    readonly type: "string";
                    readonly description: "the day the employee is hired.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly ends_on: {
                    readonly type: "string";
                    readonly description: "the day the employee is terminated.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly has_payroll: {
                    readonly type: "boolean";
                    readonly description: "boolean that indicates if the employee asociated to this contract belongs to a payroll policy.";
                    readonly examples: readonly [true];
                };
                readonly has_trial_period: {
                    readonly type: "boolean";
                    readonly description: "a flag that indicates if the employee has a trial period.";
                    readonly examples: readonly [true];
                };
                readonly trial_period_ends_on: {
                    readonly type: "string";
                    readonly description: "when the trial period ends.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly salary_amount: {
                    readonly type: "integer";
                    readonly description: "the amount of money the employee earns.";
                    readonly examples: readonly [1000];
                };
                readonly salary_frequency: {
                    readonly type: "string";
                    readonly description: "the frequency of the salary payment.";
                    readonly examples: readonly ["yearly"];
                };
                readonly working_week_days: {
                    readonly type: "string";
                    readonly description: "the days of the week the employee works.";
                    readonly examples: readonly ["monday,tuesday,wednesday,thursday,friday"];
                };
                readonly working_hours: {
                    readonly type: "integer";
                    readonly description: "the amount of hours the employee works.";
                    readonly examples: readonly [40];
                };
                readonly working_hours_frequency: {
                    readonly type: "string";
                    readonly description: "the frequency of the working hours.";
                    readonly examples: readonly ["week"];
                };
                readonly max_legal_yearly_hours: {
                    readonly type: "integer";
                    readonly description: "the maximum amount of hours the employee can work in a year.";
                    readonly examples: readonly [2000];
                };
                readonly maximum_weekly_hours: {
                    readonly type: "integer";
                    readonly description: "the maximum amount of hours the employee can work in a week.";
                    readonly examples: readonly [40];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "the date the contract version was created.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "the date of the last contract version updated.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly es_has_teleworking_contract: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the contract has teleworking.";
                    readonly examples: readonly [true];
                };
                readonly es_cotization_group: {
                    readonly type: "integer";
                    readonly description: "the group of cotization of the employee.";
                    readonly examples: readonly [1];
                };
                readonly es_contract_observations: {
                    readonly type: "string";
                    readonly description: "observations of the contract.";
                    readonly examples: readonly ["review contract for job promotion"];
                };
                readonly es_job_description: {
                    readonly type: "string";
                    readonly description: "the job description of the employee.";
                    readonly examples: readonly ["Designer"];
                };
                readonly es_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "contract type identifier.";
                    readonly examples: readonly [1];
                };
                readonly es_working_day_type_id: {
                    readonly type: "integer";
                    readonly description: "working day type identifier.";
                    readonly examples: readonly [1];
                };
                readonly es_education_level_id: {
                    readonly type: "integer";
                    readonly description: "education level identifier.";
                    readonly examples: readonly [1];
                };
                readonly es_professional_category_id: {
                    readonly type: "integer";
                    readonly description: "professional category identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_employee_type: {
                    readonly type: "string";
                    readonly description: "employee type.";
                    readonly examples: readonly ["apprenti"];
                };
                readonly fr_forfait_jours: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the employee is allowed to work within the framework of a fixed number of days.";
                    readonly examples: readonly [true];
                };
                readonly fr_jours_par_an: {
                    readonly type: "integer";
                    readonly description: "the number of days the employee is allowed to work.";
                    readonly examples: readonly [200];
                };
                readonly fr_coefficient: {
                    readonly type: "string";
                };
                readonly fr_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "contract type identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_level_id: {
                    readonly type: "integer";
                    readonly description: "level identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_step_id: {
                    readonly type: "integer";
                    readonly description: "step identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_mutual_id: {
                    readonly type: "integer";
                    readonly description: "mutual identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_professional_category_id: {
                    readonly type: "integer";
                    readonly description: "professional category identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_work_type_id: {
                    readonly type: "integer";
                    readonly description: "work type identifier.";
                    readonly examples: readonly [1];
                };
                readonly de_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "contract type identifier.";
                    readonly examples: readonly [1];
                };
                readonly pt_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "contract type identifier.";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesCustomFieldsFieldsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "field_type", "label_text"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Field identifier";
                    readonly examples: readonly [2];
                };
                readonly field_type: {
                    readonly type: "string";
                    readonly description: "The type of the field's value\n\n`text` `long_text` `date` `rating` `checkbox` `single_choice` `multiple_choice` `money` `cents`";
                    readonly enum: readonly ["text", "long_text", "date", "rating", "checkbox", "single_choice", "multiple_choice", "money", "cents"];
                    readonly examples: readonly ["text"];
                };
                readonly label_text: {
                    readonly type: "string";
                    readonly description: "Field label";
                    readonly examples: readonly ["T-Shirt Size"];
                };
                readonly position: {
                    readonly type: "integer";
                    readonly description: "Field position within employee profile";
                    readonly examples: readonly [3];
                };
                readonly required: {
                    readonly type: "boolean";
                    readonly description: "Requirement to fill this field";
                    readonly examples: readonly [true];
                };
                readonly min_value: {
                    readonly type: "integer";
                    readonly description: "Minimum value in range field type";
                    readonly examples: readonly [10];
                };
                readonly max_value: {
                    readonly type: "integer";
                    readonly description: "Maximum value in range field type";
                    readonly examples: readonly [0];
                };
                readonly options: {
                    readonly type: "array";
                    readonly description: "Array of options";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly [true, false, "maybe"];
                };
                readonly legal_entity_name: {
                    readonly type: "string";
                    readonly description: "Legal entity name where this field belongs";
                    readonly examples: readonly ["Factorial Legal"];
                };
                readonly slug: {
                    readonly type: "string";
                    readonly description: "Custom field slug";
                    readonly examples: readonly ["tshirt_size"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesDocumentsDocumentsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["created_at", "filename", "id", "public", "space", "updated_at"];
            readonly properties: {
                readonly author_id: {
                    readonly type: "integer";
                    readonly description: "access identifier of the author, refers to /employees/employees endpoint.";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "company identifier, refers to /api/me endpoint.";
                    readonly examples: readonly [1];
                };
                readonly content_type: {
                    readonly type: "string";
                    readonly description: "document content type.";
                    readonly examples: readonly ["application/pdf"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "creation date of the document.";
                    readonly examples: readonly ["2020-01-01T00:00:00Z"];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "employee identifier associated to the document.";
                    readonly examples: readonly [1];
                };
                readonly extension: {
                    readonly type: "string";
                    readonly description: "document extension.";
                    readonly examples: readonly ["pdf"];
                };
                readonly file_size: {
                    readonly type: "integer";
                    readonly description: "document file size in bytes.";
                    readonly examples: readonly [1024];
                };
                readonly file: {
                    readonly type: "string";
                    readonly description: "url of the document for download it.";
                    readonly examples: readonly ["/documents/60"];
                };
                readonly filename: {
                    readonly type: "string";
                    readonly description: "name of the document.";
                    readonly examples: readonly ["document.pdf"];
                };
                readonly folder_id: {
                    readonly type: "integer";
                    readonly description: "folder identifier, references to documents/folders endpoint.";
                    readonly examples: readonly [1];
                };
                readonly id: {
                    readonly type: "integer";
                    readonly description: "document identifier.";
                    readonly examples: readonly [1];
                };
                readonly is_company_document: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the document is a company document.";
                    readonly examples: readonly [true];
                };
                readonly is_management_document: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the document is a management document.";
                    readonly examples: readonly [true];
                };
                readonly is_pending_assignment: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the document is pending assignment.";
                    readonly examples: readonly [true];
                };
                readonly leave_id: {
                    readonly type: "integer";
                    readonly description: "leave identifier associated to the document, refers to /timeoff/leaves endpoint.";
                    readonly examples: readonly [1];
                };
                readonly public: {
                    readonly type: "boolean";
                    readonly description: "flag to indicate if the document is public.";
                    readonly examples: readonly [true];
                };
                readonly signature_status: {
                    readonly type: "string";
                    readonly description: "document signature status.\n\n`pending` `partially_signed` `declined` `completed` `bounced_email` `cancelled` `error`";
                    readonly enum: readonly ["pending", "partially_signed", "declined", "completed", "bounced_email", "cancelled", "error"];
                    readonly examples: readonly ["pending"];
                };
                readonly signees: {
                    readonly type: "array";
                    readonly description: "list of signee access identifiers associated to the document, refers to /employees/employees endpoint.";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly space: {
                    readonly type: "string";
                    readonly description: "document space.";
                    readonly examples: readonly ["company_public"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "last update date of the document.";
                    readonly examples: readonly ["2020-01-01T00:00:00Z"];
                };
                readonly deleted_at: {
                    readonly type: "string";
                    readonly description: "deletion date of the document.";
                    readonly examples: readonly ["2020-01-01T00:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesFinanceCostCentersId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id", "active_employees_count", "historical_employees_count", "status"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                };
                readonly code: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly active_employees_count: {
                    readonly type: "integer";
                };
                readonly historical_employees_count: {
                    readonly type: "integer";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly deactivation_date: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesLocationsLocationsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "name", "main"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly timezone: {
                    readonly type: "string";
                };
                readonly country: {
                    readonly type: "string";
                };
                readonly state: {
                    readonly type: "string";
                };
                readonly city: {
                    readonly type: "string";
                };
                readonly address_line_1: {
                    readonly type: "string";
                };
                readonly address_line_2: {
                    readonly type: "string";
                };
                readonly postal_code: {
                    readonly type: "string";
                };
                readonly phone_number: {
                    readonly type: "string";
                };
                readonly main: {
                    readonly type: "boolean";
                };
                readonly latitude: {
                    readonly type: "number";
                };
                readonly longitude: {
                    readonly type: "number";
                };
                readonly radius: {
                    readonly type: "number";
                };
                readonly siret: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesPayrollEmployeesIdentifiersId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "country"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "payroll employee identifier";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "identifier of the employee";
                    readonly examples: readonly [1];
                };
                readonly social_security_number: {
                    readonly type: "string";
                    readonly description: "social security number of the employee";
                    readonly examples: readonly [123456788];
                };
                readonly tax_id: {
                    readonly type: "string";
                    readonly description: "tax id of the employee";
                    readonly examples: readonly [123456789];
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "country code of the employee pt | it | de\n\n`pt` `de` `it`";
                    readonly enum: readonly ["pt", "de", "it"];
                    readonly examples: readonly ["it"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesPayrollIntegrationsBaseCodesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "code", "codeable_id", "codeable_type", "integration"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Code identifier";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company ID where the code belongs to";
                    readonly examples: readonly [2];
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Code value";
                    readonly examples: readonly ["COD-51"];
                };
                readonly codeable_id: {
                    readonly type: "integer";
                    readonly description: "Related object ID. Used together with codeable_type";
                    readonly examples: readonly [5];
                };
                readonly codeable_type: {
                    readonly type: "string";
                    readonly description: "Related object type. Used together with codeable_id";
                    readonly examples: readonly ["Employee | Company | LegalEntity | Location | TimeoffLeaveType"];
                };
                readonly integration: {
                    readonly type: "string";
                    readonly description: "Integration name\n\n`a3innuva` `a3nom` `paierh` `silae` `silae_api` `datev` `datev_api` `datev_lug_api` `zucchetti`";
                    readonly enum: readonly ["a3innuva", "a3nom", "paierh", "silae", "silae_api", "datev", "datev_api", "datev_lug_api", "zucchetti"];
                    readonly examples: readonly ["a3innuva"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesPayrollSupplementsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "company_id", "unit"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "The identifier of the supplement";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "The identifier of the employee associated with the supplement";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "The identifier of the company associated with the supplement";
                    readonly examples: readonly [1];
                };
                readonly contracts_compensation_id: {
                    readonly type: "integer";
                    readonly description: "The contract compensation identifier associated with the supplement";
                    readonly examples: readonly [1];
                };
                readonly contracts_taxonomy_id: {
                    readonly type: "integer";
                    readonly description: "The taxonomy identifier associated with the supplement";
                    readonly examples: readonly [1];
                };
                readonly amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The amount of the supplement in cents";
                    readonly examples: readonly [10000];
                };
                readonly unit: {
                    readonly type: "string";
                    readonly description: "The unit of the supplement\n\n`money` `units` `time`";
                    readonly enum: readonly ["money", "units", "time"];
                    readonly examples: readonly ["hours"];
                };
                readonly effective_on: {
                    readonly type: "string";
                    readonly description: "The date on which the supplement becomes effective";
                    readonly examples: readonly ["2024-01-01"];
                };
                readonly created_at: {
                    readonly type: "boolean";
                    readonly description: "The created at date when the supplement was created";
                    readonly examples: readonly ["2024-01-01T12:00:00Z"];
                };
                readonly updated_at: {
                    readonly type: "boolean";
                    readonly description: "The last updated at date when the supplement was last updated";
                    readonly examples: readonly ["2024-01-05T12:00:00Z"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The description of the supplement";
                    readonly examples: readonly ["Supplement for additional work hours"];
                };
                readonly payroll_policy_period_id: {
                    readonly type: "integer";
                    readonly description: "The payroll policy period identifier associated with the supplement";
                    readonly examples: readonly [23456];
                };
                readonly employee_observations: {
                    readonly type: "array";
                    readonly description: "Observations on the employee made by the admin or manager";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["Worked extra shifts", "Bonus for holiday work"];
                };
                readonly raw_minutes_in_cents: {
                    readonly type: "integer";
                    readonly description: "The raw value of minutes in cents associated with the supplement";
                    readonly examples: readonly [5000];
                };
                readonly minutes_in_cents: {
                    readonly type: "integer";
                    readonly description: "The value of minutes in cents after adjustments";
                    readonly examples: readonly [4800];
                };
                readonly equivalent_minutes_in_cents: {
                    readonly type: "integer";
                    readonly description: "The equivalent value of minutes in cents for payroll processing";
                    readonly examples: readonly [4600];
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "The currency used for the supplement, typically in ISO 4217 format";
                    readonly examples: readonly ["USD"];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "The legal entity identifier associated with the supplement";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesPerformanceReviewOwnersId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "access_id", "performance_review_process_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review owner ID";
                    readonly examples: readonly [1];
                };
                readonly access_id: {
                    readonly type: "integer";
                    readonly description: "Review owner access ID";
                    readonly examples: readonly [2];
                };
                readonly performance_review_process_id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesPerformanceReviewProcessTargetsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "access_id", "performance_review_process_id", "materialized_process_target_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Review process target ID";
                    readonly examples: readonly ["1-3"];
                };
                readonly access_id: {
                    readonly type: "integer";
                    readonly description: "Participant access ID";
                    readonly examples: readonly [3];
                };
                readonly performance_review_process_id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly materialized_process_target_id: {
                    readonly type: "integer";
                    readonly examples: readonly [5];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesPerformanceReviewProcessesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "status", "start_validation_errors", "archived", "agreements_configuration", "employee_score_configuration"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Review process name";
                    readonly examples: readonly ["Performance Review - Q1 2024"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A brief description of the review process";
                    readonly examples: readonly ["The performance review for the first quarter of 2024 has started!"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Review process status\n\n`draft` `scheduled` `active` `finished`";
                    readonly enum: readonly ["draft", "scheduled", "active", "finished"];
                    readonly examples: readonly ["draft"];
                };
                readonly target_strategy: {
                    readonly type: "object";
                    readonly description: "Condition that defines the employees that will be evaluated (participants). Calculated when the review process starts";
                    readonly examples: readonly ["all_employees"];
                    readonly additionalProperties: true;
                };
                readonly reviewer_strategies: {
                    readonly type: "array";
                    readonly description: "Review types that will be assigned to the review process. It'll be used to create the evaluations when the process starts\n\n`self` `manager` `direct_reports` `peers`";
                    readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["self", "manager"];
                };
                readonly starts_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should start";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly ends_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should end";
                    readonly examples: readonly ["2024-04-01T00:00:00Z"];
                };
                readonly start_validation_errors: {
                    readonly type: "array";
                    readonly description: "Missing or invalid information to be able to start the review process\n\n`missing_deadline` `invalid_deadline` `missing_title` `missing_target_strategy` `missing_target_strategy_members` `missing_reviewer_strategy` `missing_questions` `missing_potential_reviewers`";
                    readonly enum: readonly ["missing_deadline", "invalid_deadline", "missing_title", "missing_target_strategy", "missing_target_strategy_members", "missing_reviewer_strategy", "missing_questions", "missing_potential_reviewers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["invalid_deadline", "missing_questions"];
                };
                readonly archived: {
                    readonly type: "boolean";
                    readonly description: "Whether the review process is archived or not";
                };
                readonly agreements_configuration: {
                    readonly type: "object";
                    readonly description: "Configuration of the action plans feature";
                    readonly additionalProperties: true;
                };
                readonly employee_score_configuration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly last_bulk_reminder: {
                    readonly type: "string";
                    readonly description: "Date when the last bulk reminder was sent";
                    readonly examples: readonly ["2024-03-01T00:00:00Z"];
                };
                readonly cycle_id: {
                    readonly type: "string";
                    readonly description: "Performance cycle ID";
                    readonly examples: readonly ["5"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesPostsCommentsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "post_id", "author_id", "text", "created_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the comment";
                    readonly examples: readonly [1];
                };
                readonly post_id: {
                    readonly type: "integer";
                    readonly description: "identifier of the post";
                    readonly examples: readonly [1];
                };
                readonly author_id: {
                    readonly type: "integer";
                    readonly description: "author identifier refers to the employee access, you can get the employee from the employee endpoint";
                    readonly examples: readonly [1];
                };
                readonly text: {
                    readonly type: "string";
                    readonly description: "text of the comment";
                    readonly examples: readonly ["How is the week going Ana?"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "date of the comment";
                    readonly examples: readonly ["2024-07-17T00:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesPostsGroupsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "title"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the group.";
                    readonly examples: readonly [1];
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "title of the group.";
                    readonly examples: readonly ["Company announcements"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "description of the group.";
                    readonly examples: readonly ["The place to find all company announcements."];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesPostsPostsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "allow_comments_and_reactions", "published_at", "created_at", "updated_at", "visits_count", "comments_count"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifiers of the post";
                    readonly examples: readonly [1];
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "title of the post";
                    readonly examples: readonly ["Are you ready for the perfomance review?"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "description of the post";
                    readonly examples: readonly ["As you know today we start the performance review process."];
                };
                readonly allow_comments_and_reactions: {
                    readonly type: "boolean";
                    readonly description: "allow comments and reactions on the post";
                    readonly examples: readonly [true];
                };
                readonly published_at: {
                    readonly type: "string";
                    readonly description: "date when the post has been published";
                    readonly examples: readonly ["2024-07-17T00:00:00Z"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "date when the post has been created";
                    readonly examples: readonly ["2024-07-17T00:00:00Z"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "date when the post has been updated";
                    readonly examples: readonly ["2024-07-17T00:00:00Z"];
                };
                readonly visits_count: {
                    readonly type: "integer";
                    readonly description: "number of visits of the post";
                    readonly examples: readonly [10];
                };
                readonly cover_image_url: {
                    readonly type: "string";
                    readonly description: "url of the cover image";
                    readonly examples: readonly ["https://example.com/image.jpg"];
                };
                readonly posts_group_id: {
                    readonly type: "integer";
                    readonly description: "group identifier of the post, references to posts/groups endpoint";
                    readonly examples: readonly [1];
                };
                readonly comments_count: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesProjectManagementFlexibleTimeRecordsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "date", "imputed_minutes", "project_worker_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly date: {
                    readonly type: "string";
                };
                readonly imputed_minutes: {
                    readonly type: "integer";
                };
                readonly project_worker_id: {
                    readonly type: "integer";
                };
                readonly subproject_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesProjectManagementSubprojectsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["name", "project_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly project_id: {
                    readonly type: "integer";
                };
                readonly inputed_minutes: {
                    readonly type: "integer";
                };
                readonly labor_cost_cents: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesProjectManagementTimeRecordsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "project_worker_id", "attendance_shift_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly project_worker_id: {
                    readonly type: "integer";
                };
                readonly attendance_shift_id: {
                    readonly type: "integer";
                };
                readonly subproject_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesShiftManagementShiftsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "state", "employee_id", "start_at", "end_at", "timezone", "local_start_at", "local_end_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Shift identifier";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the shift";
                    readonly examples: readonly ["Morning shift"];
                };
                readonly state: {
                    readonly type: "string";
                    readonly examples: readonly ["published, draft"];
                };
                readonly location_id: {
                    readonly type: "integer";
                    readonly description: "Shift location identifier";
                    readonly examples: readonly [3];
                };
                readonly locations_work_area_id: {
                    readonly type: "integer";
                    readonly description: "Shift work area identifier";
                    readonly examples: readonly [5];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee identifier";
                    readonly examples: readonly [45];
                };
                readonly start_at: {
                    readonly type: "string";
                    readonly description: "Start date of the shift";
                    readonly examples: readonly ["2020-09-07T06:00:00.000+00:00"];
                };
                readonly end_at: {
                    readonly type: "string";
                    readonly description: "End date of the shift";
                    readonly examples: readonly ["2020-09-07T15:00:00.000+00:00"];
                };
                readonly notes: {
                    readonly type: "string";
                    readonly description: "Shift notes";
                    readonly examples: readonly ["This is a shift note"];
                };
                readonly extra_hours: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate if the shift has extra hours";
                };
                readonly default_shift_title: {
                    readonly type: "string";
                    readonly description: "Default shift title";
                };
                readonly timezone: {
                    readonly type: "string";
                    readonly description: "Shift timezone";
                    readonly examples: readonly ["Europe/Madrid"];
                };
                readonly local_start_at: {
                    readonly type: "string";
                    readonly description: "Local start date of the shift";
                    readonly examples: readonly ["2020-09-07T07:00:00.000+00:00"];
                };
                readonly local_end_at: {
                    readonly type: "string";
                    readonly description: "Local end date of the shift";
                    readonly examples: readonly ["2020-09-07T15:00:00.000+00:00"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesTasksTaskFilesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "task_id", "filename", "path", "created_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the file.";
                    readonly examples: readonly [1];
                };
                readonly task_id: {
                    readonly type: "integer";
                    readonly description: "identifier of the task.";
                    readonly examples: readonly [1];
                };
                readonly filename: {
                    readonly type: "string";
                    readonly description: "name of the file.";
                    readonly examples: readonly ["expenses.png"];
                };
                readonly content_type: {
                    readonly type: "string";
                    readonly description: "content type of the file.";
                    readonly examples: readonly ["image/png"];
                };
                readonly path: {
                    readonly type: "string";
                    readonly description: "path of the file, for downloading the file you need to concat api_url/path.";
                    readonly examples: readonly ["/tasks/tasks_files/405"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "creation date of the file.";
                    readonly examples: readonly ["2024-10-06"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesTasksTasksId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id", "assignee_ids", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the task";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the task";
                    readonly examples: readonly ["Upload payroll files"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the author of the task";
                    readonly examples: readonly [1];
                };
                readonly content: {
                    readonly type: "string";
                    readonly description: "Content of the task";
                    readonly examples: readonly ["Do it as soon as possible"];
                };
                readonly due_on: {
                    readonly type: "string";
                    readonly description: "Due on date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly assignee_ids: {
                    readonly type: "array";
                    readonly description: "Employees assigned to the task, assignee_id references to employee_id";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                };
                readonly author_employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee id of the author of the task";
                    readonly examples: readonly [1];
                };
                readonly completed_at: {
                    readonly type: "string";
                    readonly description: "Completed at date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly completed_by_id: {
                    readonly type: "integer";
                    readonly description: "Completed by identifier";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "Updated at date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the task\n\n`todo` `in_progress` `done` `discarded`";
                    readonly enum: readonly ["todo", "in_progress", "done", "discarded"];
                    readonly examples: readonly ["done"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesTeamsMembershipsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "team_id", "lead"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Membership ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company ID of the membership";
                    readonly examples: readonly [5];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee ID of the membership";
                    readonly examples: readonly [12];
                };
                readonly team_id: {
                    readonly type: "integer";
                    readonly description: "Team ID of the membership";
                    readonly examples: readonly [4];
                };
                readonly lead: {
                    readonly type: "boolean";
                    readonly description: "Whether the employee is a lead of the team or not";
                    readonly examples: readonly [true];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesTeamsTeamsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly avatar: {
                    readonly type: "string";
                };
                readonly employee_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly lead_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly company_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesTimePlanningPlanningVersionsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["effective_at", "planning_tool", "employee_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly effective_at: {
                    readonly type: "string";
                };
                readonly planning_tool: {
                    readonly type: "string";
                };
                readonly number_of_rest_days_in_cents: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly work_schedule_schedule_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesTimeoffAllowanceIncidencesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "days_in_cents", "timeoff_allowance_id", "effective_on", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier of the allowance incidence";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee id of the affected employee";
                    readonly examples: readonly [1];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Optional comment regarding the incidence";
                    readonly examples: readonly ["Added because working on a holiday"];
                };
                readonly days_in_cents: {
                    readonly type: "integer";
                    readonly description: "How many units * 100 does the incidence add/substract. Can be positive or negative. Example is one unit";
                    readonly examples: readonly [100];
                };
                readonly timeoff_allowance_id: {
                    readonly type: "integer";
                    readonly description: "To what allowance does the incidence affect. It will dictate if its days or hours";
                    readonly examples: readonly [2];
                };
                readonly effective_on: {
                    readonly type: "string";
                    readonly description: "When does the incidence take effect; this is for time off cycles calculations.";
                    readonly examples: readonly ["2024-01-02"];
                };
                readonly target_balance: {
                    readonly type: "string";
                    readonly description: "Whether the incidence affects the Accrued or the Available counter.";
                    readonly examples: readonly ["accrued"];
                };
                readonly created_at: {
                    readonly type: "integer";
                    readonly description: "Unix timestamp when the DB record was created";
                    readonly examples: readonly [1723623354];
                };
                readonly updated_at: {
                    readonly type: "integer";
                    readonly description: "Unix timestamp when the DB record was last updated";
                    readonly examples: readonly [1723623354];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesTimeoffAllowancesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "allowance_type", "available_days", "count_holiday_as_workable", "leave_type_ids", "name", "proration_type", "rounding", "tenure_periods", "timeoff_cycle", "timeoff_policy_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier of the allowance";
                    readonly examples: readonly [1];
                };
                readonly accrued_denominator_in_cents: {
                    readonly type: "integer";
                    readonly description: "Only for Allowances based on worked time. It represents how many units you need to work to be granted allowance units";
                    readonly examples: readonly [1000];
                };
                readonly accrued_factor_in_cents: {
                    readonly type: "integer";
                    readonly description: "Only for Allowances based on worked time. It represents how many units you are given per unit of time worked";
                    readonly examples: readonly [10];
                };
                readonly accrued_units_availability: {
                    readonly type: "string";
                    readonly description: "When can the acrrued units be spent.\n\n`current_cycle` `next_cycle`";
                    readonly enum: readonly ["current_cycle", "next_cycle"];
                    readonly examples: readonly ["current_cycle"];
                };
                readonly allowance_type: {
                    readonly type: "string";
                    readonly description: "Sets the allowance units. Can be \"days\" or \"hours\"\n\n`days` `hours`";
                    readonly enum: readonly ["days", "hours"];
                    readonly examples: readonly ["days"];
                };
                readonly available_days: {
                    readonly type: "string";
                    readonly description: "Indicates how the allowance units are accrued. For example all_days means all allowance days are given on the first day of the cycle.\n\n`all_days` `generated_days` `generated_days_monthly` `generated_days_monthly_first_day` `monthly_fifteenth` `mensiversary` `bimonthly_first_and_fifteenth` `bimonthly_fifteenth_and_last`";
                    readonly enum: readonly ["all_days", "generated_days", "generated_days_monthly", "generated_days_monthly_first_day", "monthly_fifteenth", "mensiversary", "bimonthly_first_and_fifteenth", "bimonthly_fifteenth_and_last"];
                    readonly examples: readonly ["all_days"];
                };
                readonly carry_over_days: {
                    readonly type: "integer";
                    readonly description: "How many units can carry over between cycles";
                    readonly examples: readonly [15];
                };
                readonly carry_over_units_in_cents: {
                    readonly type: "integer";
                    readonly description: "How many units can carry over between cycles multiplied by 100";
                    readonly examples: readonly [1500];
                };
                readonly count_holiday_as_workable: {
                    readonly type: "boolean";
                    readonly description: "This setting flags if units taken during a bank holiday should be deducted or not from allowance.";
                };
                readonly cycle_length: {
                    readonly type: "integer";
                    readonly description: "How many months does each allowance cycle last";
                    readonly examples: readonly [12];
                };
                readonly cycle_start: {
                    readonly type: "string";
                    readonly description: "When does the cycle start.";
                    readonly examples: readonly ["jan"];
                };
                readonly days_type: {
                    readonly type: "string";
                    readonly description: "Indicates if the allowance is based on working on calendar days.\n\n`working_days` `natural_days` `natural_days_only_range` `french_calendar_days` `french_ouvres`";
                    readonly enum: readonly ["working_days", "natural_days", "natural_days_only_range", "french_calendar_days", "french_ouvres"];
                    readonly examples: readonly ["working_days"];
                };
                readonly employee_carry_over_starting_year: {
                    readonly type: "integer";
                    readonly description: "When does the carryover start";
                    readonly examples: readonly [1];
                };
                readonly expire_in_months: {
                    readonly type: "integer";
                    readonly description: "When does the carryover expire in months.";
                    readonly examples: readonly [6];
                };
                readonly frequency: {
                    readonly type: "string";
                    readonly description: "Defines duration of the allowance cycles. Can be \"yearly\", \"monthly_flexible\" or \"lifetime\"\n\n`monthly_flexible` `yearly` `lifetime`";
                    readonly enum: readonly ["monthly_flexible", "yearly", "lifetime"];
                    readonly examples: readonly ["yearly"];
                };
                readonly holiday_allowance_in_cents: {
                    readonly type: "integer";
                    readonly description: "Base amount of holiday allowance units multiplied by 100";
                    readonly examples: readonly [2300];
                };
                readonly leave_type_ids: {
                    readonly type: "array";
                    readonly description: "An array of leave type ids associated with that allowance";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3, 4];
                };
                readonly maximum_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "Maximum the allowance can reach on accrued";
                    readonly examples: readonly [2800];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Allowance name set by the user";
                    readonly examples: readonly ["Holiday Allowance"];
                };
                readonly negative_counter_type: {
                    readonly type: "string";
                    readonly description: "Whether the allowance allows to request more days than available\n\n`negative_counter_disabled` `negative_counter_enabled`";
                    readonly enum: readonly ["negative_counter_disabled", "negative_counter_enabled"];
                    readonly examples: readonly ["negative_counter_disabled"];
                };
                readonly position: {
                    readonly type: "integer";
                    readonly description: "Indicates the position in the allowance when rendering them in UI";
                    readonly examples: readonly [0];
                };
                readonly proration_type: {
                    readonly type: "string";
                    readonly description: "Whether the allowance has proration enabled or not.\n\n`proration_enabled` `proration_disabled`";
                    readonly enum: readonly ["proration_enabled", "proration_disabled"];
                    readonly examples: readonly ["proration_enabled"];
                };
                readonly pto_proratio_enabled: {
                    readonly type: "boolean";
                    readonly description: "Whether the allowance days are prorrated or not";
                };
                readonly range_type: {
                    readonly type: "string";
                    readonly description: "Configures how leaves duration is handled.\n\n`exact_range` `extra_non_working_days_at_end`";
                    readonly enum: readonly ["exact_range", "extra_non_working_days_at_end"];
                    readonly examples: readonly ["working_days"];
                };
                readonly rounding: {
                    readonly type: "string";
                    readonly description: "How the accrued units of the allowance are rounded. It depends if the allowance is set in hours or days.\n\n`half_day` `decimals` `quarters` `round_up`";
                    readonly enum: readonly ["half_day", "decimals", "quarters", "round_up"];
                    readonly examples: readonly ["half_day"];
                };
                readonly send_notification: {
                    readonly type: "boolean";
                };
                readonly source_units: {
                    readonly type: "string";
                    readonly description: "This field configures the type of allowance (fixed balance, based on worked time)\n\n`base_units` `overtime_units` `by_worked_time`";
                    readonly enum: readonly ["base_units", "overtime_units", "by_worked_time"];
                    readonly examples: readonly ["base_units"];
                };
                readonly tenure_period_transition: {
                    readonly type: "string";
                    readonly description: "In case the allowance has tenure periods, when is this tenure applied.\n\n`beginning_of_cycle` `end_of_cycle` `after_milestone`";
                    readonly enum: readonly ["beginning_of_cycle", "end_of_cycle", "after_milestone"];
                    readonly examples: readonly ["beginning_of_cycle"];
                };
                readonly tenure_periods: {
                    readonly type: "array";
                    readonly description: "The tenure periods associated with the allowance.";
                    readonly items: {};
                };
                readonly tenure_periods_enabled: {
                    readonly type: "boolean";
                    readonly description: "Whether the allowance has tenure periods enabled or not.";
                };
                readonly timeoff_cycle: {
                    readonly type: "string";
                    readonly description: "Value to indicate how the allowance cycle is configured. Its an abbreviation of the first and last month.";
                    readonly examples: readonly ["jan_dec"];
                };
                readonly timeoff_policy_id: {
                    readonly type: "integer";
                    readonly description: "The Id of the policy to which the allowance belongs to";
                    readonly examples: readonly [1];
                };
                readonly unlimited_accrued_hours: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate if there is unlimited accrual.";
                };
                readonly unlimited_carry_over: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate if there is unlimited carry over.";
                };
                readonly unlimited_carry_over_expiration: {
                    readonly type: "boolean";
                    readonly description: "Boolean to flag if carryover does not expire";
                };
                readonly unlimited_holidays: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate that the allowance has unlimited available days";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesTimeoffBlockedPeriodsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "name", "leave_type_ids", "time_periods", "strategy", "members"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier of the blocked period";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company id of the blocked period";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the blocked period.";
                    readonly examples: readonly ["Onboarding period"];
                };
                readonly leave_type_ids: {
                    readonly type: "array";
                    readonly description: "Leave types for which absence request has been blocked";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                };
                readonly time_periods: {
                    readonly type: "array";
                    readonly description: "The tenure periods associated with the allowance.";
                    readonly items: {};
                };
                readonly strategy: {
                    readonly type: "string";
                    readonly description: "Type of access group";
                    readonly examples: readonly ["everyone"];
                };
                readonly members: {
                    readonly type: "array";
                    readonly description: "Employees whose timeoff will be affected";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                };
                readonly location_ids: {
                    readonly type: "array";
                    readonly description: "Array of locations workplace identifiers where the employees are located";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                };
                readonly team_ids: {
                    readonly type: "array";
                    readonly description: "Array of team identifiers which the selected employees belong to";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesTimeoffLeavesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "employee_id", "start_on", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the Leave";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the employee of the leave";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee identifier of the leave";
                    readonly examples: readonly [1];
                };
                readonly start_on: {
                    readonly type: "string";
                    readonly description: "The start date of the leave";
                    readonly examples: readonly ["2023-09-01"];
                };
                readonly finish_on: {
                    readonly type: "string";
                    readonly description: "The end date of the leave";
                    readonly examples: readonly ["2023-09-10"];
                };
                readonly half_day: {
                    readonly type: "string";
                    readonly description: "Indicates if the leave is taken as a half-day";
                    readonly examples: readonly ["end_of_day"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A description of the leave";
                    readonly examples: readonly ["Annual family vacation"];
                };
                readonly reason: {
                    readonly type: "string";
                    readonly description: "The reason provided by the employee for taking the leave";
                    readonly examples: readonly ["Medical appointment"];
                };
                readonly leave_type_id: {
                    readonly type: "integer";
                    readonly description: "The identifier for the type of leave";
                    readonly examples: readonly [2];
                };
                readonly leave_type_name: {
                    readonly type: "string";
                    readonly description: "The name of the leave type";
                    readonly examples: readonly ["Vacation"];
                };
                readonly approved: {
                    readonly type: "boolean";
                    readonly description: "Indicates whether the leave has been approved";
                    readonly examples: readonly [true];
                };
                readonly employee_full_name: {
                    readonly type: "string";
                    readonly description: "The full name of the employee taking the leave";
                    readonly examples: readonly ["John Doe"];
                };
                readonly start_time: {
                    readonly type: "string";
                    readonly description: "The start time of the leave";
                    readonly examples: readonly ["09:00"];
                };
                readonly hours_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The total number of hours taken for the leave, represented in cents";
                    readonly examples: readonly [80000];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "The updated at date of the leave";
                    readonly examples: readonly ["2023-08-31T15:30:00Z"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "The created at date of the leave";
                    readonly examples: readonly ["2023-08-01T08:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesTimeoffPoliciesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "The policy id.";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Policy name.";
                    readonly examples: readonly ["Policy for remotes"];
                };
                readonly main: {
                    readonly type: "boolean";
                    readonly description: "Is the main policy? It will return true if it's the main policy if not it will return false.";
                    readonly examples: readonly [true];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "The company id.";
                    readonly examples: readonly [1];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The policy description.";
                    readonly examples: readonly ["This policy will apply only for remote employees"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesTrainingsCategoriesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesTrainingsSessionsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "training_id", "subsidized", "session_attendances_status"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly training_id: {
                    readonly type: "integer";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly training_class_id: {
                    readonly type: "integer";
                };
                readonly starts_at: {
                    readonly type: "string";
                };
                readonly ends_at: {
                    readonly type: "string";
                };
                readonly due_date: {
                    readonly type: "string";
                };
                readonly duration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly modality: {
                    readonly type: "string";
                };
                readonly link: {
                    readonly type: "string";
                };
                readonly location: {
                    readonly type: "string";
                };
                readonly session_attendance_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly session_feedback_id: {
                    readonly type: "integer";
                };
                readonly subsidized: {
                    readonly type: "boolean";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly session_attendances_status: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesTrainingsTrainingsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "author_id", "name", "description", "external", "fundae_subsidized", "cost", "subsidized_cost", "cost_decimal", "subsidized_cost_decimal", "year", "catalog", "competency_ids", "total_training_cost", "total_training_subsidized_cost", "total_participants", "training_attendance_status", "access_id", "session_attendance", "competency_id", "modality"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly author_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly code: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                };
                readonly external_provider: {
                    readonly type: "string";
                };
                readonly external: {
                    readonly type: "boolean";
                };
                readonly total_cost: {
                    readonly type: "integer";
                };
                readonly fundae_subsidized: {
                    readonly type: "boolean";
                };
                readonly cost: {
                    readonly type: "integer";
                };
                readonly subsidized_cost: {
                    readonly type: "integer";
                };
                readonly total_cost_decimal: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly cost_decimal: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly subsidized_cost_decimal: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly category_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly year: {
                    readonly type: "integer";
                };
                readonly catalog: {
                    readonly type: "boolean";
                };
                readonly competency_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly total_training_cost: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly total_training_subsidized_cost: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly total_participants: {
                    readonly type: "integer";
                };
                readonly training_attendance_status: {
                    readonly type: "string";
                    readonly enum: readonly ["notassigned", "notstarted", "missing", "started", "partiallycompleted", "completed"];
                    readonly description: "`notassigned` `notstarted` `missing` `started` `partiallycompleted` `completed`";
                };
                readonly valid_for: {
                    readonly type: "integer";
                };
                readonly objectives: {
                    readonly type: "string";
                    readonly description: "Objectives of the course";
                    readonly examples: readonly ["Intermediate-level communication course that focuses on building and enhancing language skills."];
                };
                readonly number_of_expired_participants: {
                    readonly type: "integer";
                    readonly description: "Number of participants that have the course expired or about to expire in the next 3 months. Only applicable to trainings with validity period.";
                    readonly examples: readonly [2];
                };
                readonly access_id: {
                    readonly type: "integer";
                };
                readonly session_attendance: {
                    readonly type: "string";
                };
                readonly competency_id: {
                    readonly type: "integer";
                };
                readonly modality: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteApi20241001ResourcesWorkScheduleOverlapPeriodsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "default", "schedule_id", "start_month", "start_day", "end_month", "end_day", "schedule_type"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly default: {
                    readonly type: "boolean";
                };
                readonly schedule_id: {
                    readonly type: "integer";
                };
                readonly start_month: {
                    readonly type: "integer";
                };
                readonly start_day: {
                    readonly type: "integer";
                };
                readonly end_month: {
                    readonly type: "integer";
                };
                readonly end_day: {
                    readonly type: "integer";
                };
                readonly schedule_type: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesApiPublicCredentials: {
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["company_id", "id", "employee_id"];
                readonly properties: {
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "company id for all kind of accesses";
                        readonly examples: readonly [1];
                    };
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "id of the credential prefixed by the type of credential";
                        readonly examples: readonly ["access-1"];
                    };
                    readonly email: {
                        readonly type: "string";
                        readonly description: "Only for Access Oauth token";
                        readonly examples: readonly ["test@factorial.co"];
                    };
                    readonly login_email: {
                        readonly type: "string";
                        readonly description: "Only for Access Oauth token";
                        readonly examples: readonly ["test@factorial.co"];
                    };
                    readonly full_name: {
                        readonly type: "string";
                    };
                    readonly first_name: {
                        readonly type: "string";
                        readonly description: "Only for Access Oauth token";
                        readonly examples: readonly ["Hellen"];
                    };
                    readonly last_name: {
                        readonly type: "string";
                        readonly description: "Only for Access Oauth token";
                        readonly examples: readonly ["Smith"];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "Id for hte employee related. Only for Access Oauth token";
                        readonly examples: readonly [1];
                    };
                    readonly role: {
                        readonly type: "string";
                        readonly description: "Employee role in the Company. Only for Access Oauth token";
                        readonly examples: readonly ["Smith"];
                    };
                    readonly gdpr_tos: {
                        readonly type: "boolean";
                        readonly description: "Only for Company Oauth or API key";
                        readonly examples: readonly ["General Data Protection Regulation Terms of Service acceptance"];
                    };
                    readonly legal_name: {
                        readonly type: "string";
                        readonly description: "Only for Company Oauth or API key";
                        readonly examples: readonly ["Company legal name"];
                    };
                    readonly locale: {
                        readonly type: "string";
                        readonly description: "Only for Company Oauth or API key";
                        readonly examples: readonly ["Company locale"];
                    };
                    readonly logo: {
                        readonly type: "string";
                        readonly description: "Only for Company Oauth or API key";
                        readonly examples: readonly ["Thumbnail companylogo url"];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Only for Company Oauth or API key";
                        readonly examples: readonly ["Company name"];
                    };
                    readonly onboarded_on: {
                        readonly type: "string";
                        readonly description: "Only for Company Oauth or API key";
                        readonly examples: readonly ["Factorial onboarding date"];
                    };
                    readonly subscription_plan: {
                        readonly type: "string";
                        readonly description: "Only for Company Oauth or API key";
                        readonly examples: readonly ["Company subscription plan"];
                    };
                    readonly tin: {
                        readonly type: "string";
                        readonly description: "Only for Company Oauth or API key";
                        readonly examples: readonly ["Company tax identification number"];
                    };
                    readonly to_be_deleted: {
                        readonly type: "string";
                        readonly description: "Only for Company Oauth or API key";
                        readonly examples: readonly ["Company deletion date"];
                    };
                    readonly tos: {
                        readonly type: "boolean";
                        readonly description: "Only for Company Oauth or API key";
                        readonly examples: readonly ["Terms of Service acceptance"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesApiPublicWebhookSubscriptions: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the webhook subscription";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the webhook subscription";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the webhook subscription";
                    readonly examples: readonly ["ats/job_posting/create"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly enabled: {
                    readonly type: "boolean";
                    readonly description: "List only enabled webhook subscriptions";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["enabled"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "target_url", "type", "enabled", "api_version"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Identifier of the webhook subscription";
                        readonly examples: readonly [1];
                    };
                    readonly target_url: {
                        readonly type: "string";
                        readonly description: "URL where the webhook payload will be sent";
                        readonly examples: readonly ["https://webhook.site/"];
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Type of the webhook subscription";
                        readonly examples: readonly ["ats/job_posting/create"];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "Company identifier of the webhook subscription";
                        readonly examples: readonly [1];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Name of the webhook subscription";
                        readonly examples: readonly ["Webhook subscription of a job posting created"];
                    };
                    readonly challenge: {
                        readonly type: "string";
                        readonly description: "String to verify the subscription";
                        readonly examples: readonly ["2bca4e6d-9aaf-4f11-9e5d"];
                    };
                    readonly enabled: {
                        readonly type: "boolean";
                        readonly description: "Boolean to enable/disable the subscription";
                        readonly examples: readonly [true];
                    };
                    readonly api_version: {
                        readonly type: "string";
                        readonly description: "API version of the webhook subscription that determines the schema of the payload";
                        readonly examples: readonly ["2024-10-01"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesApiPublicWebhookSubscriptionsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "target_url", "type", "enabled", "api_version"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the webhook subscription";
                    readonly examples: readonly [1];
                };
                readonly target_url: {
                    readonly type: "string";
                    readonly description: "URL where the webhook payload will be sent";
                    readonly examples: readonly ["https://webhook.site/"];
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the webhook subscription";
                    readonly examples: readonly ["ats/job_posting/create"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the webhook subscription";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the webhook subscription";
                    readonly examples: readonly ["Webhook subscription of a job posting created"];
                };
                readonly challenge: {
                    readonly type: "string";
                    readonly description: "String to verify the subscription";
                    readonly examples: readonly ["2bca4e6d-9aaf-4f11-9e5d"];
                };
                readonly enabled: {
                    readonly type: "boolean";
                    readonly description: "Boolean to enable/disable the subscription";
                    readonly examples: readonly [true];
                };
                readonly api_version: {
                    readonly type: "string";
                    readonly description: "API version of the webhook subscription that determines the schema of the payload";
                    readonly examples: readonly ["2024-10-01"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsAnswers: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Identifier of the answers";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ats_application_ids[]": {
                    readonly type: "array";
                    readonly description: "Identifier of the apllications";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "ats_application_id", "original_question_label", "original_question_type", "created_at", "updated_at"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Identifier of the answer";
                        readonly examples: readonly [1];
                    };
                    readonly ats_question_id: {
                        readonly type: "integer";
                        readonly description: "Identifier of the question";
                        readonly examples: readonly [1];
                    };
                    readonly ats_application_id: {
                        readonly type: "integer";
                        readonly description: "Identifier of the application";
                        readonly examples: readonly [1];
                    };
                    readonly original_question_label: {
                        readonly type: "string";
                        readonly description: "Question label of the answer";
                        readonly examples: readonly ["How was your application ranked?"];
                    };
                    readonly value: {
                        readonly type: "string";
                        readonly description: "Value of the answer";
                        readonly examples: readonly ["One of the best I have ever seen"];
                    };
                    readonly original_question_type: {
                        readonly type: "string";
                        readonly description: "Original type of the question\n\n`text` `long_text` `single_choice` `multiple_choice` `file`";
                        readonly enum: readonly ["text", "long_text", "single_choice", "multiple_choice", "file"];
                        readonly examples: readonly ["single_choice"];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "Created date of the answer";
                        readonly examples: readonly ["2021-01-01T00:00:00Z"];
                    };
                    readonly updated_at: {
                        readonly type: "string";
                        readonly description: "Last updated date of the answer";
                        readonly examples: readonly ["2021-01-01T00:00:00Z"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsAnswersId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "ats_application_id", "original_question_label", "original_question_type", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the answer";
                    readonly examples: readonly [1];
                };
                readonly ats_question_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the question";
                    readonly examples: readonly [1];
                };
                readonly ats_application_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the application";
                    readonly examples: readonly [1];
                };
                readonly original_question_label: {
                    readonly type: "string";
                    readonly description: "Question label of the answer";
                    readonly examples: readonly ["How was your application ranked?"];
                };
                readonly value: {
                    readonly type: "string";
                    readonly description: "Value of the answer";
                    readonly examples: readonly ["One of the best I have ever seen"];
                };
                readonly original_question_type: {
                    readonly type: "string";
                    readonly description: "Original type of the question\n\n`text` `long_text` `single_choice` `multiple_choice` `file`";
                    readonly enum: readonly ["text", "long_text", "single_choice", "multiple_choice", "file"];
                    readonly examples: readonly ["single_choice"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Created date of the answer";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "Last updated date of the answer";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsApplicationPhases: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Application phases identifiers";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ats_job_posting_ids[]": {
                    readonly type: "array";
                    readonly description: "Job posting of application phases identifiers";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "ats_job_posting_id", "name", "position", "editable", "phase_type"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Identifier of the application Phase";
                        readonly examples: readonly [1];
                    };
                    readonly ats_job_posting_id: {
                        readonly type: "integer";
                        readonly description: "Job posting of the application phase";
                        readonly examples: readonly [1];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Name of the application phase";
                        readonly examples: readonly ["In review"];
                    };
                    readonly position: {
                        readonly type: "integer";
                        readonly description: "Position of the application phase";
                        readonly examples: readonly [1];
                    };
                    readonly editable: {
                        readonly type: "boolean";
                        readonly description: "If the application phase is editable";
                        readonly examples: readonly [true];
                    };
                    readonly phase_type: {
                        readonly type: "string";
                        readonly description: "Application phase type\n\n`initial` `normal` `hired` `screening` `interview` `assessment` `offer`";
                        readonly enum: readonly ["initial", "normal", "hired", "screening", "interview", "assessment", "offer"];
                        readonly examples: readonly ["Screening"];
                    };
                    readonly applications_count: {
                        readonly type: "integer";
                        readonly description: "Active application count";
                        readonly examples: readonly [1];
                    };
                    readonly active_applications_count: {
                        readonly type: "integer";
                    };
                    readonly ats_hiring_stage_id: {
                        readonly type: "integer";
                        readonly description: "Hiring stage identifier";
                        readonly examples: readonly [1];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsApplicationPhasesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "ats_job_posting_id", "name", "position", "editable", "phase_type"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the application Phase";
                    readonly examples: readonly [1];
                };
                readonly ats_job_posting_id: {
                    readonly type: "integer";
                    readonly description: "Job posting of the application phase";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the application phase";
                    readonly examples: readonly ["In review"];
                };
                readonly position: {
                    readonly type: "integer";
                    readonly description: "Position of the application phase";
                    readonly examples: readonly [1];
                };
                readonly editable: {
                    readonly type: "boolean";
                    readonly description: "If the application phase is editable";
                    readonly examples: readonly [true];
                };
                readonly phase_type: {
                    readonly type: "string";
                    readonly description: "Application phase type\n\n`initial` `normal` `hired` `screening` `interview` `assessment` `offer`";
                    readonly enum: readonly ["initial", "normal", "hired", "screening", "interview", "assessment", "offer"];
                    readonly examples: readonly ["Screening"];
                };
                readonly applications_count: {
                    readonly type: "integer";
                    readonly description: "Active application count";
                    readonly examples: readonly [1];
                };
                readonly active_applications_count: {
                    readonly type: "integer";
                };
                readonly ats_hiring_stage_id: {
                    readonly type: "integer";
                    readonly description: "Hiring stage identifier";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsApplications: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Application ids to retrieve";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly ats_job_posting_id: {
                    readonly type: "integer";
                    readonly description: "Application job posting id to retrieve";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly qualified: {
                    readonly type: "boolean";
                    readonly description: "Retrieve applications by their qualified status";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly ats_application_phase_id: {
                    readonly type: "integer";
                    readonly description: "Application phase id";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ats_candidate_ids[]": {
                    readonly type: "array";
                    readonly description: "Application candidates ids";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ats_rejection_reason_ids[]": {
                    readonly type: "array";
                    readonly description: "Application rejection reason ids";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly search: {
                    readonly type: "string";
                    readonly description: "Application search";
                    readonly examples: readonly ["application"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ats_tags_ids[]": {
                    readonly type: "array";
                    readonly description: "Application tag ids";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "company_id", "ats_job_posting_id", "ats_candidate_id", "created_at"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Id of the application";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "Company id of the application";
                        readonly examples: readonly [1];
                    };
                    readonly ats_job_posting_id: {
                        readonly type: "integer";
                        readonly description: "Job posting id of the application";
                        readonly examples: readonly [1];
                    };
                    readonly ats_candidate_id: {
                        readonly type: "integer";
                        readonly description: "Candidate id of the application";
                        readonly examples: readonly [1];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "Employee id of the application";
                        readonly examples: readonly [1];
                    };
                    readonly phone: {
                        readonly type: "string";
                        readonly description: "Candidate phone of the application";
                        readonly examples: readonly ["123321"];
                    };
                    readonly qualified: {
                        readonly type: "boolean";
                        readonly description: "Qualified of the application";
                        readonly examples: readonly [true];
                    };
                    readonly ats_application_phase_id: {
                        readonly type: "integer";
                        readonly description: "Application phase id";
                        readonly examples: readonly [1];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "Application created at date";
                        readonly examples: readonly ["2024-08-19T14:30:00Z"];
                    };
                    readonly cover_letter: {
                        readonly type: "string";
                        readonly description: "Application cover letter";
                        readonly examples: readonly ["cover_letter"];
                    };
                    readonly ats_conversation_id: {
                        readonly type: "integer";
                        readonly description: "Application conversation id";
                        readonly examples: readonly [1];
                    };
                    readonly medium: {
                        readonly type: "string";
                        readonly description: "Application medium";
                        readonly examples: readonly ["medium"];
                    };
                    readonly rating_average: {
                        readonly type: "integer";
                        readonly description: "Application average rating";
                        readonly examples: readonly [1];
                    };
                    readonly ats_rejection_reason_id: {
                        readonly type: "integer";
                        readonly description: "Application rejection reason id";
                        readonly examples: readonly [1];
                    };
                    readonly source_id: {
                        readonly type: "integer";
                        readonly description: "Application source id";
                        readonly examples: readonly [1];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsApplicationsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "ats_job_posting_id", "ats_candidate_id", "created_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Id of the application";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company id of the application";
                    readonly examples: readonly [1];
                };
                readonly ats_job_posting_id: {
                    readonly type: "integer";
                    readonly description: "Job posting id of the application";
                    readonly examples: readonly [1];
                };
                readonly ats_candidate_id: {
                    readonly type: "integer";
                    readonly description: "Candidate id of the application";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee id of the application";
                    readonly examples: readonly [1];
                };
                readonly phone: {
                    readonly type: "string";
                    readonly description: "Candidate phone of the application";
                    readonly examples: readonly ["123321"];
                };
                readonly qualified: {
                    readonly type: "boolean";
                    readonly description: "Qualified of the application";
                    readonly examples: readonly [true];
                };
                readonly ats_application_phase_id: {
                    readonly type: "integer";
                    readonly description: "Application phase id";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Application created at date";
                    readonly examples: readonly ["2024-08-19T14:30:00Z"];
                };
                readonly cover_letter: {
                    readonly type: "string";
                    readonly description: "Application cover letter";
                    readonly examples: readonly ["cover_letter"];
                };
                readonly ats_conversation_id: {
                    readonly type: "integer";
                    readonly description: "Application conversation id";
                    readonly examples: readonly [1];
                };
                readonly medium: {
                    readonly type: "string";
                    readonly description: "Application medium";
                    readonly examples: readonly ["medium"];
                };
                readonly rating_average: {
                    readonly type: "integer";
                    readonly description: "Application average rating";
                    readonly examples: readonly [1];
                };
                readonly ats_rejection_reason_id: {
                    readonly type: "integer";
                    readonly description: "Application rejection reason id";
                    readonly examples: readonly [1];
                };
                readonly source_id: {
                    readonly type: "integer";
                    readonly description: "Application source id";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsCandidateSources: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "a list of source identifiers.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "company_id", "category", "name", "label"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "identifier of the source.";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "identifier of the company.";
                        readonly examples: readonly [1];
                    };
                    readonly category: {
                        readonly type: "string";
                        readonly description: "category of the source.\n\n`job_board` `agency_or_external_recruiter` `event` `social_media` `referral` `internal` `manually_added` `organic`";
                        readonly enum: readonly ["job_board", "agency_or_external_recruiter", "event", "social_media", "referral", "internal", "manually_added", "organic"];
                        readonly examples: readonly ["social_media"];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "name of the source.";
                        readonly examples: readonly ["manually_added"];
                    };
                    readonly label: {
                        readonly type: "string";
                        readonly description: "Translated label of the source if it is a default one, or name otherwise";
                        readonly examples: readonly ["Manually added"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsCandidateSourcesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "category", "name", "label"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the source.";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "identifier of the company.";
                    readonly examples: readonly [1];
                };
                readonly category: {
                    readonly type: "string";
                    readonly description: "category of the source.\n\n`job_board` `agency_or_external_recruiter` `event` `social_media` `referral` `internal` `manually_added` `organic`";
                    readonly enum: readonly ["job_board", "agency_or_external_recruiter", "event", "social_media", "referral", "internal", "manually_added", "organic"];
                    readonly examples: readonly ["social_media"];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "name of the source.";
                    readonly examples: readonly ["manually_added"];
                };
                readonly label: {
                    readonly type: "string";
                    readonly description: "Translated label of the source if it is a default one, or name otherwise";
                    readonly examples: readonly ["Manually added"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsCandidates: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "list of candidate identifiers.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "emails[]": {
                    readonly type: "array";
                    readonly description: "list of candidate emails.";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["ana@factorial.com", "juan@factorial.com"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "team_ids[]": {
                    readonly type: "array";
                    readonly description: "list of team identifiers, refers to teams/teams endpoint.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "location_ids[]": {
                    readonly type: "array";
                    readonly description: "list of location identifiers, refers to locations/locations endpoint.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "source[]": {
                    readonly type: "array";
                    readonly description: "source of the candidate.";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["email"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly remote: {
                    readonly type: "boolean";
                    readonly description: "is the candidate remote?";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "job_posting_ids[]": {
                    readonly type: "array";
                    readonly description: "list of job posting identifiers, refers to ats/job_postings endpoint.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly minimum_average_rating: {
                    readonly type: "number";
                    readonly description: "minimum average rating of the candidate.";
                    readonly examples: readonly [4];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "is the candidate active?";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly talent_pool: {
                    readonly type: "boolean";
                    readonly description: "is the candidate part of talent pool?";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly archived: {
                    readonly type: "boolean";
                    readonly description: "is the candidate archived?";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "first_name", "last_name", "full_name", "talent_pool", "created_at", "updated_at"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "identifier of the candidate.";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "company identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly first_name: {
                        readonly type: "string";
                        readonly description: "name of the candidate.";
                        readonly examples: readonly ["Ana"];
                    };
                    readonly last_name: {
                        readonly type: "string";
                        readonly description: "last name of the candidate.";
                        readonly examples: readonly ["Fernandez Perez"];
                    };
                    readonly full_name: {
                        readonly type: "string";
                        readonly description: "full name of the candidate.";
                        readonly examples: readonly ["Ana Fernandez Perez"];
                    };
                    readonly email: {
                        readonly type: "string";
                        readonly description: "email of the candidate.";
                        readonly examples: readonly ["ana@factorial.com"];
                    };
                    readonly talent_pool: {
                        readonly type: "boolean";
                        readonly description: "is the candidate part of talent pool?";
                        readonly examples: readonly [true];
                    };
                    readonly phone_number: {
                        readonly type: "string";
                        readonly description: "phone number of the candidate.";
                        readonly examples: readonly [645786980];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "creation date of the candidate.";
                        readonly examples: readonly ["2021-01-01T00:00:00Z"];
                    };
                    readonly updated_at: {
                        readonly type: "string";
                        readonly description: "last update of the candidate.";
                        readonly examples: readonly ["2021-01-01T00:00:00Z"];
                    };
                    readonly consent_given_at: {
                        readonly type: "string";
                        readonly description: "date when the consent was given.";
                        readonly examples: readonly ["2021-01-01T00:00:00Z"];
                    };
                    readonly inactive_since: {
                        readonly type: "string";
                        readonly description: "date when the candidate became inactive.";
                        readonly examples: readonly ["2021-01-01T00:00:00Z"];
                    };
                    readonly ats_job_posting_ids: {
                        readonly type: "array";
                        readonly description: "list of job posting identifiers.";
                        readonly items: {
                            readonly type: "integer";
                        };
                        readonly examples: readonly [1, 2, 3];
                    };
                    readonly personal_url: {
                        readonly type: "string";
                        readonly description: "personal web resource from the candidate.";
                        readonly examples: readonly ["https://anaperez.factorial.com"];
                    };
                    readonly consent_expiration_date: {
                        readonly type: "string";
                        readonly description: "date when the consent expires.";
                        readonly examples: readonly ["2021-01-01T00:00:00Z"];
                    };
                    readonly consent_to_talent_pool: {
                        readonly type: "boolean";
                        readonly description: "consent to talent pool.";
                        readonly examples: readonly [true];
                    };
                    readonly medium: {
                        readonly type: "string";
                        readonly description: "specifies additional details related to the source of the candidate, such as the referrer name for example if the source is referred.";
                        readonly examples: readonly ["email"];
                    };
                    readonly source_id: {
                        readonly type: "integer";
                        readonly description: "candidate source identifier, refers to ats/candidate_sources endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly gender: {
                        readonly type: "string";
                        readonly description: "gender of the candidate.\n\n`female` `male` `unanswered` `other`";
                        readonly enum: readonly ["female", "male", "unanswered", "other"];
                        readonly examples: readonly ["female"];
                    };
                    readonly score: {
                        readonly type: "number";
                        readonly description: "score of the candidate.";
                        readonly examples: readonly [7];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsCandidatesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "first_name", "last_name", "full_name", "talent_pool", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the candidate.";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "company identifier.";
                    readonly examples: readonly [1];
                };
                readonly first_name: {
                    readonly type: "string";
                    readonly description: "name of the candidate.";
                    readonly examples: readonly ["Ana"];
                };
                readonly last_name: {
                    readonly type: "string";
                    readonly description: "last name of the candidate.";
                    readonly examples: readonly ["Fernandez Perez"];
                };
                readonly full_name: {
                    readonly type: "string";
                    readonly description: "full name of the candidate.";
                    readonly examples: readonly ["Ana Fernandez Perez"];
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "email of the candidate.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly talent_pool: {
                    readonly type: "boolean";
                    readonly description: "is the candidate part of talent pool?";
                    readonly examples: readonly [true];
                };
                readonly phone_number: {
                    readonly type: "string";
                    readonly description: "phone number of the candidate.";
                    readonly examples: readonly [645786980];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "creation date of the candidate.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "last update of the candidate.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly consent_given_at: {
                    readonly type: "string";
                    readonly description: "date when the consent was given.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly inactive_since: {
                    readonly type: "string";
                    readonly description: "date when the candidate became inactive.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly ats_job_posting_ids: {
                    readonly type: "array";
                    readonly description: "list of job posting identifiers.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                };
                readonly personal_url: {
                    readonly type: "string";
                    readonly description: "personal web resource from the candidate.";
                    readonly examples: readonly ["https://anaperez.factorial.com"];
                };
                readonly consent_expiration_date: {
                    readonly type: "string";
                    readonly description: "date when the consent expires.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly consent_to_talent_pool: {
                    readonly type: "boolean";
                    readonly description: "consent to talent pool.";
                    readonly examples: readonly [true];
                };
                readonly medium: {
                    readonly type: "string";
                    readonly description: "specifies additional details related to the source of the candidate, such as the referrer name for example if the source is referred.";
                    readonly examples: readonly ["email"];
                };
                readonly source_id: {
                    readonly type: "integer";
                    readonly description: "candidate source identifier, refers to ats/candidate_sources endpoint.";
                    readonly examples: readonly [1];
                };
                readonly gender: {
                    readonly type: "string";
                    readonly description: "gender of the candidate.\n\n`female` `male` `unanswered` `other`";
                    readonly enum: readonly ["female", "male", "unanswered", "other"];
                    readonly examples: readonly ["female"];
                };
                readonly score: {
                    readonly type: "number";
                    readonly description: "score of the candidate.";
                    readonly examples: readonly [7];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsEvaluationForms: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "List of IDs of the evaluation forms to be fetched.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ats_job_posting_ids[]": {
                    readonly type: "array";
                    readonly description: "List of IDs of the job postings to filter the evaluation forms by.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly template: {
                    readonly type: "boolean";
                    readonly description: "If true, only the evaluation forms that are templates will be fetched.";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "company_id", "name", "questions", "created_at", "updated_at"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Id of the evaluation form.";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "Id of the company that the evaluation form belongs to.";
                        readonly examples: readonly [1];
                    };
                    readonly ats_job_posting_id: {
                        readonly type: "integer";
                        readonly description: "Id of the job posting that the evaluation form is associated with.";
                        readonly examples: readonly [1];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Name of the evaluation form.";
                        readonly examples: readonly ["Technical Evaluation"];
                    };
                    readonly based_on_id: {
                        readonly type: "integer";
                        readonly description: "Id of the evaluation form that this evaluation form is related.";
                        readonly examples: readonly [1];
                    };
                    readonly questions: {
                        readonly type: "array";
                        readonly description: "List of questions in the evaluation form.";
                        readonly items: {};
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "date and time when the evaluation form was created.";
                        readonly examples: readonly ["2021-01-01T00:00:00Z"];
                    };
                    readonly updated_at: {
                        readonly type: "string";
                        readonly description: "date and time when the evaluation form was last updated.";
                        readonly examples: readonly ["2021-01-01T00:00:00Z"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsEvaluationFormsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "name", "questions", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Id of the evaluation form.";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Id of the company that the evaluation form belongs to.";
                    readonly examples: readonly [1];
                };
                readonly ats_job_posting_id: {
                    readonly type: "integer";
                    readonly description: "Id of the job posting that the evaluation form is associated with.";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the evaluation form.";
                    readonly examples: readonly ["Technical Evaluation"];
                };
                readonly based_on_id: {
                    readonly type: "integer";
                    readonly description: "Id of the evaluation form that this evaluation form is related.";
                    readonly examples: readonly [1];
                };
                readonly questions: {
                    readonly type: "array";
                    readonly description: "List of questions in the evaluation form.";
                    readonly items: {};
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "date and time when the evaluation form was created.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "date and time when the evaluation form was last updated.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsFeedbacks: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "retrieve only the feedbacks that match the IDs passed in the request.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ats_application_ids[]": {
                    readonly type: "array";
                    readonly description: "filter feedbacks based on multiple application IDs.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly ats_candidate_id: {
                    readonly type: "integer";
                    readonly description: "fetch feedbacks related to a specific candidate.";
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "created_at", "ats_candidate_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "the ID of the feedback entry.";
                        readonly examples: readonly [1];
                    };
                    readonly rating: {
                        readonly type: "integer";
                        readonly description: "the overall rating from 1 to 5 for the candidate's application.";
                        readonly examples: readonly [4];
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "the description of the feedback provided.";
                        readonly examples: readonly ["The candidate has a great attitude and is a good fit for the team."];
                    };
                    readonly ats_application_id: {
                        readonly type: "integer";
                        readonly description: "the ID of the application related to the feedback.";
                        readonly examples: readonly [1];
                    };
                    readonly ats_application_phase_id: {
                        readonly type: "integer";
                        readonly description: "the ID of the phase within the application related to the feedback.";
                        readonly examples: readonly [1];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "the date and time when the feedback entry was created.";
                        readonly examples: readonly ["2022-01-01T00:00:00Z"];
                    };
                    readonly ats_candidate_id: {
                        readonly type: "integer";
                        readonly description: "the ID of the candidate to whom the feedback is associated.";
                        readonly examples: readonly [1];
                    };
                    readonly ats_evaluation_forms_id: {
                        readonly type: "integer";
                        readonly description: "the ID of the evaluation form to which the feedback belongs if the evaluation forms feature is active.";
                        readonly examples: readonly [1];
                    };
                    readonly evaluation_form_answers: {
                        readonly type: "array";
                        readonly description: "the answers from the evaluation form, if this feedback is related to an evaluation form.";
                        readonly items: {};
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsFeedbacksId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "created_at", "ats_candidate_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "the ID of the feedback entry.";
                    readonly examples: readonly [1];
                };
                readonly rating: {
                    readonly type: "integer";
                    readonly description: "the overall rating from 1 to 5 for the candidate's application.";
                    readonly examples: readonly [4];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "the description of the feedback provided.";
                    readonly examples: readonly ["The candidate has a great attitude and is a good fit for the team."];
                };
                readonly ats_application_id: {
                    readonly type: "integer";
                    readonly description: "the ID of the application related to the feedback.";
                    readonly examples: readonly [1];
                };
                readonly ats_application_phase_id: {
                    readonly type: "integer";
                    readonly description: "the ID of the phase within the application related to the feedback.";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "the date and time when the feedback entry was created.";
                    readonly examples: readonly ["2022-01-01T00:00:00Z"];
                };
                readonly ats_candidate_id: {
                    readonly type: "integer";
                    readonly description: "the ID of the candidate to whom the feedback is associated.";
                    readonly examples: readonly [1];
                };
                readonly ats_evaluation_forms_id: {
                    readonly type: "integer";
                    readonly description: "the ID of the evaluation form to which the feedback belongs if the evaluation forms feature is active.";
                    readonly examples: readonly [1];
                };
                readonly evaluation_form_answers: {
                    readonly type: "array";
                    readonly description: "the answers from the evaluation form, if this feedback is related to an evaluation form.";
                    readonly items: {};
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsHiringStages: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Identifiers of the hiring stages";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "name", "company_id", "position"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Identifier of the hiring stage";
                        readonly examples: readonly [1];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Name of the hiring stage\n\n`new` `screening` `interview` `assessment` `offer` `hired`";
                        readonly enum: readonly ["new", "screening", "interview", "assessment", "offer", "hired"];
                        readonly examples: readonly ["Hired"];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "Company identifier of the hiring stage";
                        readonly examples: readonly [1];
                    };
                    readonly position: {
                        readonly type: "integer";
                        readonly description: "Position of the hiring stage";
                        readonly examples: readonly [1];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsHiringStagesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id", "position"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the hiring stage";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the hiring stage\n\n`new` `screening` `interview` `assessment` `offer` `hired`";
                    readonly enum: readonly ["new", "screening", "interview", "assessment", "offer", "hired"];
                    readonly examples: readonly ["Hired"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the hiring stage";
                    readonly examples: readonly [1];
                };
                readonly position: {
                    readonly type: "integer";
                    readonly description: "Position of the hiring stage";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsJobPostings: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["draft", "published", "unlisted", "archived", "cancelled"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly team_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly location_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "company_id", "ats_company_id", "title", "remote", "status", "cv_requirement", "cover_letter_requirement", "phone_requirement", "photo_requirement", "salary_period", "created_at"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Unique identifier for the job posting";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                    };
                    readonly ats_company_id: {
                        readonly type: "integer";
                        readonly description: "Identifier of the ATS company associated with the job posting";
                        readonly examples: readonly ["1"];
                    };
                    readonly title: {
                        readonly type: "string";
                        readonly description: "Title of the job posting";
                        readonly examples: readonly ["My job title"];
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "Description of the job posting";
                        readonly examples: readonly ["My job description"];
                    };
                    readonly contract_type: {
                        readonly type: "string";
                    };
                    readonly workplace_type: {
                        readonly type: "string";
                    };
                    readonly remote: {
                        readonly type: "boolean";
                        readonly description: "Indicates if the job posting is remote";
                        readonly examples: readonly ["true"];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "The current status of the job posting (e.g., draft, published, archived)\n\n`draft` `published` `unlisted` `archived` `cancelled`";
                        readonly enum: readonly ["draft", "published", "unlisted", "archived", "cancelled"];
                        readonly examples: readonly ["draft"];
                    };
                    readonly schedule_type: {
                        readonly type: "string";
                        readonly description: "The schedule type of the job posting (e.g., full_time, part_time)";
                        readonly examples: readonly ["full_time"];
                    };
                    readonly team_id: {
                        readonly type: "integer";
                        readonly description: "Identifier of the team associated with the job posting";
                        readonly examples: readonly ["1"];
                    };
                    readonly location_id: {
                        readonly type: "integer";
                        readonly description: "Identifier of the location associated with the job posting";
                        readonly examples: readonly ["1"];
                    };
                    readonly legal_entity_id: {
                        readonly type: "integer";
                        readonly description: "Identifier of the legal entity associated with the job posting";
                        readonly examples: readonly ["1"];
                    };
                    readonly salary_format: {
                        readonly type: "string";
                        readonly description: "The format of the salary (e.g., range, fixed_amount)";
                        readonly examples: readonly ["range"];
                    };
                    readonly salary_from_amount_in_cents: {
                        readonly type: "integer";
                        readonly description: "The minimum salary amount in cents";
                        readonly examples: readonly ["3000000"];
                    };
                    readonly salary_to_amount_in_cents: {
                        readonly type: "integer";
                        readonly description: "The maximum salary amount in cents";
                        readonly examples: readonly ["5000000"];
                    };
                    readonly hide_salary: {
                        readonly type: "boolean";
                        readonly description: "Indicates whether the salary information for the job posting should be hidden from applicants.";
                        readonly examples: readonly ["true"];
                    };
                    readonly cv_requirement: {
                        readonly type: "string";
                        readonly description: "Requirement for the CV (e.g, mandatory, optional, do_not_ask)";
                        readonly examples: readonly ["mandatory"];
                    };
                    readonly cover_letter_requirement: {
                        readonly type: "string";
                        readonly description: "Requirement for the cover letter (e.g, mandatory, optional, do_not_ask)";
                        readonly examples: readonly ["optional"];
                    };
                    readonly phone_requirement: {
                        readonly type: "string";
                        readonly description: "Requirement for the phone number (e.g, mandatory, optional, do_not_ask)";
                        readonly examples: readonly ["do_not_ask"];
                    };
                    readonly photo_requirement: {
                        readonly type: "string";
                        readonly description: "Requirement for the phone number (e.g, mandatory, optional, do_not_ask)";
                        readonly examples: readonly ["do_not_ask"];
                    };
                    readonly preview_token: {
                        readonly type: "string";
                    };
                    readonly url: {
                        readonly type: "string";
                        readonly description: "If published, the public URL of the job posting. Otherwise will be null";
                        readonly examples: readonly ["https://my-factorial-domain/job_posting/job-title-slug"];
                    };
                    readonly salary_period: {
                        readonly type: "string";
                        readonly enum: readonly ["annual", "monthly", "daily"];
                        readonly description: "`annual` `monthly` `daily`";
                    };
                    readonly published_at: {
                        readonly type: "string";
                        readonly description: "Published date in ISO 8601 format of the job. If never been published the value will be null";
                        readonly examples: readonly ["Tue, 02 Jul 2024 08:28:00.000000000 UTC +00:00"];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "Date in ISO 8601 format when the job posting was created";
                        readonly examples: readonly ["Wed, 10 Jul 2024 13:30:02.000000000 UTC +00:00"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsJobPostingsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "ats_company_id", "title", "remote", "status", "cv_requirement", "cover_letter_requirement", "phone_requirement", "photo_requirement", "salary_period", "created_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the job posting";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly ats_company_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the ATS company associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "Title of the job posting";
                    readonly examples: readonly ["My job title"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Description of the job posting";
                    readonly examples: readonly ["My job description"];
                };
                readonly contract_type: {
                    readonly type: "string";
                };
                readonly workplace_type: {
                    readonly type: "string";
                };
                readonly remote: {
                    readonly type: "boolean";
                    readonly description: "Indicates if the job posting is remote";
                    readonly examples: readonly ["true"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The current status of the job posting (e.g., draft, published, archived)\n\n`draft` `published` `unlisted` `archived` `cancelled`";
                    readonly enum: readonly ["draft", "published", "unlisted", "archived", "cancelled"];
                    readonly examples: readonly ["draft"];
                };
                readonly schedule_type: {
                    readonly type: "string";
                    readonly description: "The schedule type of the job posting (e.g., full_time, part_time)";
                    readonly examples: readonly ["full_time"];
                };
                readonly team_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the team associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly location_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the location associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the legal entity associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly salary_format: {
                    readonly type: "string";
                    readonly description: "The format of the salary (e.g., range, fixed_amount)";
                    readonly examples: readonly ["range"];
                };
                readonly salary_from_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The minimum salary amount in cents";
                    readonly examples: readonly ["3000000"];
                };
                readonly salary_to_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The maximum salary amount in cents";
                    readonly examples: readonly ["5000000"];
                };
                readonly hide_salary: {
                    readonly type: "boolean";
                    readonly description: "Indicates whether the salary information for the job posting should be hidden from applicants.";
                    readonly examples: readonly ["true"];
                };
                readonly cv_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the CV (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["mandatory"];
                };
                readonly cover_letter_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the cover letter (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["optional"];
                };
                readonly phone_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the phone number (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["do_not_ask"];
                };
                readonly photo_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the phone number (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["do_not_ask"];
                };
                readonly preview_token: {
                    readonly type: "string";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "If published, the public URL of the job posting. Otherwise will be null";
                    readonly examples: readonly ["https://my-factorial-domain/job_posting/job-title-slug"];
                };
                readonly salary_period: {
                    readonly type: "string";
                    readonly enum: readonly ["annual", "monthly", "daily"];
                    readonly description: "`annual` `monthly` `daily`";
                };
                readonly published_at: {
                    readonly type: "string";
                    readonly description: "Published date in ISO 8601 format of the job. If never been published the value will be null";
                    readonly examples: readonly ["Tue, 02 Jul 2024 08:28:00.000000000 UTC +00:00"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Date in ISO 8601 format when the job posting was created";
                    readonly examples: readonly ["Wed, 10 Jul 2024 13:30:02.000000000 UTC +00:00"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsMessages: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly ats_conversation_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ats_conversation_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly last_per_conversation: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["last_per_conversation"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "content", "ats_conversation_id", "sent_by_id", "sent_by_type", "created_at", "attachments", "topic"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly content: {
                        readonly type: "string";
                    };
                    readonly ats_conversation_id: {
                        readonly type: "integer";
                    };
                    readonly sent_by_id: {
                        readonly type: "integer";
                    };
                    readonly sent_by_type: {
                        readonly type: "string";
                    };
                    readonly created_at: {
                        readonly type: "string";
                    };
                    readonly attachments: {
                        readonly type: "array";
                        readonly items: {};
                    };
                    readonly topic: {
                        readonly type: "string";
                    };
                    readonly delayed_until: {
                        readonly type: "string";
                    };
                    readonly sent_at: {
                        readonly type: "string";
                    };
                    readonly delivered_at: {
                        readonly type: "string";
                    };
                    readonly opened_at: {
                        readonly type: "string";
                    };
                    readonly last_error_at: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsMessagesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "content", "ats_conversation_id", "sent_by_id", "sent_by_type", "created_at", "attachments", "topic"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly content: {
                    readonly type: "string";
                };
                readonly ats_conversation_id: {
                    readonly type: "integer";
                };
                readonly sent_by_id: {
                    readonly type: "integer";
                };
                readonly sent_by_type: {
                    readonly type: "string";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly attachments: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly topic: {
                    readonly type: "string";
                };
                readonly delayed_until: {
                    readonly type: "string";
                };
                readonly sent_at: {
                    readonly type: "string";
                };
                readonly delivered_at: {
                    readonly type: "string";
                };
                readonly opened_at: {
                    readonly type: "string";
                };
                readonly last_error_at: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsRejectionReasons: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Rejection reasons identifiers";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ats_application_ids[]": {
                    readonly type: "array";
                    readonly description: "Rejected application identifiers";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "company_id", "decision_maker", "reason", "created_at", "updated_at"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Rejection reason identifier";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "Company identifier of the rejection reason";
                        readonly examples: readonly [1];
                    };
                    readonly decision_maker: {
                        readonly type: "string";
                        readonly description: "Decision maker of the rejection reason\n\n`company` `candidate`";
                        readonly enum: readonly ["company", "candidate"];
                        readonly examples: readonly ["candidate"];
                    };
                    readonly reason: {
                        readonly type: "string";
                        readonly description: "Reason of the rejection";
                        readonly examples: readonly ["Unfit for the role"];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "Rejection reason created date";
                        readonly examples: readonly ["2024-08-22T14:30:00-07:00"];
                    };
                    readonly updated_at: {
                        readonly type: "string";
                        readonly description: "Rejection reason updated date";
                        readonly examples: readonly ["2024-08-22T14:30:00-07:00"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAtsRejectionReasonsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "decision_maker", "reason", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Rejection reason identifier";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the rejection reason";
                    readonly examples: readonly [1];
                };
                readonly decision_maker: {
                    readonly type: "string";
                    readonly description: "Decision maker of the rejection reason\n\n`company` `candidate`";
                    readonly enum: readonly ["company", "candidate"];
                    readonly examples: readonly ["candidate"];
                };
                readonly reason: {
                    readonly type: "string";
                    readonly description: "Reason of the rejection";
                    readonly examples: readonly ["Unfit for the role"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Rejection reason created date";
                    readonly examples: readonly ["2024-08-22T14:30:00-07:00"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "Rejection reason updated date";
                    readonly examples: readonly ["2024-08-22T14:30:00-07:00"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAttendanceBreakConfigurations: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "The break configuration ids to retrieve";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "time_settings_break_configuration_ids[]": {
                    readonly type: "array";
                    readonly description: "Ids of the time settings break configuration";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly attendance_employees_setting_id: {
                    readonly type: "integer";
                    readonly description: "Id of the attendance employee setting";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly enabled: {
                    readonly type: "boolean";
                    readonly description: "Status of the break configuration if enabled or not";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "attendance_employees_setting_id", "time_settings_break_configuration_id", "enabled"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly attendance_employees_setting_id: {
                        readonly type: "integer";
                        readonly description: "Id of the attendance employee setting";
                    };
                    readonly time_settings_break_configuration_id: {
                        readonly type: "integer";
                        readonly description: "Id of the time settings break configuration";
                    };
                    readonly enabled: {
                        readonly type: "boolean";
                        readonly description: "Status of the break configuration if enabled or not";
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Name of the break configuration";
                    };
                    readonly paid: {
                        readonly type: "boolean";
                        readonly description: "Check the break configuration is paid or not";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAttendanceBreakConfigurationsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "attendance_employees_setting_id", "time_settings_break_configuration_id", "enabled"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly attendance_employees_setting_id: {
                    readonly type: "integer";
                    readonly description: "Id of the attendance employee setting";
                };
                readonly time_settings_break_configuration_id: {
                    readonly type: "integer";
                    readonly description: "Id of the time settings break configuration";
                };
                readonly enabled: {
                    readonly type: "boolean";
                    readonly description: "Status of the break configuration if enabled or not";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the break configuration";
                };
                readonly paid: {
                    readonly type: "boolean";
                    readonly description: "Check the break configuration is paid or not";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAttendanceEstimatedTimes: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly start_on: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly end_on: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["start_on", "end_on", "employee_ids[]"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["date", "company_id", "employee_id", "expected_minutes", "regular_minutes", "overtime_minutes", "breaks", "time_unit", "estimated_half_days", "shifts", "source", "minutes"];
                readonly properties: {
                    readonly date: {
                        readonly type: "string";
                    };
                    readonly company_id: {
                        readonly type: "integer";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly expected_minutes: {
                        readonly type: "number";
                        readonly description: "Amount of minutes the employee has to work without taking into consideration time off leaves and bank holidays.";
                    };
                    readonly regular_minutes: {
                        readonly type: "number";
                        readonly description: "Amount of regular minutes the employee has to work.";
                    };
                    readonly overtime_minutes: {
                        readonly type: "number";
                        readonly description: "Amount of overtime minutes the employee has to work (only available with Shift Management).";
                    };
                    readonly breaks: {
                        readonly type: "array";
                        readonly items: {};
                    };
                    readonly time_unit: {
                        readonly type: "string";
                        readonly enum: readonly ["minute", "half_day", "none"];
                        readonly description: "`minute` `half_day` `none`";
                    };
                    readonly estimated_half_days: {
                        readonly type: "integer";
                    };
                    readonly shifts: {
                        readonly type: "array";
                        readonly items: {};
                    };
                    readonly source: {
                        readonly type: "string";
                        readonly description: "Source of the estimated time. Could be employee's contract, work schedule or shift management.\n\n`shift_management` `work_schedule` `contract_hours` `none`";
                        readonly enum: readonly ["shift_management", "work_schedule", "contract_hours", "none"];
                    };
                    readonly minutes: {
                        readonly type: "number";
                        readonly description: "Amount of minutes the employee has to work.";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAttendanceEstimatedTimesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["date", "company_id", "employee_id", "expected_minutes", "regular_minutes", "overtime_minutes", "breaks", "time_unit", "estimated_half_days", "shifts", "source", "minutes"];
            readonly properties: {
                readonly date: {
                    readonly type: "string";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly expected_minutes: {
                    readonly type: "number";
                    readonly description: "Amount of minutes the employee has to work without taking into consideration time off leaves and bank holidays.";
                };
                readonly regular_minutes: {
                    readonly type: "number";
                    readonly description: "Amount of regular minutes the employee has to work.";
                };
                readonly overtime_minutes: {
                    readonly type: "number";
                    readonly description: "Amount of overtime minutes the employee has to work (only available with Shift Management).";
                };
                readonly breaks: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly time_unit: {
                    readonly type: "string";
                    readonly enum: readonly ["minute", "half_day", "none"];
                    readonly description: "`minute` `half_day` `none`";
                };
                readonly estimated_half_days: {
                    readonly type: "integer";
                };
                readonly shifts: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly source: {
                    readonly type: "string";
                    readonly description: "Source of the estimated time. Could be employee's contract, work schedule or shift management.\n\n`shift_management` `work_schedule` `contract_hours` `none`";
                    readonly enum: readonly ["shift_management", "work_schedule", "contract_hours", "none"];
                };
                readonly minutes: {
                    readonly type: "number";
                    readonly description: "Amount of minutes the employee has to work.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAttendanceOpenShifts: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly description: "Employee ids to filter the open shifts by.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "employee_id", "date", "clock_in", "status", "workable", "automatic_clock_in"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Open Shift identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "Employee identifier from the open shift.";
                        readonly examples: readonly [1];
                    };
                    readonly date: {
                        readonly type: "string";
                        readonly description: "Date of the open shift.";
                        readonly examples: readonly ["2024-06-06"];
                    };
                    readonly clock_in: {
                        readonly type: "string";
                        readonly description: "Clock in time from the shift. Ignore the date part.";
                        readonly examples: readonly ["2000-01-01T02:35:25.000Z"];
                    };
                    readonly clock_out: {
                        readonly type: "string";
                        readonly description: "For open shifts, this field is null.";
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "Status of the shift\n\n`opened` `closed` `created`";
                        readonly enum: readonly ["opened", "closed", "created"];
                        readonly examples: readonly ["opened"];
                    };
                    readonly workable: {
                        readonly type: "boolean";
                        readonly description: "Indicates if the shift is a break or a workable shift.";
                        readonly examples: readonly [true];
                    };
                    readonly automatic_clock_in: {
                        readonly type: "boolean";
                        readonly description: "Indicates if the shift is automatic or not";
                    };
                    readonly location_type: {
                        readonly type: "string";
                        readonly description: "String representing the location type of the shift. Examples work_from_home, office, etc.";
                        readonly examples: readonly ["work_from_home"];
                    };
                    readonly workplace_id: {
                        readonly type: "integer";
                        readonly description: "Identifier for the workplace assinged to the shift.";
                        readonly examples: readonly [1];
                    };
                    readonly time_settings_break_configuration_id: {
                        readonly type: "integer";
                        readonly description: "If the shift is a break, this field will have the break configuration id.";
                        readonly examples: readonly [1];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAttendanceOvertimeRequests: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly start_on: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly end_on: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["pending", "approved", "rejected", "none"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_approval_flow: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["include_approval_flow"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "employee_id", "author_id", "status", "date", "hours_amount_in_cents", "approver", "is_editable"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly approver_id: {
                        readonly type: "integer";
                    };
                    readonly author_id: {
                        readonly type: "integer";
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly enum: readonly ["pending", "approved", "rejected", "none"];
                        readonly description: "`pending` `approved` `rejected` `none`";
                    };
                    readonly description: {
                        readonly type: "string";
                    };
                    readonly reason: {
                        readonly type: "string";
                    };
                    readonly date: {
                        readonly type: "string";
                    };
                    readonly hours_amount_in_cents: {
                        readonly type: "integer";
                    };
                    readonly created_at: {
                        readonly type: "string";
                    };
                    readonly approver: {
                        readonly type: "boolean";
                    };
                    readonly approver_full_name: {
                        readonly type: "string";
                    };
                    readonly is_editable: {
                        readonly type: "boolean";
                        readonly description: "Defines if the overtime request can be edited";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAttendanceOvertimeRequestsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "author_id", "status", "date", "hours_amount_in_cents", "approver", "is_editable"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly approver_id: {
                    readonly type: "integer";
                };
                readonly author_id: {
                    readonly type: "integer";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["pending", "approved", "rejected", "none"];
                    readonly description: "`pending` `approved` `rejected` `none`";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly reason: {
                    readonly type: "string";
                };
                readonly date: {
                    readonly type: "string";
                };
                readonly hours_amount_in_cents: {
                    readonly type: "integer";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly approver: {
                    readonly type: "boolean";
                };
                readonly approver_full_name: {
                    readonly type: "string";
                };
                readonly is_editable: {
                    readonly type: "boolean";
                    readonly description: "Defines if the overtime request can be edited";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAttendanceShifts: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly description: "filter by employee ids.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly start_on: {
                    readonly type: "string";
                    readonly description: "filter by shift that starts after or including this date.";
                    readonly examples: readonly ["2022-01-01"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly end_on: {
                    readonly type: "string";
                    readonly description: "filter by shift that ends before or including this date.";
                    readonly examples: readonly ["2022-01-01"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "filter by ids.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly half_day: {
                    readonly type: "boolean";
                    readonly description: "Flag to filter half day shifts";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly workable: {
                    readonly type: "boolean";
                    readonly description: "Flag to filter shifts in workable days";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly latest_shift: {
                    readonly type: "boolean";
                    readonly description: "Flag to filter only the latest shift for each employee";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly sort_created_at_asc: {
                    readonly type: "boolean";
                    readonly description: "Flag to sort by created_at asc";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly breaks_with_time_configuration: {
                    readonly type: "boolean";
                    readonly description: "Flag to include breaks with time configuration";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly last_working_shift: {
                    readonly type: "boolean";
                    readonly description: "Filter by last working shift";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["half_day", "sort_created_at_asc"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "employee_id", "date", "reference_date", "created_at", "company_id", "minutes"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Unique identifier for the shift";
                        readonly examples: readonly [1];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "Identifier for the employee assigned to the shift";
                        readonly examples: readonly [1];
                    };
                    readonly date: {
                        readonly type: "string";
                        readonly description: "Date of the shift";
                        readonly examples: readonly ["2023-10-01"];
                    };
                    readonly reference_date: {
                        readonly type: "string";
                        readonly description: "Reference date for the shift";
                        readonly examples: readonly ["2023-09-30"];
                    };
                    readonly clock_in: {
                        readonly type: "string";
                        readonly description: "Time when the employee clocked in";
                        readonly examples: readonly ["08:30"];
                    };
                    readonly clock_out: {
                        readonly type: "string";
                        readonly description: "Time when the employee clocked out";
                        readonly examples: readonly ["12:30"];
                    };
                    readonly in_source: {
                        readonly type: "string";
                        readonly description: "Source of the clock-in time";
                        readonly examples: readonly ["automatic"];
                    };
                    readonly out_source: {
                        readonly type: "string";
                        readonly description: "Source of the clock-out time";
                        readonly examples: readonly ["automatic"];
                    };
                    readonly observations: {
                        readonly type: "string";
                        readonly description: "Additional observations about the shift";
                        readonly examples: readonly ["Employee arrived late due to traffic"];
                    };
                    readonly location_type: {
                        readonly type: "string";
                        readonly description: "Type of location for the shift\n\n`office` `business_trip` `work_from_home`";
                        readonly enum: readonly ["office", "business_trip", "work_from_home"];
                        readonly examples: readonly ["office"];
                    };
                    readonly half_day: {
                        readonly type: "string";
                        readonly description: "Indicates which worked part of the day\n\n`beginning_of_day` `end_of_day`";
                        readonly enum: readonly ["beginning_of_day", "end_of_day"];
                        readonly examples: readonly ["beginning_of_day"];
                    };
                    readonly in_location_latitude: {
                        readonly type: "number";
                        readonly description: "Latitude of the clock-in location";
                        readonly examples: readonly [37.7749];
                    };
                    readonly in_location_longitude: {
                        readonly type: "number";
                        readonly description: "Longitude of the clock-in location";
                        readonly examples: readonly [-122.4194];
                    };
                    readonly in_location_accuracy: {
                        readonly type: "number";
                        readonly description: "Accuracy of the clock-in location";
                        readonly examples: readonly [5];
                    };
                    readonly out_location_latitude: {
                        readonly type: "number";
                        readonly description: "Latitude of the clock-out location";
                        readonly examples: readonly [37.7749];
                    };
                    readonly out_location_longitude: {
                        readonly type: "number";
                        readonly description: "Longitude of the clock-out location";
                        readonly examples: readonly [-122.4194];
                    };
                    readonly out_location_accuracy: {
                        readonly type: "number";
                        readonly description: "Accuracy of the clock-out location";
                        readonly examples: readonly [5.7];
                    };
                    readonly workable: {
                        readonly type: "boolean";
                        readonly description: "Indicates if the shift is workable";
                        readonly examples: readonly [true];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "Timestamp when the shift record was created";
                        readonly examples: readonly ["2023-10-01T08:00:00Z"];
                    };
                    readonly workplace_id: {
                        readonly type: "integer";
                        readonly description: "Identifier for the location";
                        readonly examples: readonly [1];
                    };
                    readonly time_settings_break_configuration_id: {
                        readonly type: "integer";
                        readonly description: "Identifier for the break configuration";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "Identifier for the company";
                        readonly examples: readonly [1];
                    };
                    readonly minutes: {
                        readonly type: "integer";
                        readonly description: "Number in minutes of the shift";
                        readonly examples: readonly [152];
                    };
                    readonly clock_in_with_seconds: {
                        readonly type: "string";
                        readonly description: "Clock in time with seconds";
                        readonly examples: readonly ["08:30:15"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAttendanceShiftsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "date", "reference_date", "created_at", "company_id", "minutes"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the shift";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the employee assigned to the shift";
                    readonly examples: readonly [1];
                };
                readonly date: {
                    readonly type: "string";
                    readonly description: "Date of the shift";
                    readonly examples: readonly ["2023-10-01"];
                };
                readonly reference_date: {
                    readonly type: "string";
                    readonly description: "Reference date for the shift";
                    readonly examples: readonly ["2023-09-30"];
                };
                readonly clock_in: {
                    readonly type: "string";
                    readonly description: "Time when the employee clocked in";
                    readonly examples: readonly ["08:30"];
                };
                readonly clock_out: {
                    readonly type: "string";
                    readonly description: "Time when the employee clocked out";
                    readonly examples: readonly ["12:30"];
                };
                readonly in_source: {
                    readonly type: "string";
                    readonly description: "Source of the clock-in time";
                    readonly examples: readonly ["automatic"];
                };
                readonly out_source: {
                    readonly type: "string";
                    readonly description: "Source of the clock-out time";
                    readonly examples: readonly ["automatic"];
                };
                readonly observations: {
                    readonly type: "string";
                    readonly description: "Additional observations about the shift";
                    readonly examples: readonly ["Employee arrived late due to traffic"];
                };
                readonly location_type: {
                    readonly type: "string";
                    readonly description: "Type of location for the shift\n\n`office` `business_trip` `work_from_home`";
                    readonly enum: readonly ["office", "business_trip", "work_from_home"];
                    readonly examples: readonly ["office"];
                };
                readonly half_day: {
                    readonly type: "string";
                    readonly description: "Indicates which worked part of the day\n\n`beginning_of_day` `end_of_day`";
                    readonly enum: readonly ["beginning_of_day", "end_of_day"];
                    readonly examples: readonly ["beginning_of_day"];
                };
                readonly in_location_latitude: {
                    readonly type: "number";
                    readonly description: "Latitude of the clock-in location";
                    readonly examples: readonly [37.7749];
                };
                readonly in_location_longitude: {
                    readonly type: "number";
                    readonly description: "Longitude of the clock-in location";
                    readonly examples: readonly [-122.4194];
                };
                readonly in_location_accuracy: {
                    readonly type: "number";
                    readonly description: "Accuracy of the clock-in location";
                    readonly examples: readonly [5];
                };
                readonly out_location_latitude: {
                    readonly type: "number";
                    readonly description: "Latitude of the clock-out location";
                    readonly examples: readonly [37.7749];
                };
                readonly out_location_longitude: {
                    readonly type: "number";
                    readonly description: "Longitude of the clock-out location";
                    readonly examples: readonly [-122.4194];
                };
                readonly out_location_accuracy: {
                    readonly type: "number";
                    readonly description: "Accuracy of the clock-out location";
                    readonly examples: readonly [5.7];
                };
                readonly workable: {
                    readonly type: "boolean";
                    readonly description: "Indicates if the shift is workable";
                    readonly examples: readonly [true];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Timestamp when the shift record was created";
                    readonly examples: readonly ["2023-10-01T08:00:00Z"];
                };
                readonly workplace_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the location";
                    readonly examples: readonly [1];
                };
                readonly time_settings_break_configuration_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the break configuration";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the company";
                    readonly examples: readonly [1];
                };
                readonly minutes: {
                    readonly type: "integer";
                    readonly description: "Number in minutes of the shift";
                    readonly examples: readonly [152];
                };
                readonly clock_in_with_seconds: {
                    readonly type: "string";
                    readonly description: "Clock in time with seconds";
                    readonly examples: readonly ["08:30:15"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesAttendanceWorkedTimes: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly start_on: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly end_on: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_time_range_category: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_non_attendable_employees: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["start_on", "end_on", "employee_ids[]", "include_time_range_category", "include_non_attendable_employees"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["employee_id", "date", "company_id", "tracked_minutes", "effective_minutes", "pending_minutes", "minutes", "time_unit", "worked_time_blocks", "day_type", "id"];
                readonly properties: {
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly date: {
                        readonly type: "string";
                    };
                    readonly company_id: {
                        readonly type: "integer";
                    };
                    readonly tracked_minutes: {
                        readonly type: "integer";
                    };
                    readonly effective_minutes: {
                        readonly type: "integer";
                    };
                    readonly pending_minutes: {
                        readonly type: "integer";
                    };
                    readonly minutes: {
                        readonly type: "integer";
                    };
                    readonly time_unit: {
                        readonly type: "string";
                        readonly enum: readonly ["minute", "half_day", "none"];
                        readonly description: "`minute` `half_day` `none`";
                    };
                    readonly worked_time_blocks: {
                        readonly type: "array";
                        readonly items: {};
                    };
                    readonly day_type: {
                        readonly type: "string";
                        readonly enum: readonly ["saturday", "sunday", "bank_holiday", "workday"];
                        readonly description: "`saturday` `sunday` `bank_holiday` `workday`";
                    };
                    readonly id: {
                        readonly type: "string";
                        readonly description: "ID to specify the worked times it include the employee_id and the date but you can't fetch the certain worked time by this date";
                        readonly examples: readonly ["1_2024-07-01"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesBookkeepersManagementIncidences: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "A list of incidence identifiers.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "legal_entities_ids[]": {
                    readonly type: "array";
                    readonly description: "A list of legal entities identifiers.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "status[]": {
                    readonly type: "array";
                    readonly description: "A list of statuses.";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["in-preparation", "to-do", "doing", "done", "discarded"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly starts_on: {
                    readonly type: "string";
                    readonly description: "Get the incidence (aka employee update) that start safter this date (included).";
                    readonly examples: readonly ["2020-01-01"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly ends_on: {
                    readonly type: "string";
                    readonly description: "Get the incidence (aka employee update) that ends before this date (included).";
                    readonly examples: readonly ["2020-01-01"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "type[]": {
                    readonly type: "array";
                    readonly description: "A list of types. It can be any of the following address, bank, cost_center, contract, gender, hiring, id, irpf, legal_entity, manual_incidence, name, nationality, parental, phone_number, sick, tax_id, termination, workplace";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["hiring", "workplace"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly sort_by: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly direction: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly search: {
                    readonly type: "string";
                    readonly description: "Filter the result by the name of the employee.";
                    readonly examples: readonly ["Hellen"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly contains_message: {
                    readonly type: "boolean";
                    readonly description: "Boolean that filters incidences that does or does not contains messages.";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly message_from: {
                    readonly type: "string";
                    readonly description: "Filter by message sender.";
                    readonly examples: readonly ["bookkeeper"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "custom_leave_name[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "legal_entity_id", "name", "target_id", "target_type", "status", "company_id", "created_at", "is_reopened"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "identifier of the incidence (aka employee update).";
                        readonly examples: readonly [1];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "identifier of employee related.";
                        readonly examples: readonly [1];
                    };
                    readonly legal_entity_id: {
                        readonly type: "integer";
                        readonly description: "identifier of legal entity related.";
                        readonly examples: readonly [1];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "name of the incidence (aka employee update). It also represent the incidence type. For example a new hire incidence will be";
                        readonly examples: readonly ["hiring"];
                    };
                    readonly custom_name: {
                        readonly type: "string";
                    };
                    readonly target_id: {
                        readonly type: "integer";
                        readonly description: "The incidence (aka employee update) is also related to a another resource, for example for a leave target, the target identifier will be the leave id.";
                        readonly examples: readonly [1];
                    };
                    readonly target_type: {
                        readonly type: "string";
                        readonly description: "The incidence (aka employee update) is also related to a another resource, for example a leave. This is the target type. The other types are Employee, Contracts::ContractVersion, BookkeepersManagement::ManualIncidence, Finance::CostCenterMembership.";
                        readonly examples: readonly ["Timeoff::Leave"];
                    };
                    readonly starts_on: {
                        readonly type: "string";
                        readonly description: "The date the incidence (aka employee update) starts.";
                        readonly examples: readonly ["2020-01-01"];
                    };
                    readonly ends_on: {
                        readonly type: "string";
                        readonly description: "The date the incidence (aka employee update) end.";
                        readonly examples: readonly ["2020-01-01"];
                    };
                    readonly read_at: {
                        readonly type: "string";
                        readonly description: "The date the incidence (aka employee update) was read.";
                        readonly examples: readonly ["2020-01-01"];
                    };
                    readonly status: {
                        readonly type: "string";
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "identifier of company related.";
                        readonly examples: readonly [1];
                    };
                    readonly message_from: {
                        readonly type: "string";
                        readonly description: "Indicate the message sender on the incidence (aka employee update). It can be any of 'bookkeeper', 'admin'";
                        readonly examples: readonly ["admin"];
                    };
                    readonly has_message: {
                        readonly type: "boolean";
                        readonly description: "Boolean that indicates if the incidence (aka employee update) has unread messages.";
                        readonly examples: readonly [true];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "Date in which incidence (aka employee update) was created.";
                        readonly examples: readonly [true];
                    };
                    readonly is_reopened: {
                        readonly type: "boolean";
                        readonly description: "Boolean that indicates if the incidence (aka employee update) has been reopened.";
                        readonly examples: readonly [true];
                    };
                    readonly legal_entity_name: {
                        readonly type: "string";
                    };
                    readonly employee_first_name: {
                        readonly type: "string";
                    };
                    readonly employee_last_name: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesBookkeepersManagementIncidencesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "legal_entity_id", "name", "target_id", "target_type", "status", "company_id", "created_at", "is_reopened"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the incidence (aka employee update).";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "identifier of employee related.";
                    readonly examples: readonly [1];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "identifier of legal entity related.";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "name of the incidence (aka employee update). It also represent the incidence type. For example a new hire incidence will be";
                    readonly examples: readonly ["hiring"];
                };
                readonly custom_name: {
                    readonly type: "string";
                };
                readonly target_id: {
                    readonly type: "integer";
                    readonly description: "The incidence (aka employee update) is also related to a another resource, for example for a leave target, the target identifier will be the leave id.";
                    readonly examples: readonly [1];
                };
                readonly target_type: {
                    readonly type: "string";
                    readonly description: "The incidence (aka employee update) is also related to a another resource, for example a leave. This is the target type. The other types are Employee, Contracts::ContractVersion, BookkeepersManagement::ManualIncidence, Finance::CostCenterMembership.";
                    readonly examples: readonly ["Timeoff::Leave"];
                };
                readonly starts_on: {
                    readonly type: "string";
                    readonly description: "The date the incidence (aka employee update) starts.";
                    readonly examples: readonly ["2020-01-01"];
                };
                readonly ends_on: {
                    readonly type: "string";
                    readonly description: "The date the incidence (aka employee update) end.";
                    readonly examples: readonly ["2020-01-01"];
                };
                readonly read_at: {
                    readonly type: "string";
                    readonly description: "The date the incidence (aka employee update) was read.";
                    readonly examples: readonly ["2020-01-01"];
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "identifier of company related.";
                    readonly examples: readonly [1];
                };
                readonly message_from: {
                    readonly type: "string";
                    readonly description: "Indicate the message sender on the incidence (aka employee update). It can be any of 'bookkeeper', 'admin'";
                    readonly examples: readonly ["admin"];
                };
                readonly has_message: {
                    readonly type: "boolean";
                    readonly description: "Boolean that indicates if the incidence (aka employee update) has unread messages.";
                    readonly examples: readonly [true];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Date in which incidence (aka employee update) was created.";
                    readonly examples: readonly [true];
                };
                readonly is_reopened: {
                    readonly type: "boolean";
                    readonly description: "Boolean that indicates if the incidence (aka employee update) has been reopened.";
                    readonly examples: readonly [true];
                };
                readonly legal_entity_name: {
                    readonly type: "string";
                };
                readonly employee_first_name: {
                    readonly type: "string";
                };
                readonly employee_last_name: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesCompaniesLegalEntities: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employees_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "companies_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "country_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "company_id", "country", "legal_name", "currency"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly company_id: {
                        readonly type: "integer";
                    };
                    readonly country: {
                        readonly type: "string";
                    };
                    readonly legal_name: {
                        readonly type: "string";
                    };
                    readonly currency: {
                        readonly type: "string";
                    };
                    readonly tin: {
                        readonly type: "string";
                    };
                    readonly city: {
                        readonly type: "string";
                    };
                    readonly state: {
                        readonly type: "string";
                    };
                    readonly postal_code: {
                        readonly type: "string";
                    };
                    readonly address_line_1: {
                        readonly type: "string";
                    };
                    readonly address_line_2: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesCompaniesLegalEntitiesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "country", "legal_name", "currency"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly country: {
                    readonly type: "string";
                };
                readonly legal_name: {
                    readonly type: "string";
                };
                readonly currency: {
                    readonly type: "string";
                };
                readonly tin: {
                    readonly type: "string";
                };
                readonly city: {
                    readonly type: "string";
                };
                readonly state: {
                    readonly type: "string";
                };
                readonly postal_code: {
                    readonly type: "string";
                };
                readonly address_line_1: {
                    readonly type: "string";
                };
                readonly address_line_2: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesContractsCompensations: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "contract_version_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "contract_version_id", "contracts_taxonomy_id", "unit"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Compensation ID";
                        readonly examples: readonly [1];
                    };
                    readonly contract_version_id: {
                        readonly type: "integer";
                        readonly description: "Contract version ID";
                        readonly examples: readonly [1];
                    };
                    readonly contracts_taxonomy_id: {
                        readonly type: "integer";
                        readonly description: "Contracts taxonomy ID";
                        readonly examples: readonly [1];
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "Compensation description";
                        readonly examples: readonly ["Compensation for Meal"];
                    };
                    readonly compensation_type: {
                        readonly type: "string";
                        readonly description: "Required field. You can only use the following options: fixed, undefined, up_to, per_worked_day, per_worked_hour";
                        readonly examples: readonly ["fixed"];
                    };
                    readonly amount: {
                        readonly type: "integer";
                        readonly description: "Required field unless your compensation type is undefined";
                        readonly examples: readonly [1000];
                    };
                    readonly unit: {
                        readonly type: "string";
                        readonly description: "Unit of the compensation";
                        readonly examples: readonly ["Money"];
                    };
                    readonly sync_with_supplements: {
                        readonly type: "boolean";
                        readonly description: "Sync with supplements";
                    };
                    readonly payroll_policy_id: {
                        readonly type: "integer";
                        readonly description: "Payroll policy ID";
                        readonly examples: readonly [1];
                    };
                    readonly recurrence_count: {
                        readonly type: "integer";
                        readonly description: "Recurrence count";
                        readonly examples: readonly [1];
                    };
                    readonly starts_on: {
                        readonly type: "string";
                        readonly description: "When the compensation starts_on";
                        readonly examples: readonly ["2022-01-01"];
                    };
                    readonly recurrence: {
                        readonly type: "string";
                        readonly description: "Compensation recurrence";
                        readonly examples: readonly ["monthly"];
                    };
                    readonly first_payment_on: {
                        readonly type: "string";
                        readonly description: "When the first payment is done";
                        readonly examples: readonly ["2022-01-01"];
                    };
                    readonly calculation: {
                        readonly type: "string";
                        readonly description: "Compensation calculation";
                        readonly examples: readonly ["current period"];
                    };
                    readonly currency: {
                        readonly type: "string";
                    };
                    readonly time_condition: {
                        readonly type: "string";
                        readonly enum: readonly ["full_day", "half_day", "custom"];
                        readonly description: "`full_day` `half_day` `custom`";
                    };
                    readonly minimum_amount_of_hours: {
                        readonly type: "integer";
                    };
                    readonly minimum_amount_of_hours_in_cents: {
                        readonly type: "integer";
                        readonly description: "Compensation expected minimum amount of hours in cents";
                        readonly examples: readonly [1000];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesContractsCompensationsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "contract_version_id", "contracts_taxonomy_id", "unit"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Compensation ID";
                    readonly examples: readonly [1];
                };
                readonly contract_version_id: {
                    readonly type: "integer";
                    readonly description: "Contract version ID";
                    readonly examples: readonly [1];
                };
                readonly contracts_taxonomy_id: {
                    readonly type: "integer";
                    readonly description: "Contracts taxonomy ID";
                    readonly examples: readonly [1];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Compensation description";
                    readonly examples: readonly ["Compensation for Meal"];
                };
                readonly compensation_type: {
                    readonly type: "string";
                    readonly description: "Required field. You can only use the following options: fixed, undefined, up_to, per_worked_day, per_worked_hour";
                    readonly examples: readonly ["fixed"];
                };
                readonly amount: {
                    readonly type: "integer";
                    readonly description: "Required field unless your compensation type is undefined";
                    readonly examples: readonly [1000];
                };
                readonly unit: {
                    readonly type: "string";
                    readonly description: "Unit of the compensation";
                    readonly examples: readonly ["Money"];
                };
                readonly sync_with_supplements: {
                    readonly type: "boolean";
                    readonly description: "Sync with supplements";
                };
                readonly payroll_policy_id: {
                    readonly type: "integer";
                    readonly description: "Payroll policy ID";
                    readonly examples: readonly [1];
                };
                readonly recurrence_count: {
                    readonly type: "integer";
                    readonly description: "Recurrence count";
                    readonly examples: readonly [1];
                };
                readonly starts_on: {
                    readonly type: "string";
                    readonly description: "When the compensation starts_on";
                    readonly examples: readonly ["2022-01-01"];
                };
                readonly recurrence: {
                    readonly type: "string";
                    readonly description: "Compensation recurrence";
                    readonly examples: readonly ["monthly"];
                };
                readonly first_payment_on: {
                    readonly type: "string";
                    readonly description: "When the first payment is done";
                    readonly examples: readonly ["2022-01-01"];
                };
                readonly calculation: {
                    readonly type: "string";
                    readonly description: "Compensation calculation";
                    readonly examples: readonly ["current period"];
                };
                readonly currency: {
                    readonly type: "string";
                };
                readonly time_condition: {
                    readonly type: "string";
                    readonly enum: readonly ["full_day", "half_day", "custom"];
                    readonly description: "`full_day` `half_day` `custom`";
                };
                readonly minimum_amount_of_hours: {
                    readonly type: "integer";
                };
                readonly minimum_amount_of_hours_in_cents: {
                    readonly type: "integer";
                    readonly description: "Compensation expected minimum amount of hours in cents";
                    readonly examples: readonly [1000];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesContractsContractVersions: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "list of contract version identifiers.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly description: "list of employee identifiers, refers to /employees/employees endpoint.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly date: {
                    readonly type: "string";
                    readonly description: "filters contracts by effective_on field.";
                    readonly examples: readonly ["2024-10-06"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["company_id", "employee_id", "effective_on", "has_payroll", "created_at", "updated_at", "fr_forfait_jours"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "identifier for the contract version.";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "identifier for company.";
                        readonly examples: readonly [1];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "employee identifier, refers to /employees/employees endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly effective_on: {
                        readonly type: "string";
                        readonly description: "the day the specific contract starts, in case of hiring the same than starts_on.";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                        readonly examples: readonly ["ES"];
                    };
                    readonly job_title: {
                        readonly type: "string";
                        readonly description: "job title of the employee.";
                        readonly examples: readonly ["Designer"];
                    };
                    readonly job_catalog_level: {
                        readonly type: "string";
                        readonly description: "the level of the employee in the job catalog.";
                        readonly examples: readonly ["Senior Designer"];
                    };
                    readonly job_catalog_role: {
                        readonly type: "string";
                        readonly description: "the role of the employee in the job catalog.";
                        readonly examples: readonly ["Designer"];
                    };
                    readonly starts_on: {
                        readonly type: "string";
                        readonly description: "the day the employee is hired.";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly ends_on: {
                        readonly type: "string";
                        readonly description: "the day the employee is terminated.";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly has_payroll: {
                        readonly type: "boolean";
                        readonly description: "boolean that indicates if the employee asociated to this contract belongs to a payroll policy.";
                        readonly examples: readonly [true];
                    };
                    readonly has_trial_period: {
                        readonly type: "boolean";
                        readonly description: "a flag that indicates if the employee has a trial period.";
                        readonly examples: readonly [true];
                    };
                    readonly trial_period_ends_on: {
                        readonly type: "string";
                        readonly description: "when the trial period ends.";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly salary_amount: {
                        readonly type: "integer";
                        readonly description: "the amount of money the employee earns.";
                        readonly examples: readonly [1000];
                    };
                    readonly salary_frequency: {
                        readonly type: "string";
                        readonly description: "the frequency of the salary payment.";
                        readonly examples: readonly ["yearly"];
                    };
                    readonly working_week_days: {
                        readonly type: "string";
                        readonly description: "the days of the week the employee works.";
                        readonly examples: readonly ["monday,tuesday,wednesday,thursday,friday"];
                    };
                    readonly working_hours: {
                        readonly type: "integer";
                        readonly description: "the amount of hours the employee works.";
                        readonly examples: readonly [40];
                    };
                    readonly working_hours_frequency: {
                        readonly type: "string";
                        readonly description: "the frequency of the working hours.";
                        readonly examples: readonly ["week"];
                    };
                    readonly max_legal_yearly_hours: {
                        readonly type: "integer";
                        readonly description: "the maximum amount of hours the employee can work in a year.";
                        readonly examples: readonly [2000];
                    };
                    readonly maximum_weekly_hours: {
                        readonly type: "integer";
                        readonly description: "the maximum amount of hours the employee can work in a week.";
                        readonly examples: readonly [40];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "the date the contract version was created.";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly updated_at: {
                        readonly type: "string";
                        readonly description: "the date of the last contract version updated.";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly es_has_teleworking_contract: {
                        readonly type: "boolean";
                        readonly description: "flag that indicates if the contract has teleworking.";
                        readonly examples: readonly [true];
                    };
                    readonly es_cotization_group: {
                        readonly type: "integer";
                        readonly description: "the group of cotization of the employee.";
                        readonly examples: readonly [1];
                    };
                    readonly es_contract_observations: {
                        readonly type: "string";
                        readonly description: "observations of the contract.";
                        readonly examples: readonly ["review contract for job promotion"];
                    };
                    readonly es_job_description: {
                        readonly type: "string";
                        readonly description: "the job description of the employee.";
                        readonly examples: readonly ["Designer"];
                    };
                    readonly es_contract_type_id: {
                        readonly type: "integer";
                        readonly description: "contract type identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly es_working_day_type_id: {
                        readonly type: "integer";
                        readonly description: "working day type identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly es_education_level_id: {
                        readonly type: "integer";
                        readonly description: "education level identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly es_professional_category_id: {
                        readonly type: "integer";
                        readonly description: "professional category identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly fr_employee_type: {
                        readonly type: "string";
                        readonly description: "employee type.";
                        readonly examples: readonly ["apprenti"];
                    };
                    readonly fr_forfait_jours: {
                        readonly type: "boolean";
                        readonly description: "flag that indicates if the employee is allowed to work within the framework of a fixed number of days.";
                        readonly examples: readonly [true];
                    };
                    readonly fr_jours_par_an: {
                        readonly type: "integer";
                        readonly description: "the number of days the employee is allowed to work.";
                        readonly examples: readonly [200];
                    };
                    readonly fr_coefficient: {
                        readonly type: "string";
                    };
                    readonly fr_contract_type_id: {
                        readonly type: "integer";
                        readonly description: "contract type identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly fr_level_id: {
                        readonly type: "integer";
                        readonly description: "level identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly fr_step_id: {
                        readonly type: "integer";
                        readonly description: "step identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly fr_mutual_id: {
                        readonly type: "integer";
                        readonly description: "mutual identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly fr_professional_category_id: {
                        readonly type: "integer";
                        readonly description: "professional category identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly fr_work_type_id: {
                        readonly type: "integer";
                        readonly description: "work type identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly de_contract_type_id: {
                        readonly type: "integer";
                        readonly description: "contract type identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly pt_contract_type_id: {
                        readonly type: "integer";
                        readonly description: "contract type identifier.";
                        readonly examples: readonly [1];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesContractsContractVersionsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["company_id", "employee_id", "effective_on", "has_payroll", "created_at", "updated_at", "fr_forfait_jours"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier for the contract version.";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "identifier for company.";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "employee identifier, refers to /employees/employees endpoint.";
                    readonly examples: readonly [1];
                };
                readonly effective_on: {
                    readonly type: "string";
                    readonly description: "the day the specific contract starts, in case of hiring the same than starts_on.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly job_title: {
                    readonly type: "string";
                    readonly description: "job title of the employee.";
                    readonly examples: readonly ["Designer"];
                };
                readonly job_catalog_level: {
                    readonly type: "string";
                    readonly description: "the level of the employee in the job catalog.";
                    readonly examples: readonly ["Senior Designer"];
                };
                readonly job_catalog_role: {
                    readonly type: "string";
                    readonly description: "the role of the employee in the job catalog.";
                    readonly examples: readonly ["Designer"];
                };
                readonly starts_on: {
                    readonly type: "string";
                    readonly description: "the day the employee is hired.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly ends_on: {
                    readonly type: "string";
                    readonly description: "the day the employee is terminated.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly has_payroll: {
                    readonly type: "boolean";
                    readonly description: "boolean that indicates if the employee asociated to this contract belongs to a payroll policy.";
                    readonly examples: readonly [true];
                };
                readonly has_trial_period: {
                    readonly type: "boolean";
                    readonly description: "a flag that indicates if the employee has a trial period.";
                    readonly examples: readonly [true];
                };
                readonly trial_period_ends_on: {
                    readonly type: "string";
                    readonly description: "when the trial period ends.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly salary_amount: {
                    readonly type: "integer";
                    readonly description: "the amount of money the employee earns.";
                    readonly examples: readonly [1000];
                };
                readonly salary_frequency: {
                    readonly type: "string";
                    readonly description: "the frequency of the salary payment.";
                    readonly examples: readonly ["yearly"];
                };
                readonly working_week_days: {
                    readonly type: "string";
                    readonly description: "the days of the week the employee works.";
                    readonly examples: readonly ["monday,tuesday,wednesday,thursday,friday"];
                };
                readonly working_hours: {
                    readonly type: "integer";
                    readonly description: "the amount of hours the employee works.";
                    readonly examples: readonly [40];
                };
                readonly working_hours_frequency: {
                    readonly type: "string";
                    readonly description: "the frequency of the working hours.";
                    readonly examples: readonly ["week"];
                };
                readonly max_legal_yearly_hours: {
                    readonly type: "integer";
                    readonly description: "the maximum amount of hours the employee can work in a year.";
                    readonly examples: readonly [2000];
                };
                readonly maximum_weekly_hours: {
                    readonly type: "integer";
                    readonly description: "the maximum amount of hours the employee can work in a week.";
                    readonly examples: readonly [40];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "the date the contract version was created.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "the date of the last contract version updated.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly es_has_teleworking_contract: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the contract has teleworking.";
                    readonly examples: readonly [true];
                };
                readonly es_cotization_group: {
                    readonly type: "integer";
                    readonly description: "the group of cotization of the employee.";
                    readonly examples: readonly [1];
                };
                readonly es_contract_observations: {
                    readonly type: "string";
                    readonly description: "observations of the contract.";
                    readonly examples: readonly ["review contract for job promotion"];
                };
                readonly es_job_description: {
                    readonly type: "string";
                    readonly description: "the job description of the employee.";
                    readonly examples: readonly ["Designer"];
                };
                readonly es_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "contract type identifier.";
                    readonly examples: readonly [1];
                };
                readonly es_working_day_type_id: {
                    readonly type: "integer";
                    readonly description: "working day type identifier.";
                    readonly examples: readonly [1];
                };
                readonly es_education_level_id: {
                    readonly type: "integer";
                    readonly description: "education level identifier.";
                    readonly examples: readonly [1];
                };
                readonly es_professional_category_id: {
                    readonly type: "integer";
                    readonly description: "professional category identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_employee_type: {
                    readonly type: "string";
                    readonly description: "employee type.";
                    readonly examples: readonly ["apprenti"];
                };
                readonly fr_forfait_jours: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the employee is allowed to work within the framework of a fixed number of days.";
                    readonly examples: readonly [true];
                };
                readonly fr_jours_par_an: {
                    readonly type: "integer";
                    readonly description: "the number of days the employee is allowed to work.";
                    readonly examples: readonly [200];
                };
                readonly fr_coefficient: {
                    readonly type: "string";
                };
                readonly fr_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "contract type identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_level_id: {
                    readonly type: "integer";
                    readonly description: "level identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_step_id: {
                    readonly type: "integer";
                    readonly description: "step identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_mutual_id: {
                    readonly type: "integer";
                    readonly description: "mutual identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_professional_category_id: {
                    readonly type: "integer";
                    readonly description: "professional category identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_work_type_id: {
                    readonly type: "integer";
                    readonly description: "work type identifier.";
                    readonly examples: readonly [1];
                };
                readonly de_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "contract type identifier.";
                    readonly examples: readonly [1];
                };
                readonly pt_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "contract type identifier.";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesContractsReferenceContracts: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly description: "filter by employee ids.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["company_id", "employee_id", "effective_on", "has_payroll", "created_at", "updated_at", "fr_forfait_jours"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "identifier for the contract version.";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "identifier for company.";
                        readonly examples: readonly [1];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "employee identifier, refers to /employees/employees endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly effective_on: {
                        readonly type: "string";
                        readonly description: "the day the specific contract starts, in case of hiring the same than starts_on.";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                        readonly examples: readonly ["ES"];
                    };
                    readonly job_title: {
                        readonly type: "string";
                        readonly description: "job title of the employee.";
                        readonly examples: readonly ["Designer"];
                    };
                    readonly job_catalog_level: {
                        readonly type: "string";
                        readonly description: "the level of the employee in the job catalog.";
                        readonly examples: readonly ["Senior Designer"];
                    };
                    readonly job_catalog_role: {
                        readonly type: "string";
                        readonly description: "the role of the employee in the job catalog.";
                        readonly examples: readonly ["Designer"];
                    };
                    readonly starts_on: {
                        readonly type: "string";
                        readonly description: "the day the employee is hired.";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly ends_on: {
                        readonly type: "string";
                        readonly description: "the day the employee is terminated.";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly has_payroll: {
                        readonly type: "boolean";
                        readonly description: "boolean that indicates if the employee asociated to this contract belongs to a payroll policy.";
                        readonly examples: readonly [true];
                    };
                    readonly has_trial_period: {
                        readonly type: "boolean";
                        readonly description: "a flag that indicates if the employee has a trial period.";
                        readonly examples: readonly [true];
                    };
                    readonly trial_period_ends_on: {
                        readonly type: "string";
                        readonly description: "when the trial period ends.";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly salary_amount: {
                        readonly type: "integer";
                        readonly description: "the amount of money the employee earns.";
                        readonly examples: readonly [1000];
                    };
                    readonly salary_frequency: {
                        readonly type: "string";
                        readonly description: "the frequency of the salary payment.";
                        readonly examples: readonly ["yearly"];
                    };
                    readonly working_week_days: {
                        readonly type: "string";
                        readonly description: "the days of the week the employee works.";
                        readonly examples: readonly ["monday,tuesday,wednesday,thursday,friday"];
                    };
                    readonly working_hours: {
                        readonly type: "integer";
                        readonly description: "the amount of hours the employee works.";
                        readonly examples: readonly [40];
                    };
                    readonly working_hours_frequency: {
                        readonly type: "string";
                        readonly description: "the frequency of the working hours.";
                        readonly examples: readonly ["week"];
                    };
                    readonly max_legal_yearly_hours: {
                        readonly type: "integer";
                        readonly description: "the maximum amount of hours the employee can work in a year.";
                        readonly examples: readonly [2000];
                    };
                    readonly maximum_weekly_hours: {
                        readonly type: "integer";
                        readonly description: "the maximum amount of hours the employee can work in a week.";
                        readonly examples: readonly [40];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "the date the contract version was created.";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly updated_at: {
                        readonly type: "string";
                        readonly description: "the date of the last contract version updated.";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly es_has_teleworking_contract: {
                        readonly type: "boolean";
                        readonly description: "flag that indicates if the contract has teleworking.";
                        readonly examples: readonly [true];
                    };
                    readonly es_cotization_group: {
                        readonly type: "integer";
                        readonly description: "the group of cotization of the employee.";
                        readonly examples: readonly [1];
                    };
                    readonly es_contract_observations: {
                        readonly type: "string";
                        readonly description: "observations of the contract.";
                        readonly examples: readonly ["review contract for job promotion"];
                    };
                    readonly es_job_description: {
                        readonly type: "string";
                        readonly description: "the job description of the employee.";
                        readonly examples: readonly ["Designer"];
                    };
                    readonly es_contract_type_id: {
                        readonly type: "integer";
                        readonly description: "contract type identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly es_working_day_type_id: {
                        readonly type: "integer";
                        readonly description: "working day type identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly es_education_level_id: {
                        readonly type: "integer";
                        readonly description: "education level identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly es_professional_category_id: {
                        readonly type: "integer";
                        readonly description: "professional category identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly fr_employee_type: {
                        readonly type: "string";
                        readonly description: "employee type.";
                        readonly examples: readonly ["apprenti"];
                    };
                    readonly fr_forfait_jours: {
                        readonly type: "boolean";
                        readonly description: "flag that indicates if the employee is allowed to work within the framework of a fixed number of days.";
                        readonly examples: readonly [true];
                    };
                    readonly fr_jours_par_an: {
                        readonly type: "integer";
                        readonly description: "the number of days the employee is allowed to work.";
                        readonly examples: readonly [200];
                    };
                    readonly fr_coefficient: {
                        readonly type: "string";
                    };
                    readonly fr_contract_type_id: {
                        readonly type: "integer";
                        readonly description: "contract type identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly fr_level_id: {
                        readonly type: "integer";
                        readonly description: "level identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly fr_step_id: {
                        readonly type: "integer";
                        readonly description: "step identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly fr_mutual_id: {
                        readonly type: "integer";
                        readonly description: "mutual identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly fr_professional_category_id: {
                        readonly type: "integer";
                        readonly description: "professional category identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly fr_work_type_id: {
                        readonly type: "integer";
                        readonly description: "work type identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly de_contract_type_id: {
                        readonly type: "integer";
                        readonly description: "contract type identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly pt_contract_type_id: {
                        readonly type: "integer";
                        readonly description: "contract type identifier.";
                        readonly examples: readonly [1];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesContractsTaxonomies: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "legal_entity_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "name", "archived", "default", "legal_entity_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly archived: {
                        readonly type: "boolean";
                    };
                    readonly default: {
                        readonly type: "boolean";
                    };
                    readonly legal_entity_id: {
                        readonly type: "integer";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesContractsTaxonomiesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "archived", "default", "legal_entity_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly archived: {
                    readonly type: "boolean";
                };
                readonly default: {
                    readonly type: "boolean";
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesCustomFieldsFields: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Field identifiers";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly field_type: {
                    readonly type: "string";
                    readonly enum: readonly ["text", "long_text", "date", "rating", "checkbox", "single_choice", "multiple_choice", "money", "cents"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly label: {
                    readonly type: "string";
                    readonly description: "Field label";
                    readonly examples: readonly ["T-Shirt Size"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly slug: {
                    readonly type: "string";
                    readonly description: "Custom field slug";
                    readonly examples: readonly ["tshirt_size"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier where this field belongs";
                    readonly examples: readonly [3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "field_type", "label_text"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Field identifier";
                        readonly examples: readonly [2];
                    };
                    readonly field_type: {
                        readonly type: "string";
                        readonly description: "The type of the field's value\n\n`text` `long_text` `date` `rating` `checkbox` `single_choice` `multiple_choice` `money` `cents`";
                        readonly enum: readonly ["text", "long_text", "date", "rating", "checkbox", "single_choice", "multiple_choice", "money", "cents"];
                        readonly examples: readonly ["text"];
                    };
                    readonly label_text: {
                        readonly type: "string";
                        readonly description: "Field label";
                        readonly examples: readonly ["T-Shirt Size"];
                    };
                    readonly position: {
                        readonly type: "integer";
                        readonly description: "Field position within employee profile";
                        readonly examples: readonly [3];
                    };
                    readonly required: {
                        readonly type: "boolean";
                        readonly description: "Requirement to fill this field";
                        readonly examples: readonly [true];
                    };
                    readonly min_value: {
                        readonly type: "integer";
                        readonly description: "Minimum value in range field type";
                        readonly examples: readonly [10];
                    };
                    readonly max_value: {
                        readonly type: "integer";
                        readonly description: "Maximum value in range field type";
                        readonly examples: readonly [0];
                    };
                    readonly options: {
                        readonly type: "array";
                        readonly description: "Array of options";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly examples: readonly [true, false, "maybe"];
                    };
                    readonly legal_entity_name: {
                        readonly type: "string";
                        readonly description: "Legal entity name where this field belongs";
                        readonly examples: readonly ["Factorial Legal"];
                    };
                    readonly slug: {
                        readonly type: "string";
                        readonly description: "Custom field slug";
                        readonly examples: readonly ["tshirt_size"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesCustomFieldsFieldsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "field_type", "label_text"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Field identifier";
                    readonly examples: readonly [2];
                };
                readonly field_type: {
                    readonly type: "string";
                    readonly description: "The type of the field's value\n\n`text` `long_text` `date` `rating` `checkbox` `single_choice` `multiple_choice` `money` `cents`";
                    readonly enum: readonly ["text", "long_text", "date", "rating", "checkbox", "single_choice", "multiple_choice", "money", "cents"];
                    readonly examples: readonly ["text"];
                };
                readonly label_text: {
                    readonly type: "string";
                    readonly description: "Field label";
                    readonly examples: readonly ["T-Shirt Size"];
                };
                readonly position: {
                    readonly type: "integer";
                    readonly description: "Field position within employee profile";
                    readonly examples: readonly [3];
                };
                readonly required: {
                    readonly type: "boolean";
                    readonly description: "Requirement to fill this field";
                    readonly examples: readonly [true];
                };
                readonly min_value: {
                    readonly type: "integer";
                    readonly description: "Minimum value in range field type";
                    readonly examples: readonly [10];
                };
                readonly max_value: {
                    readonly type: "integer";
                    readonly description: "Maximum value in range field type";
                    readonly examples: readonly [0];
                };
                readonly options: {
                    readonly type: "array";
                    readonly description: "Array of options";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly [true, false, "maybe"];
                };
                readonly legal_entity_name: {
                    readonly type: "string";
                    readonly description: "Legal entity name where this field belongs";
                    readonly examples: readonly ["Factorial Legal"];
                };
                readonly slug: {
                    readonly type: "string";
                    readonly description: "Custom field slug";
                    readonly examples: readonly ["tshirt_size"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesCustomFieldsOptions: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Options identifiers";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "field_ids[]": {
                    readonly type: "array";
                    readonly description: "Identifiers for the fields where the options belong to";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [3, 4];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Option identifier";
                        readonly examples: readonly [1];
                    };
                    readonly label: {
                        readonly type: "string";
                        readonly description: "Title for option";
                        readonly examples: readonly ["T-shirt size"];
                    };
                    readonly value: {
                        readonly type: "string";
                        readonly description: "Option value";
                        readonly examples: readonly ["L"];
                    };
                    readonly is_active: {
                        readonly type: "boolean";
                        readonly description: "Flag to make the option available";
                        readonly examples: readonly [true];
                    };
                    readonly field_id: {
                        readonly type: "integer";
                        readonly description: "Custom Fields identifier";
                        readonly examples: readonly [2];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesCustomFieldsOptionsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Option identifier";
                    readonly examples: readonly [1];
                };
                readonly label: {
                    readonly type: "string";
                    readonly description: "Title for option";
                    readonly examples: readonly ["T-shirt size"];
                };
                readonly value: {
                    readonly type: "string";
                    readonly description: "Option value";
                    readonly examples: readonly ["L"];
                };
                readonly is_active: {
                    readonly type: "boolean";
                    readonly description: "Flag to make the option available";
                    readonly examples: readonly [true];
                };
                readonly field_id: {
                    readonly type: "integer";
                    readonly description: "Custom Fields identifier";
                    readonly examples: readonly [2];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesCustomFieldsResourceFields: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Resource field identifiers";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "field_ids[]": {
                    readonly type: "array";
                    readonly description: "Custom Field identifiers";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Resource field identifier";
                        readonly examples: readonly [1];
                    };
                    readonly field_id: {
                        readonly type: "integer";
                        readonly description: "Custom Field identifier";
                        readonly examples: readonly [2];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesCustomFieldsResourceFieldsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Resource field identifier";
                    readonly examples: readonly [1];
                };
                readonly field_id: {
                    readonly type: "integer";
                    readonly description: "Custom Field identifier";
                    readonly examples: readonly [2];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesCustomFieldsValues: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "identifiers[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly instance_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly value: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly slug: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly field_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "custom_field_identifier", "valuable_id", "field_id", "valuable_type"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Unique identifier for the custom field value";
                        readonly examples: readonly [1];
                    };
                    readonly value: {
                        readonly type: "boolean";
                        readonly description: "Custom Fields value";
                        readonly examples: readonly ["This is an example value for a custom field"];
                    };
                    readonly long_text_value: {
                        readonly type: "string";
                        readonly description: "Custom field text value";
                        readonly examples: readonly ["The value of a text custom field"];
                    };
                    readonly custom_field_identifier: {
                        readonly type: "string";
                    };
                    readonly date_value: {
                        readonly type: "string";
                        readonly description: "Custom field date value";
                        readonly examples: readonly ["2022-01-01"];
                    };
                    readonly single_choice_value: {
                        readonly type: "string";
                        readonly description: "Custom field single choice value";
                        readonly examples: readonly ["Option 1"];
                    };
                    readonly cents_value: {
                        readonly type: "integer";
                        readonly description: "Custom field number value";
                        readonly examples: readonly [100];
                    };
                    readonly valuable_id: {
                        readonly type: "integer";
                    };
                    readonly field_id: {
                        readonly type: "integer";
                    };
                    readonly valuable_type: {
                        readonly type: "string";
                    };
                    readonly label: {
                        readonly type: "string";
                    };
                    readonly required: {
                        readonly type: "boolean";
                    };
                    readonly usage_group_id: {
                        readonly type: "integer";
                    };
                    readonly usage_group_slug: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesCustomFieldsValuesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "custom_field_identifier", "valuable_id", "field_id", "valuable_type"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the custom field value";
                    readonly examples: readonly [1];
                };
                readonly value: {
                    readonly type: "boolean";
                    readonly description: "Custom Fields value";
                    readonly examples: readonly ["This is an example value for a custom field"];
                };
                readonly long_text_value: {
                    readonly type: "string";
                    readonly description: "Custom field text value";
                    readonly examples: readonly ["The value of a text custom field"];
                };
                readonly custom_field_identifier: {
                    readonly type: "string";
                };
                readonly date_value: {
                    readonly type: "string";
                    readonly description: "Custom field date value";
                    readonly examples: readonly ["2022-01-01"];
                };
                readonly single_choice_value: {
                    readonly type: "string";
                    readonly description: "Custom field single choice value";
                    readonly examples: readonly ["Option 1"];
                };
                readonly cents_value: {
                    readonly type: "integer";
                    readonly description: "Custom field number value";
                    readonly examples: readonly [100];
                };
                readonly valuable_id: {
                    readonly type: "integer";
                };
                readonly field_id: {
                    readonly type: "integer";
                };
                readonly valuable_type: {
                    readonly type: "string";
                };
                readonly label: {
                    readonly type: "string";
                };
                readonly required: {
                    readonly type: "boolean";
                };
                readonly usage_group_id: {
                    readonly type: "integer";
                };
                readonly usage_group_slug: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesCustomResourcesSchemas: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Schemas identifiers";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["ids[]"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "name", "company_id", "hidden"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Schema identifier";
                        readonly examples: readonly [1];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Schema name";
                        readonly examples: readonly ["Company Offsite"];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "Company identifier where this schema belongs";
                        readonly examples: readonly [2];
                    };
                    readonly hidden: {
                        readonly type: "boolean";
                        readonly description: "Manages visibility of the schema";
                    };
                    readonly position: {
                        readonly type: "integer";
                        readonly description: "Schema position within employee profile";
                        readonly examples: readonly [1];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesCustomResourcesSchemasId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id", "hidden"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Schema identifier";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Schema name";
                    readonly examples: readonly ["Company Offsite"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier where this schema belongs";
                    readonly examples: readonly [2];
                };
                readonly hidden: {
                    readonly type: "boolean";
                    readonly description: "Manages visibility of the schema";
                };
                readonly position: {
                    readonly type: "integer";
                    readonly description: "Schema position within employee profile";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesCustomResourcesValues: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Values identifiers";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly description: "Employee identifiers";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "field_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Value identifier";
                        readonly examples: readonly [1];
                    };
                    readonly field_id: {
                        readonly type: "integer";
                        readonly description: "Identifier of the field this value belongs to";
                        readonly examples: readonly [2];
                    };
                    readonly long_text_value: {
                        readonly type: "string";
                        readonly description: "When the field's type is long_text_value, value for schema long_text_value custom field";
                        readonly examples: readonly ["Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."];
                    };
                    readonly date_value: {
                        readonly type: "string";
                        readonly description: "When the field's type is date_value, value for schema date_value custom field";
                        readonly examples: readonly ["2024-04-01"];
                    };
                    readonly text_value: {
                        readonly type: "string";
                        readonly description: "When the field's type is text_value, value for schema text_value custom field";
                        readonly examples: readonly ["Lorem ipsum dolor sit amet, consectetur adipiscing elit."];
                    };
                    readonly number_value: {
                        readonly type: "integer";
                        readonly description: "When the field's type is number_value, value for schema number_value custom field";
                        readonly examples: readonly [2];
                    };
                    readonly option_value: {
                        readonly type: "string";
                        readonly description: "When the field's type is option_value, selected value for schema option_value custom field";
                        readonly examples: readonly ["one_of_the_options"];
                    };
                    readonly cents_value: {
                        readonly type: "integer";
                        readonly description: "When the field's type is cents_value, value for schema cents_value custom field";
                        readonly examples: readonly [5];
                    };
                    readonly boolean_value: {
                        readonly type: "boolean";
                        readonly description: "When the field's type is boolean_value, value for schema boolean_value custom field";
                        readonly examples: readonly [true];
                    };
                    readonly single_choice_value: {
                        readonly type: "string";
                        readonly description: "When the field's type is single_choice_value, selected value for schema single_choice_value custom field";
                        readonly examples: readonly ["selected_choice"];
                    };
                    readonly multiple_choice_value: {
                        readonly type: "array";
                        readonly description: "When the field's type is multiple_choice_value,selected values for schema multiple_choice_value custom field";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly examples: readonly ["selected_choice_1", "selected_choice_2"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesCustomResourcesValuesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "field_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Value identifier";
                    readonly examples: readonly [1];
                };
                readonly field_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the field this value belongs to";
                    readonly examples: readonly [2];
                };
                readonly long_text_value: {
                    readonly type: "string";
                    readonly description: "When the field's type is long_text_value, value for schema long_text_value custom field";
                    readonly examples: readonly ["Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."];
                };
                readonly date_value: {
                    readonly type: "string";
                    readonly description: "When the field's type is date_value, value for schema date_value custom field";
                    readonly examples: readonly ["2024-04-01"];
                };
                readonly text_value: {
                    readonly type: "string";
                    readonly description: "When the field's type is text_value, value for schema text_value custom field";
                    readonly examples: readonly ["Lorem ipsum dolor sit amet, consectetur adipiscing elit."];
                };
                readonly number_value: {
                    readonly type: "integer";
                    readonly description: "When the field's type is number_value, value for schema number_value custom field";
                    readonly examples: readonly [2];
                };
                readonly option_value: {
                    readonly type: "string";
                    readonly description: "When the field's type is option_value, selected value for schema option_value custom field";
                    readonly examples: readonly ["one_of_the_options"];
                };
                readonly cents_value: {
                    readonly type: "integer";
                    readonly description: "When the field's type is cents_value, value for schema cents_value custom field";
                    readonly examples: readonly [5];
                };
                readonly boolean_value: {
                    readonly type: "boolean";
                    readonly description: "When the field's type is boolean_value, value for schema boolean_value custom field";
                    readonly examples: readonly [true];
                };
                readonly single_choice_value: {
                    readonly type: "string";
                    readonly description: "When the field's type is single_choice_value, selected value for schema single_choice_value custom field";
                    readonly examples: readonly ["selected_choice"];
                };
                readonly multiple_choice_value: {
                    readonly type: "array";
                    readonly description: "When the field's type is multiple_choice_value,selected values for schema multiple_choice_value custom field";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["selected_choice_1", "selected_choice_2"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesDocumentsDocuments: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly by_bookkeeper_documents: {
                    readonly type: "boolean";
                    readonly description: "flag to indicate if the document belongs to a bookkeeper.";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly by_pending_assignment: {
                    readonly type: "boolean";
                    readonly description: "flag to indicate if the document is pending assignment.";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly by_trash_bin: {
                    readonly type: "boolean";
                    readonly description: "flag to indicate if the document is in the trash bin.";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly by_without_folder: {
                    readonly type: "boolean";
                    readonly description: "flag to indicate if the document doesn't have a folder.";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly description: "list of employee identifiers.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly folder_id: {
                    readonly type: "integer";
                    readonly description: "folder identifier.";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "list of document identifiers.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly leave_id: {
                    readonly type: "integer";
                    readonly description: "leave identifier associated to the document, refers to /timeoff/leaves endpoint.";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["by_pending_assignment", "by_trash_bin"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["created_at", "filename", "id", "public", "space", "updated_at"];
                readonly properties: {
                    readonly author_id: {
                        readonly type: "integer";
                        readonly description: "access identifier of the author, refers to /employees/employees endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "company identifier, refers to /api/me endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly content_type: {
                        readonly type: "string";
                        readonly description: "document content type.";
                        readonly examples: readonly ["application/pdf"];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "creation date of the document.";
                        readonly examples: readonly ["2020-01-01T00:00:00Z"];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "employee identifier associated to the document.";
                        readonly examples: readonly [1];
                    };
                    readonly extension: {
                        readonly type: "string";
                        readonly description: "document extension.";
                        readonly examples: readonly ["pdf"];
                    };
                    readonly file_size: {
                        readonly type: "integer";
                        readonly description: "document file size in bytes.";
                        readonly examples: readonly [1024];
                    };
                    readonly file: {
                        readonly type: "string";
                        readonly description: "url of the document for download it.";
                        readonly examples: readonly ["/documents/60"];
                    };
                    readonly filename: {
                        readonly type: "string";
                        readonly description: "name of the document.";
                        readonly examples: readonly ["document.pdf"];
                    };
                    readonly folder_id: {
                        readonly type: "integer";
                        readonly description: "folder identifier, references to documents/folders endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "document identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly is_company_document: {
                        readonly type: "boolean";
                        readonly description: "flag that indicates if the document is a company document.";
                        readonly examples: readonly [true];
                    };
                    readonly is_management_document: {
                        readonly type: "boolean";
                        readonly description: "flag that indicates if the document is a management document.";
                        readonly examples: readonly [true];
                    };
                    readonly is_pending_assignment: {
                        readonly type: "boolean";
                        readonly description: "flag that indicates if the document is pending assignment.";
                        readonly examples: readonly [true];
                    };
                    readonly leave_id: {
                        readonly type: "integer";
                        readonly description: "leave identifier associated to the document, refers to /timeoff/leaves endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly public: {
                        readonly type: "boolean";
                        readonly description: "flag to indicate if the document is public.";
                        readonly examples: readonly [true];
                    };
                    readonly signature_status: {
                        readonly type: "string";
                        readonly description: "document signature status.\n\n`pending` `partially_signed` `declined` `completed` `bounced_email` `cancelled` `error`";
                        readonly enum: readonly ["pending", "partially_signed", "declined", "completed", "bounced_email", "cancelled", "error"];
                        readonly examples: readonly ["pending"];
                    };
                    readonly signees: {
                        readonly type: "array";
                        readonly description: "list of signee access identifiers associated to the document, refers to /employees/employees endpoint.";
                        readonly items: {
                            readonly type: "integer";
                        };
                    };
                    readonly space: {
                        readonly type: "string";
                        readonly description: "document space.";
                        readonly examples: readonly ["company_public"];
                    };
                    readonly updated_at: {
                        readonly type: "string";
                        readonly description: "last update date of the document.";
                        readonly examples: readonly ["2020-01-01T00:00:00Z"];
                    };
                    readonly deleted_at: {
                        readonly type: "string";
                        readonly description: "deletion date of the document.";
                        readonly examples: readonly ["2020-01-01T00:00:00Z"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesDocumentsDocumentsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["created_at", "filename", "id", "public", "space", "updated_at"];
            readonly properties: {
                readonly author_id: {
                    readonly type: "integer";
                    readonly description: "access identifier of the author, refers to /employees/employees endpoint.";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "company identifier, refers to /api/me endpoint.";
                    readonly examples: readonly [1];
                };
                readonly content_type: {
                    readonly type: "string";
                    readonly description: "document content type.";
                    readonly examples: readonly ["application/pdf"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "creation date of the document.";
                    readonly examples: readonly ["2020-01-01T00:00:00Z"];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "employee identifier associated to the document.";
                    readonly examples: readonly [1];
                };
                readonly extension: {
                    readonly type: "string";
                    readonly description: "document extension.";
                    readonly examples: readonly ["pdf"];
                };
                readonly file_size: {
                    readonly type: "integer";
                    readonly description: "document file size in bytes.";
                    readonly examples: readonly [1024];
                };
                readonly file: {
                    readonly type: "string";
                    readonly description: "url of the document for download it.";
                    readonly examples: readonly ["/documents/60"];
                };
                readonly filename: {
                    readonly type: "string";
                    readonly description: "name of the document.";
                    readonly examples: readonly ["document.pdf"];
                };
                readonly folder_id: {
                    readonly type: "integer";
                    readonly description: "folder identifier, references to documents/folders endpoint.";
                    readonly examples: readonly [1];
                };
                readonly id: {
                    readonly type: "integer";
                    readonly description: "document identifier.";
                    readonly examples: readonly [1];
                };
                readonly is_company_document: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the document is a company document.";
                    readonly examples: readonly [true];
                };
                readonly is_management_document: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the document is a management document.";
                    readonly examples: readonly [true];
                };
                readonly is_pending_assignment: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the document is pending assignment.";
                    readonly examples: readonly [true];
                };
                readonly leave_id: {
                    readonly type: "integer";
                    readonly description: "leave identifier associated to the document, refers to /timeoff/leaves endpoint.";
                    readonly examples: readonly [1];
                };
                readonly public: {
                    readonly type: "boolean";
                    readonly description: "flag to indicate if the document is public.";
                    readonly examples: readonly [true];
                };
                readonly signature_status: {
                    readonly type: "string";
                    readonly description: "document signature status.\n\n`pending` `partially_signed` `declined` `completed` `bounced_email` `cancelled` `error`";
                    readonly enum: readonly ["pending", "partially_signed", "declined", "completed", "bounced_email", "cancelled", "error"];
                    readonly examples: readonly ["pending"];
                };
                readonly signees: {
                    readonly type: "array";
                    readonly description: "list of signee access identifiers associated to the document, refers to /employees/employees endpoint.";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly space: {
                    readonly type: "string";
                    readonly description: "document space.";
                    readonly examples: readonly ["company_public"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "last update date of the document.";
                    readonly examples: readonly ["2020-01-01T00:00:00Z"];
                };
                readonly deleted_at: {
                    readonly type: "string";
                    readonly description: "deletion date of the document.";
                    readonly examples: readonly ["2020-01-01T00:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesDocumentsFolders: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "Active folder.";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee id";
                    readonly examples: readonly [15];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "ids of the folders.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [10, 12, 13];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the folder.";
                    readonly examples: readonly ["Payslips"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["active", "id", "name"];
                readonly properties: {
                    readonly active: {
                        readonly type: "boolean";
                        readonly description: "Whether the folder is active or not";
                        readonly examples: readonly [true];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "Company ID of the folder";
                        readonly examples: readonly [1];
                    };
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Folder ID";
                        readonly examples: readonly [10];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Folder name";
                        readonly examples: readonly ["Payslips"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesDocumentsFoldersId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["active", "id", "name"];
            readonly properties: {
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "Whether the folder is active or not";
                    readonly examples: readonly [true];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company ID of the folder";
                    readonly examples: readonly [1];
                };
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Folder ID";
                    readonly examples: readonly [10];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Folder name";
                    readonly examples: readonly ["Payslips"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesEmployeeUpdatesAbsences: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "filter by absence incidence ids.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "status"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly status: {
                        readonly type: "string";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly employee_full_name: {
                        readonly type: "string";
                    };
                    readonly approved: {
                        readonly type: "boolean";
                    };
                    readonly description: {
                        readonly type: "string";
                    };
                    readonly start_on: {
                        readonly type: "string";
                    };
                    readonly prev_start_on: {
                        readonly type: "string";
                    };
                    readonly finish_on: {
                        readonly type: "string";
                    };
                    readonly prev_finish_on: {
                        readonly type: "string";
                    };
                    readonly half_day: {
                        readonly type: "string";
                    };
                    readonly leave_type_id: {
                        readonly type: "integer";
                    };
                    readonly leave_type_name: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesEmployeeUpdatesAbsencesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "status"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly employee_full_name: {
                    readonly type: "string";
                };
                readonly approved: {
                    readonly type: "boolean";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly start_on: {
                    readonly type: "string";
                };
                readonly prev_start_on: {
                    readonly type: "string";
                };
                readonly finish_on: {
                    readonly type: "string";
                };
                readonly prev_finish_on: {
                    readonly type: "string";
                };
                readonly half_day: {
                    readonly type: "string";
                };
                readonly leave_type_id: {
                    readonly type: "integer";
                };
                readonly leave_type_name: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesEmployeeUpdatesContractChanges: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "filter by contract change incidence ids.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "status", "effective_on", "employee_id", "has_payroll", "fr_forfait_jours", "created_at", "updated_at"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "The id of the contract change incidence";
                        readonly examples: readonly [1];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "The status of the contract change incidence";
                        readonly examples: readonly ["done"];
                    };
                    readonly effective_on: {
                        readonly type: "string";
                        readonly description: "The effective date of the contract";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly starts_on: {
                        readonly type: "string";
                        readonly description: "The start date of the contract";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly ends_on: {
                        readonly type: "string";
                        readonly description: "The end date of the contract";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "The employee id";
                        readonly examples: readonly [1];
                    };
                    readonly job_title: {
                        readonly type: "string";
                        readonly description: "The job title on the contract change";
                        readonly examples: readonly ["The job title"];
                    };
                    readonly job_role: {
                        readonly type: "string";
                        readonly description: "The job role on the contract change";
                        readonly examples: readonly ["The job role"];
                    };
                    readonly job_level: {
                        readonly type: "string";
                        readonly description: "The job level on the contract change";
                        readonly examples: readonly ["The job level"];
                    };
                    readonly has_payroll: {
                        readonly type: "boolean";
                        readonly description: "The payrollable status of the employee on the contract change";
                        readonly examples: readonly [true];
                    };
                    readonly salary_amount: {
                        readonly type: "integer";
                        readonly description: "The salary amount on the contract change";
                        readonly examples: readonly [200000];
                    };
                    readonly salary_frequency: {
                        readonly type: "string";
                        readonly description: "The salary payment frequency on the contract change";
                        readonly examples: readonly ["monthly"];
                    };
                    readonly working_week_days: {
                        readonly type: "string";
                        readonly description: "The working week days on the contract change";
                        readonly examples: readonly ["Monday"];
                    };
                    readonly working_hours: {
                        readonly type: "integer";
                        readonly description: "The working hours on the contract change";
                        readonly examples: readonly [40];
                    };
                    readonly working_hours_frequency: {
                        readonly type: "string";
                        readonly description: "The working hours frequency on the contract change";
                        readonly examples: readonly ["weekly"];
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly description: "The country on the contract change";
                        readonly examples: readonly ["es"];
                    };
                    readonly es_has_teleworking_contract: {
                        readonly type: "boolean";
                        readonly description: "The teleworking status on the contract change";
                        readonly examples: readonly [true];
                    };
                    readonly es_cotization_group: {
                        readonly type: "integer";
                        readonly description: "The cotization group on the contract change";
                        readonly examples: readonly [1];
                    };
                    readonly es_contract_observations: {
                        readonly type: "string";
                        readonly description: "The contract observations on the contract change";
                        readonly examples: readonly ["The contract observations"];
                    };
                    readonly es_job_description: {
                        readonly type: "string";
                        readonly description: "The job description on the contract change";
                        readonly examples: readonly ["The job description"];
                    };
                    readonly es_contract_type_id: {
                        readonly type: "integer";
                        readonly description: "The contract type id on the contract change";
                        readonly examples: readonly [1];
                    };
                    readonly es_contract_type_name: {
                        readonly type: "string";
                        readonly description: "The contract type name on the contract change";
                        readonly examples: readonly ["The contract type name"];
                    };
                    readonly es_trial_period_ends_on: {
                        readonly type: "string";
                        readonly description: "The trial period end date on the contract change";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly es_working_day_type_id: {
                        readonly type: "integer";
                        readonly description: "The working day type id on the contract change";
                        readonly examples: readonly [1];
                    };
                    readonly es_education_level_id: {
                        readonly type: "integer";
                        readonly description: "The education level id on the contract change";
                        readonly examples: readonly [1];
                    };
                    readonly es_professional_category_id: {
                        readonly type: "integer";
                        readonly description: "The professional category id on the contract change";
                        readonly examples: readonly [1];
                    };
                    readonly fr_employee_type: {
                        readonly type: "string";
                        readonly description: "The employee type on the contract change";
                        readonly examples: readonly ["The employee type"];
                    };
                    readonly fr_forfait_jours: {
                        readonly type: "boolean";
                        readonly description: "The forfait jours status on the contract change";
                        readonly examples: readonly [true];
                    };
                    readonly fr_jours_par_an: {
                        readonly type: "integer";
                        readonly description: "The jours par an on the contract change";
                        readonly examples: readonly [1];
                    };
                    readonly fr_coefficient: {
                        readonly type: "string";
                        readonly description: "The coefficient on the contract change";
                        readonly examples: readonly ["The coefficient"];
                    };
                    readonly fr_level_id: {
                        readonly type: "integer";
                        readonly description: "The level id on the contract change";
                        readonly examples: readonly [1];
                    };
                    readonly fr_level_name: {
                        readonly type: "string";
                        readonly description: "The level name on the contract change";
                        readonly examples: readonly ["The level name"];
                    };
                    readonly fr_step_id: {
                        readonly type: "integer";
                        readonly description: "The step id on the contract change";
                        readonly examples: readonly [1];
                    };
                    readonly fr_step_name: {
                        readonly type: "string";
                        readonly description: "The step name on the contract change";
                        readonly examples: readonly ["The step name"];
                    };
                    readonly fr_mutual_id: {
                        readonly type: "integer";
                        readonly description: "The mutual id on the contract change";
                        readonly examples: readonly [1];
                    };
                    readonly fr_mutual_name: {
                        readonly type: "string";
                        readonly description: "The mutual name on the contract change";
                        readonly examples: readonly ["The mutual name"];
                    };
                    readonly fr_professional_category_id: {
                        readonly type: "integer";
                        readonly description: "The professional category id on the contract change";
                        readonly examples: readonly [1];
                    };
                    readonly fr_professional_category_name: {
                        readonly type: "string";
                        readonly description: "The professional category name on the contract change";
                        readonly examples: readonly ["The professional category name"];
                    };
                    readonly fr_work_type_id: {
                        readonly type: "integer";
                        readonly description: "The work type id on the contract change";
                        readonly examples: readonly [1];
                    };
                    readonly fr_work_type_name: {
                        readonly type: "string";
                        readonly description: "The work type name on the contract change";
                        readonly examples: readonly ["The work type name"];
                    };
                    readonly compensation_ids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                        };
                    };
                    readonly fr_contract_type_id: {
                        readonly type: "integer";
                        readonly description: "The contract type id on the contract change";
                        readonly examples: readonly [1];
                    };
                    readonly fr_contract_type_name: {
                        readonly type: "string";
                        readonly description: "The contract type name on the contract change";
                        readonly examples: readonly ["The contract type name"];
                    };
                    readonly de_contract_type_id: {
                        readonly type: "integer";
                        readonly description: "The contract type id on the contract change";
                        readonly examples: readonly [1];
                    };
                    readonly de_contract_type_name: {
                        readonly type: "string";
                        readonly description: "The contract type name on the contract change";
                        readonly examples: readonly ["The contract type name"];
                    };
                    readonly pt_contract_type_id: {
                        readonly type: "integer";
                        readonly description: "The contract type id on the contract change";
                        readonly examples: readonly [1];
                    };
                    readonly pt_contract_type_name: {
                        readonly type: "string";
                        readonly description: "The contract type name on the contract change";
                        readonly examples: readonly ["The contract type name"];
                    };
                    readonly created_at: {
                        readonly type: "string";
                    };
                    readonly updated_at: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesEmployeeUpdatesContractChangesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "status", "effective_on", "employee_id", "has_payroll", "fr_forfait_jours", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "The id of the contract change incidence";
                    readonly examples: readonly [1];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The status of the contract change incidence";
                    readonly examples: readonly ["done"];
                };
                readonly effective_on: {
                    readonly type: "string";
                    readonly description: "The effective date of the contract";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly starts_on: {
                    readonly type: "string";
                    readonly description: "The start date of the contract";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly ends_on: {
                    readonly type: "string";
                    readonly description: "The end date of the contract";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "The employee id";
                    readonly examples: readonly [1];
                };
                readonly job_title: {
                    readonly type: "string";
                    readonly description: "The job title on the contract change";
                    readonly examples: readonly ["The job title"];
                };
                readonly job_role: {
                    readonly type: "string";
                    readonly description: "The job role on the contract change";
                    readonly examples: readonly ["The job role"];
                };
                readonly job_level: {
                    readonly type: "string";
                    readonly description: "The job level on the contract change";
                    readonly examples: readonly ["The job level"];
                };
                readonly has_payroll: {
                    readonly type: "boolean";
                    readonly description: "The payrollable status of the employee on the contract change";
                    readonly examples: readonly [true];
                };
                readonly salary_amount: {
                    readonly type: "integer";
                    readonly description: "The salary amount on the contract change";
                    readonly examples: readonly [200000];
                };
                readonly salary_frequency: {
                    readonly type: "string";
                    readonly description: "The salary payment frequency on the contract change";
                    readonly examples: readonly ["monthly"];
                };
                readonly working_week_days: {
                    readonly type: "string";
                    readonly description: "The working week days on the contract change";
                    readonly examples: readonly ["Monday"];
                };
                readonly working_hours: {
                    readonly type: "integer";
                    readonly description: "The working hours on the contract change";
                    readonly examples: readonly [40];
                };
                readonly working_hours_frequency: {
                    readonly type: "string";
                    readonly description: "The working hours frequency on the contract change";
                    readonly examples: readonly ["weekly"];
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "The country on the contract change";
                    readonly examples: readonly ["es"];
                };
                readonly es_has_teleworking_contract: {
                    readonly type: "boolean";
                    readonly description: "The teleworking status on the contract change";
                    readonly examples: readonly [true];
                };
                readonly es_cotization_group: {
                    readonly type: "integer";
                    readonly description: "The cotization group on the contract change";
                    readonly examples: readonly [1];
                };
                readonly es_contract_observations: {
                    readonly type: "string";
                    readonly description: "The contract observations on the contract change";
                    readonly examples: readonly ["The contract observations"];
                };
                readonly es_job_description: {
                    readonly type: "string";
                    readonly description: "The job description on the contract change";
                    readonly examples: readonly ["The job description"];
                };
                readonly es_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "The contract type id on the contract change";
                    readonly examples: readonly [1];
                };
                readonly es_contract_type_name: {
                    readonly type: "string";
                    readonly description: "The contract type name on the contract change";
                    readonly examples: readonly ["The contract type name"];
                };
                readonly es_trial_period_ends_on: {
                    readonly type: "string";
                    readonly description: "The trial period end date on the contract change";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly es_working_day_type_id: {
                    readonly type: "integer";
                    readonly description: "The working day type id on the contract change";
                    readonly examples: readonly [1];
                };
                readonly es_education_level_id: {
                    readonly type: "integer";
                    readonly description: "The education level id on the contract change";
                    readonly examples: readonly [1];
                };
                readonly es_professional_category_id: {
                    readonly type: "integer";
                    readonly description: "The professional category id on the contract change";
                    readonly examples: readonly [1];
                };
                readonly fr_employee_type: {
                    readonly type: "string";
                    readonly description: "The employee type on the contract change";
                    readonly examples: readonly ["The employee type"];
                };
                readonly fr_forfait_jours: {
                    readonly type: "boolean";
                    readonly description: "The forfait jours status on the contract change";
                    readonly examples: readonly [true];
                };
                readonly fr_jours_par_an: {
                    readonly type: "integer";
                    readonly description: "The jours par an on the contract change";
                    readonly examples: readonly [1];
                };
                readonly fr_coefficient: {
                    readonly type: "string";
                    readonly description: "The coefficient on the contract change";
                    readonly examples: readonly ["The coefficient"];
                };
                readonly fr_level_id: {
                    readonly type: "integer";
                    readonly description: "The level id on the contract change";
                    readonly examples: readonly [1];
                };
                readonly fr_level_name: {
                    readonly type: "string";
                    readonly description: "The level name on the contract change";
                    readonly examples: readonly ["The level name"];
                };
                readonly fr_step_id: {
                    readonly type: "integer";
                    readonly description: "The step id on the contract change";
                    readonly examples: readonly [1];
                };
                readonly fr_step_name: {
                    readonly type: "string";
                    readonly description: "The step name on the contract change";
                    readonly examples: readonly ["The step name"];
                };
                readonly fr_mutual_id: {
                    readonly type: "integer";
                    readonly description: "The mutual id on the contract change";
                    readonly examples: readonly [1];
                };
                readonly fr_mutual_name: {
                    readonly type: "string";
                    readonly description: "The mutual name on the contract change";
                    readonly examples: readonly ["The mutual name"];
                };
                readonly fr_professional_category_id: {
                    readonly type: "integer";
                    readonly description: "The professional category id on the contract change";
                    readonly examples: readonly [1];
                };
                readonly fr_professional_category_name: {
                    readonly type: "string";
                    readonly description: "The professional category name on the contract change";
                    readonly examples: readonly ["The professional category name"];
                };
                readonly fr_work_type_id: {
                    readonly type: "integer";
                    readonly description: "The work type id on the contract change";
                    readonly examples: readonly [1];
                };
                readonly fr_work_type_name: {
                    readonly type: "string";
                    readonly description: "The work type name on the contract change";
                    readonly examples: readonly ["The work type name"];
                };
                readonly compensation_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly fr_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "The contract type id on the contract change";
                    readonly examples: readonly [1];
                };
                readonly fr_contract_type_name: {
                    readonly type: "string";
                    readonly description: "The contract type name on the contract change";
                    readonly examples: readonly ["The contract type name"];
                };
                readonly de_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "The contract type id on the contract change";
                    readonly examples: readonly [1];
                };
                readonly de_contract_type_name: {
                    readonly type: "string";
                    readonly description: "The contract type name on the contract change";
                    readonly examples: readonly ["The contract type name"];
                };
                readonly pt_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "The contract type id on the contract change";
                    readonly examples: readonly [1];
                };
                readonly pt_contract_type_name: {
                    readonly type: "string";
                    readonly description: "The contract type name on the contract change";
                    readonly examples: readonly ["The contract type name"];
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesEmployeeUpdatesNewHires: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "filter by new hire incidence ids.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "status", "employee_id", "first_name", "last_name", "address"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "The id of the new hire incidence";
                        readonly examples: readonly [1];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "The status of the new hire incidence";
                        readonly examples: readonly ["done"];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "The employee id of the new hire";
                        readonly examples: readonly [1];
                    };
                    readonly first_name: {
                        readonly type: "string";
                        readonly description: "name of the employee.";
                        readonly examples: readonly ["Ana"];
                    };
                    readonly last_name: {
                        readonly type: "string";
                        readonly description: "last name of the employee.";
                        readonly examples: readonly ["Blanco Perez"];
                    };
                    readonly birth_name: {
                        readonly type: "string";
                        readonly description: "The birth name of the new hire";
                        readonly examples: readonly ["John Doe"];
                    };
                    readonly identifier: {
                        readonly type: "string";
                        readonly description: "national identifier number.";
                        readonly examples: readonly ["QKG587532Y"];
                    };
                    readonly identifier_type: {
                        readonly type: "string";
                        readonly description: "type of identifier (ex passport).";
                        readonly examples: readonly ["passport"];
                    };
                    readonly payroll_identifier: {
                        readonly type: "string";
                        readonly description: "payroll identifier.";
                        readonly examples: readonly [123456];
                    };
                    readonly work_email: {
                        readonly type: "string";
                        readonly description: "personal email of the employee.";
                        readonly examples: readonly ["ana@factorial.com"];
                    };
                    readonly phone_number: {
                        readonly type: "string";
                        readonly description: "phone number of the employee.";
                        readonly examples: readonly [123456789];
                    };
                    readonly gender: {
                        readonly type: "string";
                        readonly description: "gender of the employee (male | female).";
                        readonly examples: readonly ["female"];
                    };
                    readonly job_title: {
                        readonly type: "string";
                        readonly description: "job title of the employee.";
                        readonly examples: readonly ["Software Engineer"];
                    };
                    readonly address: {
                        readonly type: "string";
                        readonly description: "address of the employee.";
                        readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "city of the employee.";
                        readonly examples: readonly ["Santander"];
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly description: "country code of the employee (Spain ES, United Kingdom GB).";
                        readonly examples: readonly ["ES"];
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly description: "state/province/region of the employee.";
                        readonly examples: readonly ["Cataluña"];
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly description: "postal code of the employee.";
                        readonly examples: readonly [27004];
                    };
                    readonly date_of_birth: {
                        readonly type: "string";
                        readonly description: "birthday of the employee.";
                        readonly examples: readonly ["1990-06-06"];
                    };
                    readonly nationality: {
                        readonly type: "string";
                        readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                        readonly examples: readonly ["ES"];
                    };
                    readonly start_date: {
                        readonly type: "string";
                    };
                    readonly contract_effective_date: {
                        readonly type: "string";
                    };
                    readonly contract_end_date: {
                        readonly type: "string";
                    };
                    readonly bank_account: {
                        readonly type: "string";
                        readonly description: "bank account number of the employee.";
                        readonly examples: readonly ["ES6220809324751871912999"];
                    };
                    readonly salary_amount_in_cents: {
                        readonly type: "integer";
                        readonly description: "salary amount in cents.";
                        readonly examples: readonly [200000];
                    };
                    readonly salary_frequency: {
                        readonly type: "string";
                    };
                    readonly working_hours: {
                        readonly type: "integer";
                    };
                    readonly working_hours_frequency: {
                        readonly type: "string";
                    };
                    readonly social_security_number: {
                        readonly type: "string";
                        readonly description: "social security number of the employee.";
                        readonly examples: readonly [238038194000];
                    };
                    readonly manager_id: {
                        readonly type: "integer";
                        readonly description: "manager id of the employee, you can get the manager id from employees endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly tax_id: {
                        readonly type: "string";
                    };
                    readonly legal_entity_id: {
                        readonly type: "integer";
                        readonly description: "The legal entity id of the new hire";
                        readonly examples: readonly [1];
                    };
                    readonly workplace_id: {
                        readonly type: "integer";
                        readonly description: "workplace id of the employee.";
                        readonly examples: readonly [1];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesEmployeeUpdatesNewHiresId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "status", "employee_id", "first_name", "last_name", "address"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "The id of the new hire incidence";
                    readonly examples: readonly [1];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The status of the new hire incidence";
                    readonly examples: readonly ["done"];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "The employee id of the new hire";
                    readonly examples: readonly [1];
                };
                readonly first_name: {
                    readonly type: "string";
                    readonly description: "name of the employee.";
                    readonly examples: readonly ["Ana"];
                };
                readonly last_name: {
                    readonly type: "string";
                    readonly description: "last name of the employee.";
                    readonly examples: readonly ["Blanco Perez"];
                };
                readonly birth_name: {
                    readonly type: "string";
                    readonly description: "The birth name of the new hire";
                    readonly examples: readonly ["John Doe"];
                };
                readonly identifier: {
                    readonly type: "string";
                    readonly description: "national identifier number.";
                    readonly examples: readonly ["QKG587532Y"];
                };
                readonly identifier_type: {
                    readonly type: "string";
                    readonly description: "type of identifier (ex passport).";
                    readonly examples: readonly ["passport"];
                };
                readonly payroll_identifier: {
                    readonly type: "string";
                    readonly description: "payroll identifier.";
                    readonly examples: readonly [123456];
                };
                readonly work_email: {
                    readonly type: "string";
                    readonly description: "personal email of the employee.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly phone_number: {
                    readonly type: "string";
                    readonly description: "phone number of the employee.";
                    readonly examples: readonly [123456789];
                };
                readonly gender: {
                    readonly type: "string";
                    readonly description: "gender of the employee (male | female).";
                    readonly examples: readonly ["female"];
                };
                readonly job_title: {
                    readonly type: "string";
                    readonly description: "job title of the employee.";
                    readonly examples: readonly ["Software Engineer"];
                };
                readonly address: {
                    readonly type: "string";
                    readonly description: "address of the employee.";
                    readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                };
                readonly city: {
                    readonly type: "string";
                    readonly description: "city of the employee.";
                    readonly examples: readonly ["Santander"];
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly state: {
                    readonly type: "string";
                    readonly description: "state/province/region of the employee.";
                    readonly examples: readonly ["Cataluña"];
                };
                readonly postal_code: {
                    readonly type: "string";
                    readonly description: "postal code of the employee.";
                    readonly examples: readonly [27004];
                };
                readonly date_of_birth: {
                    readonly type: "string";
                    readonly description: "birthday of the employee.";
                    readonly examples: readonly ["1990-06-06"];
                };
                readonly nationality: {
                    readonly type: "string";
                    readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly start_date: {
                    readonly type: "string";
                };
                readonly contract_effective_date: {
                    readonly type: "string";
                };
                readonly contract_end_date: {
                    readonly type: "string";
                };
                readonly bank_account: {
                    readonly type: "string";
                    readonly description: "bank account number of the employee.";
                    readonly examples: readonly ["ES6220809324751871912999"];
                };
                readonly salary_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "salary amount in cents.";
                    readonly examples: readonly [200000];
                };
                readonly salary_frequency: {
                    readonly type: "string";
                };
                readonly working_hours: {
                    readonly type: "integer";
                };
                readonly working_hours_frequency: {
                    readonly type: "string";
                };
                readonly social_security_number: {
                    readonly type: "string";
                    readonly description: "social security number of the employee.";
                    readonly examples: readonly [238038194000];
                };
                readonly manager_id: {
                    readonly type: "integer";
                    readonly description: "manager id of the employee, you can get the manager id from employees endpoint.";
                    readonly examples: readonly [1];
                };
                readonly tax_id: {
                    readonly type: "string";
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "The legal entity id of the new hire";
                    readonly examples: readonly [1];
                };
                readonly workplace_id: {
                    readonly type: "integer";
                    readonly description: "workplace id of the employee.";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesEmployeeUpdatesPersonalChanges: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "filter by personal change incidence ids.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "status", "employee_id", "first_name", "last_name"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "The id of the new hire incidence";
                        readonly examples: readonly [1];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "The status of the new hire incidence";
                        readonly examples: readonly ["done"];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "The employee id of the new hire";
                        readonly examples: readonly [1];
                    };
                    readonly work_email: {
                        readonly type: "string";
                        readonly description: "personal email of the employee.";
                        readonly examples: readonly ["ana@factorial.com"];
                    };
                    readonly phone_number: {
                        readonly type: "string";
                        readonly description: "phone number of the employee.";
                        readonly examples: readonly [123456789];
                    };
                    readonly identifier_type: {
                        readonly type: "string";
                        readonly description: "type of identifier (ex passport).";
                        readonly examples: readonly ["passport"];
                    };
                    readonly identifier: {
                        readonly type: "string";
                        readonly description: "national identifier number.";
                        readonly examples: readonly ["QKG587532Y"];
                    };
                    readonly social_security_number: {
                        readonly type: "string";
                        readonly description: "social security number of the employee.";
                        readonly examples: readonly [238038194000];
                    };
                    readonly tax_id: {
                        readonly type: "string";
                    };
                    readonly first_name: {
                        readonly type: "string";
                        readonly description: "name of the employee.";
                        readonly examples: readonly ["Ana"];
                    };
                    readonly last_name: {
                        readonly type: "string";
                        readonly description: "last name of the employee.";
                        readonly examples: readonly ["Blanco Perez"];
                    };
                    readonly gender: {
                        readonly type: "string";
                        readonly description: "gender of the employee (male | female).";
                        readonly examples: readonly ["female"];
                    };
                    readonly date_of_birth: {
                        readonly type: "string";
                        readonly description: "birthday of the employee.";
                        readonly examples: readonly ["1990-06-06"];
                    };
                    readonly nationality: {
                        readonly type: "string";
                        readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                        readonly examples: readonly ["ES"];
                    };
                    readonly address_line_1: {
                        readonly type: "string";
                        readonly description: "address line 1 of the employee.";
                        readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                    };
                    readonly address_line_2: {
                        readonly type: "string";
                        readonly description: "address line 1 of the employee.";
                        readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly description: "postal code of the employee.";
                        readonly examples: readonly [27004];
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "city of the employee.";
                        readonly examples: readonly ["Santander"];
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly description: "state/province/region of the employee.";
                        readonly examples: readonly ["Cataluña"];
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly description: "country code of the employee (Spain ES, United Kingdom GB).";
                        readonly examples: readonly ["ES"];
                    };
                    readonly bank_number: {
                        readonly type: "string";
                        readonly description: "bank account number of the employee.";
                        readonly examples: readonly ["ES6220809324751871912999"];
                    };
                    readonly job_title: {
                        readonly type: "string";
                        readonly description: "job title of the employee.";
                        readonly examples: readonly ["Software Engineer"];
                    };
                    readonly workplace_id: {
                        readonly type: "integer";
                        readonly description: "workplace id of the employee.";
                        readonly examples: readonly [1];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesEmployeeUpdatesPersonalChangesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "status", "employee_id", "first_name", "last_name"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "The id of the new hire incidence";
                    readonly examples: readonly [1];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The status of the new hire incidence";
                    readonly examples: readonly ["done"];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "The employee id of the new hire";
                    readonly examples: readonly [1];
                };
                readonly work_email: {
                    readonly type: "string";
                    readonly description: "personal email of the employee.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly phone_number: {
                    readonly type: "string";
                    readonly description: "phone number of the employee.";
                    readonly examples: readonly [123456789];
                };
                readonly identifier_type: {
                    readonly type: "string";
                    readonly description: "type of identifier (ex passport).";
                    readonly examples: readonly ["passport"];
                };
                readonly identifier: {
                    readonly type: "string";
                    readonly description: "national identifier number.";
                    readonly examples: readonly ["QKG587532Y"];
                };
                readonly social_security_number: {
                    readonly type: "string";
                    readonly description: "social security number of the employee.";
                    readonly examples: readonly [238038194000];
                };
                readonly tax_id: {
                    readonly type: "string";
                };
                readonly first_name: {
                    readonly type: "string";
                    readonly description: "name of the employee.";
                    readonly examples: readonly ["Ana"];
                };
                readonly last_name: {
                    readonly type: "string";
                    readonly description: "last name of the employee.";
                    readonly examples: readonly ["Blanco Perez"];
                };
                readonly gender: {
                    readonly type: "string";
                    readonly description: "gender of the employee (male | female).";
                    readonly examples: readonly ["female"];
                };
                readonly date_of_birth: {
                    readonly type: "string";
                    readonly description: "birthday of the employee.";
                    readonly examples: readonly ["1990-06-06"];
                };
                readonly nationality: {
                    readonly type: "string";
                    readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly address_line_1: {
                    readonly type: "string";
                    readonly description: "address line 1 of the employee.";
                    readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                };
                readonly address_line_2: {
                    readonly type: "string";
                    readonly description: "address line 1 of the employee.";
                    readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                };
                readonly postal_code: {
                    readonly type: "string";
                    readonly description: "postal code of the employee.";
                    readonly examples: readonly [27004];
                };
                readonly city: {
                    readonly type: "string";
                    readonly description: "city of the employee.";
                    readonly examples: readonly ["Santander"];
                };
                readonly state: {
                    readonly type: "string";
                    readonly description: "state/province/region of the employee.";
                    readonly examples: readonly ["Cataluña"];
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly bank_number: {
                    readonly type: "string";
                    readonly description: "bank account number of the employee.";
                    readonly examples: readonly ["ES6220809324751871912999"];
                };
                readonly job_title: {
                    readonly type: "string";
                    readonly description: "job title of the employee.";
                    readonly examples: readonly ["Software Engineer"];
                };
                readonly workplace_id: {
                    readonly type: "integer";
                    readonly description: "workplace id of the employee.";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesEmployeeUpdatesSummaries: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "retrieve only the `employee updates` that matches the `ids` passed in the request.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly description: "retrieve only the `employee updates` assigned to any `employee` specified in the request.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "legal_entities_ids[]": {
                    readonly type: "array";
                    readonly description: "retrieve only the `employee updates` assigned to any `legal entity` specified in the request.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "type[]": {
                    readonly type: "array";
                    readonly description: "filter `employee updates` that have the given type. The supported types are: sick, parental, name, id, address, irpf, bank, residence, nationality, gender, hiring, custom-leave, termination, contract, workplace, manual_incidence, legal_entity";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["sick"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly starts_on: {
                    readonly type: "string";
                    readonly description: "filter `employee updates` that started **later** the given param.";
                    readonly examples: readonly ["2024-06-06"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly ends_on: {
                    readonly type: "string";
                    readonly description: "filter `employee updates` that started **before** the given param.";
                    readonly examples: readonly ["2024-06-06"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "legal_entity_id", "status", "type", "created_at"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly legal_entity_id: {
                        readonly type: "integer";
                    };
                    readonly status: {
                        readonly type: "string";
                    };
                    readonly type: {
                        readonly type: "string";
                    };
                    readonly starts_on: {
                        readonly type: "string";
                    };
                    readonly ends_on: {
                        readonly type: "string";
                    };
                    readonly created_at: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesEmployeeUpdatesSummariesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "legal_entity_id", "status", "type", "created_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly type: {
                    readonly type: "string";
                };
                readonly starts_on: {
                    readonly type: "string";
                };
                readonly ends_on: {
                    readonly type: "string";
                };
                readonly created_at: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesEmployeeUpdatesTerminations: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "filter by termination incidence ids.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "status", "employee_id", "remaining_holidays"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly status: {
                        readonly type: "string";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly terminated_on: {
                        readonly type: "string";
                    };
                    readonly termination_reason: {
                        readonly type: "string";
                    };
                    readonly termination_observations: {
                        readonly type: "string";
                    };
                    readonly legal_entity_id: {
                        readonly type: "integer";
                    };
                    readonly remaining_holidays: {
                        readonly type: "array";
                        readonly items: {};
                    };
                    readonly termination_reason_type: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesEmployeeUpdatesTerminationsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "status", "employee_id", "remaining_holidays"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly terminated_on: {
                    readonly type: "string";
                };
                readonly termination_reason: {
                    readonly type: "string";
                };
                readonly termination_observations: {
                    readonly type: "string";
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                };
                readonly remaining_holidays: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly termination_reason_type: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesEmployeesEmployees: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "filter by employee ids.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "access_ids[]": {
                    readonly type: "array";
                    readonly description: "filter by employee access ids.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "emails[]": {
                    readonly type: "array";
                    readonly description: "filter by employee emails.";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["ana@factorial.com", "john@factorial.com"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly full_text_name: {
                    readonly type: "string";
                    readonly description: "filter by employee name.";
                    readonly examples: readonly ["Ana Lopez Perez"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "legal_entity_ids[]": {
                    readonly type: "array";
                    readonly description: "filter by legal entity id (refereces to companies/legal_entities).";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly only_active: {
                    readonly type: "boolean";
                    readonly description: "get only active employees";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "team_ids[]": {
                    readonly type: "array";
                    readonly description: "filter employees by team id (references to core/teams).";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "location_ids[]": {
                    readonly type: "array";
                    readonly description: "filter employees by location id (references to locations/location).";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly only_managers: {
                    readonly type: "boolean";
                    readonly description: "get only manager employees.";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly name_starts_with: {
                    readonly type: "string";
                    readonly description: "filter by employee names that start with the given text.";
                    readonly examples: readonly ["Ana"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["only_active", "only_managers"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "access_id", "first_name", "last_name", "full_name", "company_id", "created_at", "updated_at", "is_terminating"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "id of the employee.";
                        readonly examples: readonly [1];
                    };
                    readonly access_id: {
                        readonly type: "integer";
                        readonly description: "access_id associated to the employee.";
                        readonly examples: readonly [1];
                    };
                    readonly first_name: {
                        readonly type: "string";
                        readonly description: "name of the employee.";
                        readonly examples: readonly ["Ana"];
                    };
                    readonly last_name: {
                        readonly type: "string";
                        readonly description: "last name of the employee.";
                        readonly examples: readonly ["Blanco Perez"];
                    };
                    readonly full_name: {
                        readonly type: "string";
                        readonly description: "full name of the employee.";
                        readonly examples: readonly ["Ana Blanco Perez"];
                    };
                    readonly preferred_name: {
                        readonly type: "string";
                        readonly description: "nickname of the employee or a name that defines the employee better.";
                        readonly examples: readonly ["Anita"];
                    };
                    readonly birth_name: {
                        readonly type: "string";
                        readonly description: "Birthname of the employee.";
                        readonly examples: readonly ["Anna"];
                    };
                    readonly gender: {
                        readonly type: "string";
                        readonly description: "gender of the employee (male | female).";
                        readonly examples: readonly ["female"];
                    };
                    readonly identifier: {
                        readonly type: "string";
                        readonly description: "national identifier number.";
                        readonly examples: readonly ["QKG587532Y"];
                    };
                    readonly identifier_type: {
                        readonly type: "string";
                        readonly description: "type of identifier (ex passport).";
                        readonly examples: readonly ["passport"];
                    };
                    readonly email: {
                        readonly type: "string";
                        readonly description: "personal email of the employee.";
                        readonly examples: readonly ["ana@factorial.com"];
                    };
                    readonly login_email: {
                        readonly type: "string";
                        readonly description: "email associated to the session.";
                        readonly examples: readonly ["ana@factorial.com"];
                    };
                    readonly birthday_on: {
                        readonly type: "string";
                        readonly description: "birthday of the employee.";
                        readonly examples: readonly ["1990-06-06"];
                    };
                    readonly nationality: {
                        readonly type: "string";
                        readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                        readonly examples: readonly ["ES"];
                    };
                    readonly address_line_1: {
                        readonly type: "string";
                        readonly description: "address of the employee.";
                        readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                    };
                    readonly address_line_2: {
                        readonly type: "string";
                        readonly description: "secondary address of the employee.";
                        readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly description: "postal code of the employee.";
                        readonly examples: readonly [27004];
                    };
                    readonly city: {
                        readonly type: "string";
                        readonly description: "city of the employee.";
                        readonly examples: readonly ["Santander"];
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly description: "state/province/region of the employee.";
                        readonly examples: readonly ["Cantabria"];
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly description: "country code of the employee (Spain ES, United Kingdom GB).";
                        readonly examples: readonly ["ES"];
                    };
                    readonly bank_number: {
                        readonly type: "string";
                        readonly description: "bank account number of the employee.";
                        readonly examples: readonly ["ES6220809324751871912999"];
                    };
                    readonly swift_bic: {
                        readonly type: "string";
                        readonly description: "code to identify banks and financial institutions globally.";
                        readonly examples: readonly ["CAGLES2M510"];
                    };
                    readonly bank_number_format: {
                        readonly type: "string";
                        readonly description: "bank number format.\n\n`iban` `sort_code_and_account_number` `routing_number_and_account_number` `clabe` `other` `bank_name_and_account_number`";
                        readonly enum: readonly ["iban", "sort_code_and_account_number", "routing_number_and_account_number", "clabe", "other", "bank_name_and_account_number"];
                        readonly examples: readonly ["iban"];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "id of the company to which the employee belongs (not editable).";
                        readonly examples: readonly [1];
                    };
                    readonly legal_entity_id: {
                        readonly type: "integer";
                        readonly description: "legal entity of the employee, references to companies/legal_entities.";
                        readonly examples: readonly [1];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "creation date of the employee.";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly updated_at: {
                        readonly type: "string";
                        readonly description: "date of last modification of the employee";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly social_security_number: {
                        readonly type: "string";
                        readonly description: "social security number of the employee.";
                        readonly examples: readonly [238038194000];
                    };
                    readonly is_terminating: {
                        readonly type: "boolean";
                        readonly description: "is the employee being terminated?";
                    };
                    readonly terminated_on: {
                        readonly type: "string";
                        readonly description: "termination date of the employee.";
                        readonly examples: readonly ["2024-10-06"];
                    };
                    readonly termination_reason: {
                        readonly type: "string";
                        readonly description: "A reason for the termination.";
                        readonly examples: readonly ["The employee has left the company"];
                    };
                    readonly termination_observations: {
                        readonly type: "string";
                        readonly description: "observations about the termination.";
                        readonly examples: readonly ["Ana has been working on this project before she left"];
                    };
                    readonly manager_id: {
                        readonly type: "integer";
                        readonly description: "manager id of the employee, you can get the manager id from employees endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly timeoff_manager_id: {
                        readonly type: "integer";
                        readonly description: "Timeoff manager id of the employee.";
                        readonly examples: readonly [1];
                    };
                    readonly phone_number: {
                        readonly type: "string";
                        readonly description: "phone number of the employee.";
                        readonly examples: readonly [657483987];
                    };
                    readonly company_identifier: {
                        readonly type: "string";
                        readonly description: "identity number or string used inside a company to internally identify the employee.";
                        readonly examples: readonly ["bb9d281e"];
                    };
                    readonly age_number: {
                        readonly type: "integer";
                        readonly description: "age of the employee.";
                        readonly examples: readonly [30];
                    };
                    readonly contact_name: {
                        readonly type: "string";
                        readonly description: "name of the employee contact.";
                        readonly examples: readonly ["Laura Delgado"];
                    };
                    readonly contact_number: {
                        readonly type: "string";
                        readonly description: "phone number of the employee contact .";
                        readonly examples: readonly [647384950];
                    };
                    readonly personal_email: {
                        readonly type: "string";
                        readonly description: "personal email of the employee.";
                        readonly examples: readonly ["ana@factorial.com"];
                    };
                    readonly pronouns: {
                        readonly type: "string";
                        readonly description: "pronouns that an employee uses to define themselves.";
                        readonly examples: readonly ["She/Her"];
                    };
                    readonly active: {
                        readonly type: "boolean";
                        readonly description: "status of the employee, true when active, false when terminated.";
                        readonly examples: readonly [true];
                    };
                    readonly disability_percentage_cents: {
                        readonly type: "integer";
                        readonly description: "officially certified level of disability granted by public administration for individuals with physical or mental impairments, expressed in cents";
                        readonly examples: readonly [1200];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesEmployeesEmployeesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "access_id", "first_name", "last_name", "full_name", "company_id", "created_at", "updated_at", "is_terminating"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "id of the employee.";
                    readonly examples: readonly [1];
                };
                readonly access_id: {
                    readonly type: "integer";
                    readonly description: "access_id associated to the employee.";
                    readonly examples: readonly [1];
                };
                readonly first_name: {
                    readonly type: "string";
                    readonly description: "name of the employee.";
                    readonly examples: readonly ["Ana"];
                };
                readonly last_name: {
                    readonly type: "string";
                    readonly description: "last name of the employee.";
                    readonly examples: readonly ["Blanco Perez"];
                };
                readonly full_name: {
                    readonly type: "string";
                    readonly description: "full name of the employee.";
                    readonly examples: readonly ["Ana Blanco Perez"];
                };
                readonly preferred_name: {
                    readonly type: "string";
                    readonly description: "nickname of the employee or a name that defines the employee better.";
                    readonly examples: readonly ["Anita"];
                };
                readonly birth_name: {
                    readonly type: "string";
                    readonly description: "Birthname of the employee.";
                    readonly examples: readonly ["Anna"];
                };
                readonly gender: {
                    readonly type: "string";
                    readonly description: "gender of the employee (male | female).";
                    readonly examples: readonly ["female"];
                };
                readonly identifier: {
                    readonly type: "string";
                    readonly description: "national identifier number.";
                    readonly examples: readonly ["QKG587532Y"];
                };
                readonly identifier_type: {
                    readonly type: "string";
                    readonly description: "type of identifier (ex passport).";
                    readonly examples: readonly ["passport"];
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "personal email of the employee.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly login_email: {
                    readonly type: "string";
                    readonly description: "email associated to the session.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly birthday_on: {
                    readonly type: "string";
                    readonly description: "birthday of the employee.";
                    readonly examples: readonly ["1990-06-06"];
                };
                readonly nationality: {
                    readonly type: "string";
                    readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly address_line_1: {
                    readonly type: "string";
                    readonly description: "address of the employee.";
                    readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                };
                readonly address_line_2: {
                    readonly type: "string";
                    readonly description: "secondary address of the employee.";
                    readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                };
                readonly postal_code: {
                    readonly type: "string";
                    readonly description: "postal code of the employee.";
                    readonly examples: readonly [27004];
                };
                readonly city: {
                    readonly type: "string";
                    readonly description: "city of the employee.";
                    readonly examples: readonly ["Santander"];
                };
                readonly state: {
                    readonly type: "string";
                    readonly description: "state/province/region of the employee.";
                    readonly examples: readonly ["Cantabria"];
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly bank_number: {
                    readonly type: "string";
                    readonly description: "bank account number of the employee.";
                    readonly examples: readonly ["ES6220809324751871912999"];
                };
                readonly swift_bic: {
                    readonly type: "string";
                    readonly description: "code to identify banks and financial institutions globally.";
                    readonly examples: readonly ["CAGLES2M510"];
                };
                readonly bank_number_format: {
                    readonly type: "string";
                    readonly description: "bank number format.\n\n`iban` `sort_code_and_account_number` `routing_number_and_account_number` `clabe` `other` `bank_name_and_account_number`";
                    readonly enum: readonly ["iban", "sort_code_and_account_number", "routing_number_and_account_number", "clabe", "other", "bank_name_and_account_number"];
                    readonly examples: readonly ["iban"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "id of the company to which the employee belongs (not editable).";
                    readonly examples: readonly [1];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "legal entity of the employee, references to companies/legal_entities.";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "creation date of the employee.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "date of last modification of the employee";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly social_security_number: {
                    readonly type: "string";
                    readonly description: "social security number of the employee.";
                    readonly examples: readonly [238038194000];
                };
                readonly is_terminating: {
                    readonly type: "boolean";
                    readonly description: "is the employee being terminated?";
                };
                readonly terminated_on: {
                    readonly type: "string";
                    readonly description: "termination date of the employee.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly termination_reason: {
                    readonly type: "string";
                    readonly description: "A reason for the termination.";
                    readonly examples: readonly ["The employee has left the company"];
                };
                readonly termination_observations: {
                    readonly type: "string";
                    readonly description: "observations about the termination.";
                    readonly examples: readonly ["Ana has been working on this project before she left"];
                };
                readonly manager_id: {
                    readonly type: "integer";
                    readonly description: "manager id of the employee, you can get the manager id from employees endpoint.";
                    readonly examples: readonly [1];
                };
                readonly timeoff_manager_id: {
                    readonly type: "integer";
                    readonly description: "Timeoff manager id of the employee.";
                    readonly examples: readonly [1];
                };
                readonly phone_number: {
                    readonly type: "string";
                    readonly description: "phone number of the employee.";
                    readonly examples: readonly [657483987];
                };
                readonly company_identifier: {
                    readonly type: "string";
                    readonly description: "identity number or string used inside a company to internally identify the employee.";
                    readonly examples: readonly ["bb9d281e"];
                };
                readonly age_number: {
                    readonly type: "integer";
                    readonly description: "age of the employee.";
                    readonly examples: readonly [30];
                };
                readonly contact_name: {
                    readonly type: "string";
                    readonly description: "name of the employee contact.";
                    readonly examples: readonly ["Laura Delgado"];
                };
                readonly contact_number: {
                    readonly type: "string";
                    readonly description: "phone number of the employee contact .";
                    readonly examples: readonly [647384950];
                };
                readonly personal_email: {
                    readonly type: "string";
                    readonly description: "personal email of the employee.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly pronouns: {
                    readonly type: "string";
                    readonly description: "pronouns that an employee uses to define themselves.";
                    readonly examples: readonly ["She/Her"];
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "status of the employee, true when active, false when terminated.";
                    readonly examples: readonly [true];
                };
                readonly disability_percentage_cents: {
                    readonly type: "integer";
                    readonly description: "officially certified level of disability granted by public administration for individuals with physical or mental impairments, expressed in cents";
                    readonly examples: readonly [1200];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesExpensesExpensables: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "group_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "by_resources[]": {
                    readonly type: "array";
                    readonly items: {};
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "reporter_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "status[]": {
                    readonly type: "array";
                    readonly enum: readonly ["pending", "approved", "paid", "archived", "inreview", "rejected", "reversed", "draft", "in_payroll", "sent_to_pay"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "creation_type[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly from: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly to: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly search: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_grouped: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_attachments: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_manual_drafts: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["include_grouped", "include_attachments", "include_manual_drafts"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "type", "company_id", "employee_id", "currency", "status", "status_updated_at", "updated_at"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Unique identifier for the expensable";
                        readonly examples: readonly [1];
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Type of the expensable. Can be either \"expense\" or \"mileage\" or \"perdiem\"\n\n`expense` `mileage` `perdiem`";
                        readonly enum: readonly ["expense", "mileage", "perdiem"];
                        readonly examples: readonly ["mileage"];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "The ID of the company that owns the expensable";
                        readonly examples: readonly [1];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "The ID of the employee that owns the expensable";
                        readonly examples: readonly [1];
                    };
                    readonly group_id: {
                        readonly type: "integer";
                        readonly description: "The optional ID of the group that the expensable belongs to";
                        readonly examples: readonly [1];
                    };
                    readonly amount: {
                        readonly type: "integer";
                        readonly description: "The optional amount in cents";
                        readonly examples: readonly [1000];
                    };
                    readonly currency: {
                        readonly type: "string";
                        readonly description: "The currency code in ISO 4217 format";
                        readonly examples: readonly ["EUR"];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "The status of the expensable. Can be pending, approved, paid, archived, in_review, rejected, reversed, draft, or in_payroll\n\n`pending` `approved` `paid` `archived` `inreview` `rejected` `reversed` `draft` `in_payroll` `sent_to_pay`";
                        readonly enum: readonly ["pending", "approved", "paid", "archived", "inreview", "rejected", "reversed", "draft", "in_payroll", "sent_to_pay"];
                        readonly examples: readonly ["approved"];
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "The optional description of the expensable";
                        readonly examples: readonly ["Dinner with clients"];
                    };
                    readonly reporter_id: {
                        readonly type: "integer";
                        readonly description: "The optional ID of the employee that reported the expensable";
                        readonly examples: readonly [1];
                    };
                    readonly status_updated_at: {
                        readonly type: "string";
                        readonly description: "The optional date and time when the status was last updated";
                        readonly examples: readonly ["2024-06-06T12:00:00Z"];
                    };
                    readonly effective_on: {
                        readonly type: "string";
                        readonly description: "The optional date and time when the expensable was effective";
                        readonly examples: readonly ["2024-06-06T12:00:00Z"];
                    };
                    readonly review_request_at: {
                        readonly type: "string";
                        readonly description: "The optional date and time when the expensable was requested for review";
                        readonly examples: readonly ["2024-06-06T12:00:00Z"];
                    };
                    readonly paid_at: {
                        readonly type: "string";
                        readonly description: "The optional date and time when the expensable was set as paid";
                        readonly examples: readonly ["2024-06-06T12:00:00Z"];
                    };
                    readonly updated_at: {
                        readonly type: "string";
                        readonly description: "The date and time when the expensable was last updated";
                        readonly examples: readonly ["2024-06-06T12:00:00Z"];
                    };
                    readonly reimbursable_amount: {
                        readonly type: "integer";
                        readonly description: "The optional reimbursable amount in cents";
                        readonly examples: readonly [1000];
                    };
                    readonly reimbursable_currency: {
                        readonly type: "string";
                        readonly description: "The optional reimbursable currency code in ISO 4217 format";
                        readonly examples: readonly ["EUR"];
                    };
                    readonly expense_id: {
                        readonly type: "integer";
                        readonly description: "The optional ID of the expense that the expensable belongs to";
                        readonly examples: readonly [1];
                    };
                    readonly mileage_id: {
                        readonly type: "integer";
                        readonly description: "The optional ID of the mileage that the expensable belongs to";
                        readonly examples: readonly [1];
                    };
                    readonly per_diem_id: {
                        readonly type: "integer";
                        readonly description: "The optional ID of the per_diem that the expensable belongs to";
                        readonly examples: readonly [1];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesExpensesExpensablesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "type", "company_id", "employee_id", "currency", "status", "status_updated_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the expensable";
                    readonly examples: readonly [1];
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the expensable. Can be either \"expense\" or \"mileage\" or \"perdiem\"\n\n`expense` `mileage` `perdiem`";
                    readonly enum: readonly ["expense", "mileage", "perdiem"];
                    readonly examples: readonly ["mileage"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "The ID of the company that owns the expensable";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "The ID of the employee that owns the expensable";
                    readonly examples: readonly [1];
                };
                readonly group_id: {
                    readonly type: "integer";
                    readonly description: "The optional ID of the group that the expensable belongs to";
                    readonly examples: readonly [1];
                };
                readonly amount: {
                    readonly type: "integer";
                    readonly description: "The optional amount in cents";
                    readonly examples: readonly [1000];
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "The currency code in ISO 4217 format";
                    readonly examples: readonly ["EUR"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The status of the expensable. Can be pending, approved, paid, archived, in_review, rejected, reversed, draft, or in_payroll\n\n`pending` `approved` `paid` `archived` `inreview` `rejected` `reversed` `draft` `in_payroll` `sent_to_pay`";
                    readonly enum: readonly ["pending", "approved", "paid", "archived", "inreview", "rejected", "reversed", "draft", "in_payroll", "sent_to_pay"];
                    readonly examples: readonly ["approved"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The optional description of the expensable";
                    readonly examples: readonly ["Dinner with clients"];
                };
                readonly reporter_id: {
                    readonly type: "integer";
                    readonly description: "The optional ID of the employee that reported the expensable";
                    readonly examples: readonly [1];
                };
                readonly status_updated_at: {
                    readonly type: "string";
                    readonly description: "The optional date and time when the status was last updated";
                    readonly examples: readonly ["2024-06-06T12:00:00Z"];
                };
                readonly effective_on: {
                    readonly type: "string";
                    readonly description: "The optional date and time when the expensable was effective";
                    readonly examples: readonly ["2024-06-06T12:00:00Z"];
                };
                readonly review_request_at: {
                    readonly type: "string";
                    readonly description: "The optional date and time when the expensable was requested for review";
                    readonly examples: readonly ["2024-06-06T12:00:00Z"];
                };
                readonly paid_at: {
                    readonly type: "string";
                    readonly description: "The optional date and time when the expensable was set as paid";
                    readonly examples: readonly ["2024-06-06T12:00:00Z"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "The date and time when the expensable was last updated";
                    readonly examples: readonly ["2024-06-06T12:00:00Z"];
                };
                readonly reimbursable_amount: {
                    readonly type: "integer";
                    readonly description: "The optional reimbursable amount in cents";
                    readonly examples: readonly [1000];
                };
                readonly reimbursable_currency: {
                    readonly type: "string";
                    readonly description: "The optional reimbursable currency code in ISO 4217 format";
                    readonly examples: readonly ["EUR"];
                };
                readonly expense_id: {
                    readonly type: "integer";
                    readonly description: "The optional ID of the expense that the expensable belongs to";
                    readonly examples: readonly [1];
                };
                readonly mileage_id: {
                    readonly type: "integer";
                    readonly description: "The optional ID of the mileage that the expensable belongs to";
                    readonly examples: readonly [1];
                };
                readonly per_diem_id: {
                    readonly type: "integer";
                    readonly description: "The optional ID of the per_diem that the expensable belongs to";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesExpensesExpenses: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "expenses_expensable_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_manual_drafts: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "external_authorization_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "card_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "card_payment_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_attachments: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly from: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly to: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "dispute_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["include_manual_drafts", "include_attachments"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["company_id", "creation_type", "currency", "status", "effective_on", "status_updated_at", "files", "taxes"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly company_id: {
                        readonly type: "integer";
                    };
                    readonly card_payment_id: {
                        readonly type: "integer";
                    };
                    readonly dispute_id: {
                        readonly type: "integer";
                    };
                    readonly expenses_expensable_id: {
                        readonly type: "integer";
                    };
                    readonly merchant_name: {
                        readonly type: "string";
                    };
                    readonly user_merchant: {
                        readonly type: "string";
                    };
                    readonly merchant_tin: {
                        readonly type: "string";
                    };
                    readonly category: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly subcategory: {
                        readonly type: "string";
                    };
                    readonly creation_type: {
                        readonly type: "string";
                        readonly enum: readonly ["manual", "automatic", "travelperk"];
                        readonly description: "`manual` `automatic` `travelperk`";
                    };
                    readonly reference: {
                        readonly type: "string";
                    };
                    readonly amount: {
                        readonly type: "integer";
                        readonly description: "The optional amount in cents";
                        readonly examples: readonly [1000];
                    };
                    readonly currency: {
                        readonly type: "string";
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly enum: readonly ["pending", "approved", "paid", "archived", "inreview", "rejected", "reversed", "draft", "in_payroll", "sent_to_pay"];
                        readonly description: "`pending` `approved` `paid` `archived` `inreview` `rejected` `reversed` `draft` `in_payroll` `sent_to_pay`";
                    };
                    readonly description: {
                        readonly type: "string";
                    };
                    readonly effective_on: {
                        readonly type: "string";
                    };
                    readonly review_request_at: {
                        readonly type: "string";
                    };
                    readonly status_updated_at: {
                        readonly type: "string";
                    };
                    readonly files: {
                        readonly type: "array";
                        readonly items: {};
                    };
                    readonly external_authorization_id: {
                        readonly type: "string";
                    };
                    readonly expenses_card_id: {
                        readonly type: "integer";
                    };
                    readonly card: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly document_id: {
                        readonly type: "integer";
                    };
                    readonly signed_document: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly access_token: {
                        readonly type: "string";
                    };
                    readonly paid_at: {
                        readonly type: "string";
                    };
                    readonly document_number: {
                        readonly type: "string";
                    };
                    readonly document_type: {
                        readonly type: "string";
                    };
                    readonly payment: {
                        readonly type: "string";
                        readonly enum: readonly ["reimbursable", "not_reimbursable"];
                        readonly description: "`reimbursable` `not_reimbursable`";
                    };
                    readonly payment_method: {
                        readonly type: "string";
                    };
                    readonly exchange_rate: {
                        readonly type: "number";
                    };
                    readonly reimbursable_currency: {
                        readonly type: "string";
                    };
                    readonly reimbursable_amount: {
                        readonly type: "integer";
                        readonly description: "The optional reimbursable amount in cents";
                        readonly examples: readonly [1000];
                    };
                    readonly taxes: {
                        readonly type: "array";
                        readonly items: {};
                    };
                    readonly category_id: {
                        readonly type: "integer";
                    };
                    readonly ledger_account_id: {
                        readonly type: "integer";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesExpensesExpensesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["company_id", "creation_type", "currency", "status", "effective_on", "status_updated_at", "files", "taxes"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly card_payment_id: {
                    readonly type: "integer";
                };
                readonly dispute_id: {
                    readonly type: "integer";
                };
                readonly expenses_expensable_id: {
                    readonly type: "integer";
                };
                readonly merchant_name: {
                    readonly type: "string";
                };
                readonly user_merchant: {
                    readonly type: "string";
                };
                readonly merchant_tin: {
                    readonly type: "string";
                };
                readonly category: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly subcategory: {
                    readonly type: "string";
                };
                readonly creation_type: {
                    readonly type: "string";
                    readonly enum: readonly ["manual", "automatic", "travelperk"];
                    readonly description: "`manual` `automatic` `travelperk`";
                };
                readonly reference: {
                    readonly type: "string";
                };
                readonly amount: {
                    readonly type: "integer";
                    readonly description: "The optional amount in cents";
                    readonly examples: readonly [1000];
                };
                readonly currency: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["pending", "approved", "paid", "archived", "inreview", "rejected", "reversed", "draft", "in_payroll", "sent_to_pay"];
                    readonly description: "`pending` `approved` `paid` `archived` `inreview` `rejected` `reversed` `draft` `in_payroll` `sent_to_pay`";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly effective_on: {
                    readonly type: "string";
                };
                readonly review_request_at: {
                    readonly type: "string";
                };
                readonly status_updated_at: {
                    readonly type: "string";
                };
                readonly files: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly external_authorization_id: {
                    readonly type: "string";
                };
                readonly expenses_card_id: {
                    readonly type: "integer";
                };
                readonly card: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly document_id: {
                    readonly type: "integer";
                };
                readonly signed_document: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly access_token: {
                    readonly type: "string";
                };
                readonly paid_at: {
                    readonly type: "string";
                };
                readonly document_number: {
                    readonly type: "string";
                };
                readonly document_type: {
                    readonly type: "string";
                };
                readonly payment: {
                    readonly type: "string";
                    readonly enum: readonly ["reimbursable", "not_reimbursable"];
                    readonly description: "`reimbursable` `not_reimbursable`";
                };
                readonly payment_method: {
                    readonly type: "string";
                };
                readonly exchange_rate: {
                    readonly type: "number";
                };
                readonly reimbursable_currency: {
                    readonly type: "string";
                };
                readonly reimbursable_amount: {
                    readonly type: "integer";
                    readonly description: "The optional reimbursable amount in cents";
                    readonly examples: readonly [1000];
                };
                readonly taxes: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly category_id: {
                    readonly type: "integer";
                };
                readonly ledger_account_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesExpensesMileages: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "expenses_expensable_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_manual_drafts: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "external_authorization_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "card_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "card_payment_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_attachments: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly from: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly to: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "dispute_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["include_manual_drafts", "include_attachments"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "company_id", "currency", "status", "files", "payment"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly company_id: {
                        readonly type: "integer";
                    };
                    readonly expenses_expensable_id: {
                        readonly type: "integer";
                    };
                    readonly category: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly subcategory: {
                        readonly type: "string";
                    };
                    readonly category_id: {
                        readonly type: "integer";
                    };
                    readonly amount: {
                        readonly type: "integer";
                    };
                    readonly currency: {
                        readonly type: "string";
                    };
                    readonly status: {
                        readonly type: "string";
                    };
                    readonly mileage: {
                        readonly type: "integer";
                    };
                    readonly units: {
                        readonly type: "string";
                    };
                    readonly rate: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly from: {
                        readonly type: "string";
                    };
                    readonly to: {
                        readonly type: "string";
                    };
                    readonly description: {
                        readonly type: "string";
                    };
                    readonly effective_on: {
                        readonly type: "string";
                    };
                    readonly review_request_at: {
                        readonly type: "string";
                    };
                    readonly files: {
                        readonly type: "array";
                        readonly items: {};
                    };
                    readonly paid_at: {
                        readonly type: "string";
                    };
                    readonly payment: {
                        readonly type: "string";
                        readonly enum: readonly ["reimbursable", "not_reimbursable"];
                        readonly description: "`reimbursable` `not_reimbursable`";
                    };
                    readonly ledger_account_id: {
                        readonly type: "integer";
                    };
                    readonly round_trip: {
                        readonly type: "boolean";
                        readonly description: "Indicates if the mileage is a round trip";
                        readonly examples: readonly [true];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesExpensesMileagesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "currency", "status", "files", "payment"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly expenses_expensable_id: {
                    readonly type: "integer";
                };
                readonly category: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly subcategory: {
                    readonly type: "string";
                };
                readonly category_id: {
                    readonly type: "integer";
                };
                readonly amount: {
                    readonly type: "integer";
                };
                readonly currency: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly mileage: {
                    readonly type: "integer";
                };
                readonly units: {
                    readonly type: "string";
                };
                readonly rate: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly from: {
                    readonly type: "string";
                };
                readonly to: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly effective_on: {
                    readonly type: "string";
                };
                readonly review_request_at: {
                    readonly type: "string";
                };
                readonly files: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly paid_at: {
                    readonly type: "string";
                };
                readonly payment: {
                    readonly type: "string";
                    readonly enum: readonly ["reimbursable", "not_reimbursable"];
                    readonly description: "`reimbursable` `not_reimbursable`";
                };
                readonly ledger_account_id: {
                    readonly type: "integer";
                };
                readonly round_trip: {
                    readonly type: "boolean";
                    readonly description: "Indicates if the mileage is a round trip";
                    readonly examples: readonly [true];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesFinanceAccounts: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Search ledger accounts by ID";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [568];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "legal_entity_ids[]": {
                    readonly type: "array";
                    readonly description: "Search ledger accounts by legal_entity_id";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [23];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "types[]": {
                    readonly type: "array";
                    readonly description: "Search ledger accounts by type";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["bank"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly number: {
                    readonly type: "string";
                    readonly description: "Search ledger accounts by number";
                    readonly examples: readonly ["type"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "number", "disabled", "type"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Unique identifier in factorial for the ledger account";
                        readonly examples: readonly [1];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Name of the ledger account";
                        readonly examples: readonly ["Bank account"];
                    };
                    readonly legal_entity_id: {
                        readonly type: "integer";
                        readonly description: "Legal entity ID of the ledger account";
                        readonly examples: readonly [1];
                    };
                    readonly number: {
                        readonly type: "string";
                        readonly description: "Number of the ledger account";
                        readonly examples: readonly ["1000"];
                    };
                    readonly disabled: {
                        readonly type: "boolean";
                        readonly description: "Whether the ledger account is disabled";
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Type of the ledger account\n\n`equity` `non_current_asset` `current_asset` `bank` `non_current_liability` `current_liability` `expense` `income`";
                        readonly enum: readonly ["equity", "non_current_asset", "current_asset", "bank", "non_current_liability", "current_liability", "expense", "income"];
                        readonly examples: readonly ["bank"];
                    };
                    readonly external_id: {
                        readonly type: "string";
                        readonly description: "Id of the ledger account on the external system";
                        readonly examples: readonly ["123"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesFinanceAccountsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "number", "disabled", "type"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier in factorial for the ledger account";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the ledger account";
                    readonly examples: readonly ["Bank account"];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "Legal entity ID of the ledger account";
                    readonly examples: readonly [1];
                };
                readonly number: {
                    readonly type: "string";
                    readonly description: "Number of the ledger account";
                    readonly examples: readonly ["1000"];
                };
                readonly disabled: {
                    readonly type: "boolean";
                    readonly description: "Whether the ledger account is disabled";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the ledger account\n\n`equity` `non_current_asset` `current_asset` `bank` `non_current_liability` `current_liability` `expense` `income`";
                    readonly enum: readonly ["equity", "non_current_asset", "current_asset", "bank", "non_current_liability", "current_liability", "expense", "income"];
                    readonly examples: readonly ["bank"];
                };
                readonly external_id: {
                    readonly type: "string";
                    readonly description: "Id of the ledger account on the external system";
                    readonly examples: readonly ["123"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesFinanceCostCenterMemberships: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly cost_center_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly active_on: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "employee_id", "cost_center_id", "start_date", "percentage"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly cost_center_id: {
                        readonly type: "integer";
                    };
                    readonly start_date: {
                        readonly type: "string";
                    };
                    readonly end_date: {
                        readonly type: "string";
                    };
                    readonly percentage: {
                        readonly type: "number";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesFinanceCostCenters: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "legal_entity_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_actives_on_date: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly search: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "name", "company_id", "active_employees_count", "historical_employees_count", "status"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly company_id: {
                        readonly type: "integer";
                    };
                    readonly legal_entity_id: {
                        readonly type: "integer";
                    };
                    readonly code: {
                        readonly type: "string";
                    };
                    readonly description: {
                        readonly type: "string";
                    };
                    readonly active_employees_count: {
                        readonly type: "integer";
                    };
                    readonly historical_employees_count: {
                        readonly type: "integer";
                    };
                    readonly status: {
                        readonly type: "string";
                    };
                    readonly deactivation_date: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesFinanceCostCentersId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id", "active_employees_count", "historical_employees_count", "status"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                };
                readonly code: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly active_employees_count: {
                    readonly type: "integer";
                };
                readonly historical_employees_count: {
                    readonly type: "integer";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly deactivation_date: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesHolidaysCompanyHolidays: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Company holiday ids";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [56];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly location_id: {
                    readonly type: "integer";
                    readonly description: "Location id";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly team_id: {
                    readonly type: "integer";
                    readonly description: "Team id";
                    readonly examples: readonly [3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly start_at: {
                    readonly type: "string";
                    readonly description: "Start date";
                    readonly examples: readonly ["2024-01-05"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly end_at: {
                    readonly type: "string";
                    readonly description: "End date";
                    readonly examples: readonly ["2024-06-01"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "location_id", "date"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Company holiday id";
                        readonly examples: readonly [56];
                    };
                    readonly location_id: {
                        readonly type: "integer";
                        readonly description: "Related location id";
                        readonly examples: readonly [1];
                    };
                    readonly summary: {
                        readonly type: "string";
                        readonly description: "Company holiday summary";
                        readonly examples: readonly ["Christmas Day"];
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "Company holiday description";
                        readonly examples: readonly ["Christmas Day"];
                    };
                    readonly date: {
                        readonly type: "string";
                        readonly description: "Company holiday date";
                        readonly examples: readonly ["2024-12-25"];
                    };
                    readonly half_day: {
                        readonly type: "string";
                        readonly description: "If the company holiday is half-day and which part of the day\n\n`beginning_of_day` `end_of_day`";
                        readonly enum: readonly ["beginning_of_day", "end_of_day"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesHolidaysCompanyHolidaysId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "location_id", "date"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Company holiday id";
                    readonly examples: readonly [56];
                };
                readonly location_id: {
                    readonly type: "integer";
                    readonly description: "Related location id";
                    readonly examples: readonly [1];
                };
                readonly summary: {
                    readonly type: "string";
                    readonly description: "Company holiday summary";
                    readonly examples: readonly ["Christmas Day"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Company holiday description";
                    readonly examples: readonly ["Christmas Day"];
                };
                readonly date: {
                    readonly type: "string";
                    readonly description: "Company holiday date";
                    readonly examples: readonly ["2024-12-25"];
                };
                readonly half_day: {
                    readonly type: "string";
                    readonly description: "If the company holiday is half-day and which part of the day\n\n`beginning_of_day` `end_of_day`";
                    readonly enum: readonly ["beginning_of_day", "end_of_day"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesLocationsLocations: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "company_id", "name", "main"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly company_id: {
                        readonly type: "integer";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly timezone: {
                        readonly type: "string";
                    };
                    readonly country: {
                        readonly type: "string";
                    };
                    readonly state: {
                        readonly type: "string";
                    };
                    readonly city: {
                        readonly type: "string";
                    };
                    readonly address_line_1: {
                        readonly type: "string";
                    };
                    readonly address_line_2: {
                        readonly type: "string";
                    };
                    readonly postal_code: {
                        readonly type: "string";
                    };
                    readonly phone_number: {
                        readonly type: "string";
                    };
                    readonly main: {
                        readonly type: "boolean";
                    };
                    readonly latitude: {
                        readonly type: "number";
                    };
                    readonly longitude: {
                        readonly type: "number";
                    };
                    readonly radius: {
                        readonly type: "number";
                    };
                    readonly siret: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesLocationsLocationsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "name", "main"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly timezone: {
                    readonly type: "string";
                };
                readonly country: {
                    readonly type: "string";
                };
                readonly state: {
                    readonly type: "string";
                };
                readonly city: {
                    readonly type: "string";
                };
                readonly address_line_1: {
                    readonly type: "string";
                };
                readonly address_line_2: {
                    readonly type: "string";
                };
                readonly postal_code: {
                    readonly type: "string";
                };
                readonly phone_number: {
                    readonly type: "string";
                };
                readonly main: {
                    readonly type: "boolean";
                };
                readonly latitude: {
                    readonly type: "number";
                };
                readonly longitude: {
                    readonly type: "number";
                };
                readonly radius: {
                    readonly type: "number";
                };
                readonly siret: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesLocationsWorkAreas: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "location_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly only_non_archived: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["only_non_archived"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "location_id", "name"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly location_id: {
                        readonly type: "integer";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly archived_at: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesLocationsWorkAreasId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "location_id", "name"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly location_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly archived_at: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesMarketplaceInstallationSettings: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly company_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly integration_id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["company_id", "integration_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["leave_types", "additional_compensation_types", "file_numbers", "establishment_codes", "timeoff_allowance_code"];
                readonly properties: {
                    readonly leave_types: {
                        readonly type: "array";
                        readonly items: {};
                    };
                    readonly additional_compensation_types: {
                        readonly type: "array";
                        readonly items: {};
                    };
                    readonly file_numbers: {
                        readonly type: "array";
                        readonly items: {};
                    };
                    readonly establishment_codes: {
                        readonly type: "array";
                        readonly items: {};
                    };
                    readonly timeoff_allowance_code: {
                        readonly type: "array";
                        readonly items: {};
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesMarketplaceSettings: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly integration_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly access_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["integration_id", "company_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["integration_id", "title", "questions"];
                readonly properties: {
                    readonly integration_id: {
                        readonly type: "integer";
                    };
                    readonly title: {
                        readonly type: "string";
                    };
                    readonly description: {
                        readonly type: "string";
                    };
                    readonly questions: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPayrollEmployeesIdentifiers: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employees_ids[]": {
                    readonly type: "array";
                    readonly description: "filters by employee identifiers";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "legal_entities_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "filters by country code pt | it | de";
                    readonly enum: readonly ["pt", "de", "it"];
                    readonly examples: readonly ["it"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["country"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "employee_id", "country"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "payroll employee identifier";
                        readonly examples: readonly [1];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "identifier of the employee";
                        readonly examples: readonly [1];
                    };
                    readonly social_security_number: {
                        readonly type: "string";
                        readonly description: "social security number of the employee";
                        readonly examples: readonly [123456788];
                    };
                    readonly tax_id: {
                        readonly type: "string";
                        readonly description: "tax id of the employee";
                        readonly examples: readonly [123456789];
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly description: "country code of the employee pt | it | de\n\n`pt` `de` `it`";
                        readonly enum: readonly ["pt", "de", "it"];
                        readonly examples: readonly ["it"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPayrollEmployeesIdentifiersId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "country"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "payroll employee identifier";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "identifier of the employee";
                    readonly examples: readonly [1];
                };
                readonly social_security_number: {
                    readonly type: "string";
                    readonly description: "social security number of the employee";
                    readonly examples: readonly [123456788];
                };
                readonly tax_id: {
                    readonly type: "string";
                    readonly description: "tax id of the employee";
                    readonly examples: readonly [123456789];
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "country code of the employee pt | it | de\n\n`pt` `de` `it`";
                    readonly enum: readonly ["pt", "de", "it"];
                    readonly examples: readonly ["it"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPayrollFamilySituations: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly description: "employee ids.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "employee_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "ID of the family situation.";
                        readonly examples: readonly [1];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "Employee id of the family situation.";
                        readonly examples: readonly [5];
                    };
                    readonly civil_status: {
                        readonly type: "string";
                        readonly description: "Civil status of the employee.\n\n`single` `cohabitating` `divorced` `married` `unknown` `civil_partnership` `separated` `widow` `not_applicable`";
                        readonly enum: readonly ["single", "cohabitating", "divorced", "married", "unknown", "civil_partnership", "separated", "widow", "not_applicable"];
                        readonly examples: readonly ["married"];
                    };
                    readonly number_of_dependants: {
                        readonly type: "integer";
                        readonly description: "Number of dependants of the employee.";
                        readonly examples: readonly [2];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPayrollIntegrationsBaseCodes: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly code: {
                    readonly type: "string";
                    readonly description: "Code Value";
                    readonly examples: readonly ["COD-51"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "integrations[]": {
                    readonly type: "array";
                    readonly description: "Payroll Integration names";
                    readonly enum: readonly ["a3innuva", "a3nom", "paierh", "silae", "silae_api", "datev", "datev_api", "datev_lug_api", "zucchetti"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["a3innuva"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly codeable_id: {
                    readonly type: "integer";
                    readonly description: "Related object ID. Used together with codeable_type";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly codeable_type: {
                    readonly type: "string";
                    readonly description: "Related object type. Used together with codeable_id";
                    readonly examples: readonly ["Employee | Company | LegalEntity | Location"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["integrations[]"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "company_id", "code", "codeable_id", "codeable_type", "integration"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Code identifier";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "Company ID where the code belongs to";
                        readonly examples: readonly [2];
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly description: "Code value";
                        readonly examples: readonly ["COD-51"];
                    };
                    readonly codeable_id: {
                        readonly type: "integer";
                        readonly description: "Related object ID. Used together with codeable_type";
                        readonly examples: readonly [5];
                    };
                    readonly codeable_type: {
                        readonly type: "string";
                        readonly description: "Related object type. Used together with codeable_id";
                        readonly examples: readonly ["Employee | Company | LegalEntity | Location | TimeoffLeaveType"];
                    };
                    readonly integration: {
                        readonly type: "string";
                        readonly description: "Integration name\n\n`a3innuva` `a3nom` `paierh` `silae` `silae_api` `datev` `datev_api` `datev_lug_api` `zucchetti`";
                        readonly enum: readonly ["a3innuva", "a3nom", "paierh", "silae", "silae_api", "datev", "datev_api", "datev_lug_api", "zucchetti"];
                        readonly examples: readonly ["a3innuva"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPayrollSupplements: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly from: {
                    readonly type: "string";
                    readonly description: "Valid date following the format YYYY-MM-DD";
                    readonly examples: readonly ["2024-01-01"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly to: {
                    readonly type: "string";
                    readonly description: "Valid date following the format YYYY-MM-DD";
                    readonly examples: readonly ["2024-01-01"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly description: "The employee ids to retrieve";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "policy_period_ids[]": {
                    readonly type: "array";
                    readonly description: "The policy period ids to retrieve";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly compensation_id: {
                    readonly type: "integer";
                    readonly description: "The compensation id to retrieve";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "ids";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "legal_entity_ids[]": {
                    readonly type: "array";
                    readonly description: "The legal entities id to retrieve";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["policy_period_ids[]"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "employee_id", "company_id", "unit"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "The identifier of the supplement";
                        readonly examples: readonly [1];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "The identifier of the employee associated with the supplement";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "The identifier of the company associated with the supplement";
                        readonly examples: readonly [1];
                    };
                    readonly contracts_compensation_id: {
                        readonly type: "integer";
                        readonly description: "The contract compensation identifier associated with the supplement";
                        readonly examples: readonly [1];
                    };
                    readonly contracts_taxonomy_id: {
                        readonly type: "integer";
                        readonly description: "The taxonomy identifier associated with the supplement";
                        readonly examples: readonly [1];
                    };
                    readonly amount_in_cents: {
                        readonly type: "integer";
                        readonly description: "The amount of the supplement in cents";
                        readonly examples: readonly [10000];
                    };
                    readonly unit: {
                        readonly type: "string";
                        readonly description: "The unit of the supplement\n\n`money` `units` `time`";
                        readonly enum: readonly ["money", "units", "time"];
                        readonly examples: readonly ["hours"];
                    };
                    readonly effective_on: {
                        readonly type: "string";
                        readonly description: "The date on which the supplement becomes effective";
                        readonly examples: readonly ["2024-01-01"];
                    };
                    readonly created_at: {
                        readonly type: "boolean";
                        readonly description: "The created at date when the supplement was created";
                        readonly examples: readonly ["2024-01-01T12:00:00Z"];
                    };
                    readonly updated_at: {
                        readonly type: "boolean";
                        readonly description: "The last updated at date when the supplement was last updated";
                        readonly examples: readonly ["2024-01-05T12:00:00Z"];
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "The description of the supplement";
                        readonly examples: readonly ["Supplement for additional work hours"];
                    };
                    readonly payroll_policy_period_id: {
                        readonly type: "integer";
                        readonly description: "The payroll policy period identifier associated with the supplement";
                        readonly examples: readonly [23456];
                    };
                    readonly employee_observations: {
                        readonly type: "array";
                        readonly description: "Observations on the employee made by the admin or manager";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly examples: readonly ["Worked extra shifts", "Bonus for holiday work"];
                    };
                    readonly raw_minutes_in_cents: {
                        readonly type: "integer";
                        readonly description: "The raw value of minutes in cents associated with the supplement";
                        readonly examples: readonly [5000];
                    };
                    readonly minutes_in_cents: {
                        readonly type: "integer";
                        readonly description: "The value of minutes in cents after adjustments";
                        readonly examples: readonly [4800];
                    };
                    readonly equivalent_minutes_in_cents: {
                        readonly type: "integer";
                        readonly description: "The equivalent value of minutes in cents for payroll processing";
                        readonly examples: readonly [4600];
                    };
                    readonly currency: {
                        readonly type: "string";
                        readonly description: "The currency used for the supplement, typically in ISO 4217 format";
                        readonly examples: readonly ["USD"];
                    };
                    readonly legal_entity_id: {
                        readonly type: "integer";
                        readonly description: "The legal entity identifier associated with the supplement";
                        readonly examples: readonly [1];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPayrollSupplementsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "company_id", "unit"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "The identifier of the supplement";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "The identifier of the employee associated with the supplement";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "The identifier of the company associated with the supplement";
                    readonly examples: readonly [1];
                };
                readonly contracts_compensation_id: {
                    readonly type: "integer";
                    readonly description: "The contract compensation identifier associated with the supplement";
                    readonly examples: readonly [1];
                };
                readonly contracts_taxonomy_id: {
                    readonly type: "integer";
                    readonly description: "The taxonomy identifier associated with the supplement";
                    readonly examples: readonly [1];
                };
                readonly amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The amount of the supplement in cents";
                    readonly examples: readonly [10000];
                };
                readonly unit: {
                    readonly type: "string";
                    readonly description: "The unit of the supplement\n\n`money` `units` `time`";
                    readonly enum: readonly ["money", "units", "time"];
                    readonly examples: readonly ["hours"];
                };
                readonly effective_on: {
                    readonly type: "string";
                    readonly description: "The date on which the supplement becomes effective";
                    readonly examples: readonly ["2024-01-01"];
                };
                readonly created_at: {
                    readonly type: "boolean";
                    readonly description: "The created at date when the supplement was created";
                    readonly examples: readonly ["2024-01-01T12:00:00Z"];
                };
                readonly updated_at: {
                    readonly type: "boolean";
                    readonly description: "The last updated at date when the supplement was last updated";
                    readonly examples: readonly ["2024-01-05T12:00:00Z"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The description of the supplement";
                    readonly examples: readonly ["Supplement for additional work hours"];
                };
                readonly payroll_policy_period_id: {
                    readonly type: "integer";
                    readonly description: "The payroll policy period identifier associated with the supplement";
                    readonly examples: readonly [23456];
                };
                readonly employee_observations: {
                    readonly type: "array";
                    readonly description: "Observations on the employee made by the admin or manager";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["Worked extra shifts", "Bonus for holiday work"];
                };
                readonly raw_minutes_in_cents: {
                    readonly type: "integer";
                    readonly description: "The raw value of minutes in cents associated with the supplement";
                    readonly examples: readonly [5000];
                };
                readonly minutes_in_cents: {
                    readonly type: "integer";
                    readonly description: "The value of minutes in cents after adjustments";
                    readonly examples: readonly [4800];
                };
                readonly equivalent_minutes_in_cents: {
                    readonly type: "integer";
                    readonly description: "The equivalent value of minutes in cents for payroll processing";
                    readonly examples: readonly [4600];
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "The currency used for the supplement, typically in ISO 4217 format";
                    readonly examples: readonly ["USD"];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "The legal entity identifier associated with the supplement";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPerformanceAgreements: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Filter by action plan IDs";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["1", "2", "3"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "process_ids[]": {
                    readonly type: "array";
                    readonly description: "Filter by review process IDs";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "target_ids[]": {
                    readonly type: "array";
                    readonly description: "Filter by review process target IDs";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["1-3", "1-4", "1-5"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "process_id", "target_id", "status", "locked"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Action plan ID";
                        readonly examples: readonly ["1"];
                    };
                    readonly process_id: {
                        readonly type: "integer";
                        readonly description: "Review process ID";
                        readonly examples: readonly [1];
                    };
                    readonly target_id: {
                        readonly type: "string";
                        readonly description: "Review process target ID";
                        readonly examples: readonly ["1-3"];
                    };
                    readonly signer_id: {
                        readonly type: "integer";
                        readonly description: "Manager access ID who signed the action plan";
                        readonly examples: readonly [5];
                    };
                    readonly reviewer_id: {
                        readonly type: "integer";
                        readonly description: "Manager employee ID";
                        readonly examples: readonly [3];
                    };
                    readonly reviewer_access_id: {
                        readonly type: "integer";
                        readonly description: "Manager access ID";
                        readonly examples: readonly [6];
                    };
                    readonly manager_signed_at: {
                        readonly type: "string";
                        readonly description: "Date when the manager signed the action plan";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                    readonly target_signed_at: {
                        readonly type: "string";
                        readonly description: "Date when the employee signed the action plan";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                    readonly agreement_signed_at: {
                        readonly type: "string";
                        readonly description: "Date when the action plan was last signed";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                    readonly last_modified_at: {
                        readonly type: "string";
                        readonly description: "Date when the action plan was last modified";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "Action plan status\n\n`pending` `signed`";
                        readonly enum: readonly ["pending", "signed"];
                        readonly examples: readonly ["signed"];
                    };
                    readonly locked: {
                        readonly type: "boolean";
                        readonly description: "When the action plan cannot be edited anymore. Locked when both manager and employee signed it.";
                        readonly examples: readonly [true];
                    };
                    readonly conclusions: {
                        readonly type: "object";
                        readonly description: "Conclusions of the action plan";
                        readonly additionalProperties: true;
                    };
                    readonly manager_questionnaire: {
                        readonly type: "object";
                        readonly description: "List of questions, answers and their respective comments grouped by sections.";
                        readonly additionalProperties: true;
                    };
                    readonly self_questionnaire: {
                        readonly type: "object";
                        readonly description: "List of questions, answers and their respective comments grouped by sections.";
                        readonly additionalProperties: true;
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPerformanceAgreementsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "process_id", "target_id", "status", "locked"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Action plan ID";
                    readonly examples: readonly ["1"];
                };
                readonly process_id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly target_id: {
                    readonly type: "string";
                    readonly description: "Review process target ID";
                    readonly examples: readonly ["1-3"];
                };
                readonly signer_id: {
                    readonly type: "integer";
                    readonly description: "Manager access ID who signed the action plan";
                    readonly examples: readonly [5];
                };
                readonly reviewer_id: {
                    readonly type: "integer";
                    readonly description: "Manager employee ID";
                    readonly examples: readonly [3];
                };
                readonly reviewer_access_id: {
                    readonly type: "integer";
                    readonly description: "Manager access ID";
                    readonly examples: readonly [6];
                };
                readonly manager_signed_at: {
                    readonly type: "string";
                    readonly description: "Date when the manager signed the action plan";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly target_signed_at: {
                    readonly type: "string";
                    readonly description: "Date when the employee signed the action plan";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly agreement_signed_at: {
                    readonly type: "string";
                    readonly description: "Date when the action plan was last signed";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly last_modified_at: {
                    readonly type: "string";
                    readonly description: "Date when the action plan was last modified";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Action plan status\n\n`pending` `signed`";
                    readonly enum: readonly ["pending", "signed"];
                    readonly examples: readonly ["signed"];
                };
                readonly locked: {
                    readonly type: "boolean";
                    readonly description: "When the action plan cannot be edited anymore. Locked when both manager and employee signed it.";
                    readonly examples: readonly [true];
                };
                readonly conclusions: {
                    readonly type: "object";
                    readonly description: "Conclusions of the action plan";
                    readonly additionalProperties: true;
                };
                readonly manager_questionnaire: {
                    readonly type: "object";
                    readonly description: "List of questions, answers and their respective comments grouped by sections.";
                    readonly additionalProperties: true;
                };
                readonly self_questionnaire: {
                    readonly type: "object";
                    readonly description: "List of questions, answers and their respective comments grouped by sections.";
                    readonly additionalProperties: true;
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPerformanceReviewEvaluationAnswers: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "performance_review_evaluation_ids[]": {
                    readonly type: "array";
                    readonly description: "Filter by review evaluation IDs";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["performance_review_evaluation_ids[]"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "performance_review_evaluation_id", "answered_questionnaire_with_sections"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Review evaluation ID";
                        readonly examples: readonly [1];
                    };
                    readonly performance_review_evaluation_id: {
                        readonly type: "integer";
                        readonly description: "Review evaluation ID";
                        readonly examples: readonly [1];
                    };
                    readonly answered_questionnaire_with_sections: {
                        readonly type: "object";
                        readonly description: "List of questions and their respective answers grouped by section.";
                        readonly additionalProperties: true;
                    };
                    readonly answered_employee_score_questionnaire: {
                        readonly type: "object";
                        readonly description: "Questionnaire for getting employee score.";
                        readonly additionalProperties: true;
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPerformanceReviewEvaluations: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Filter by evaluation IDs";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "performance_review_process_ids[]": {
                    readonly type: "array";
                    readonly description: "Filter by review process IDs";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly published: {
                    readonly type: "boolean";
                    readonly description: "Only published or unpublished evaluations";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "reviewer_ids[]": {
                    readonly type: "array";
                    readonly description: "Filter by reviewer access IDs";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly only_peer_type: {
                    readonly type: "boolean";
                    readonly description: "Only peers evaluations";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "target_access_ids[]": {
                    readonly type: "array";
                    readonly description: "Filter by participant access IDs";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "review_process_target_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly with_targets_managed_by_filter: {
                    readonly type: "object";
                    readonly description: "Only evaluations where the participant is managed by the specified employee ID";
                    readonly additionalProperties: true;
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "exclude_ids[]": {
                    readonly type: "array";
                    readonly description: "Exclude evaluations by IDs";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "published", "status", "review_process_target_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Evaluation ID";
                        readonly examples: readonly [1];
                    };
                    readonly performance_review_process_id: {
                        readonly type: "integer";
                        readonly description: "Review process ID";
                        readonly examples: readonly [1];
                    };
                    readonly target_access_id: {
                        readonly type: "integer";
                        readonly description: "Participant access ID";
                        readonly examples: readonly [1];
                    };
                    readonly reviewer_access_id: {
                        readonly type: "integer";
                        readonly description: "Reviewer access ID";
                        readonly examples: readonly [1];
                    };
                    readonly evaluation_type: {
                        readonly type: "string";
                        readonly description: "Evaluation type\n\n`self` `manager` `direct_reports` `peers`";
                        readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                        readonly examples: readonly ["manager"];
                    };
                    readonly published: {
                        readonly type: "boolean";
                        readonly description: "Whether the evaluation is published";
                        readonly examples: readonly [true];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "Evaluation status\n\n`pending` `published`";
                        readonly enum: readonly ["pending", "published"];
                        readonly examples: readonly ["published"];
                    };
                    readonly review_process_target_id: {
                        readonly type: "string";
                    };
                    readonly published_at: {
                        readonly type: "string";
                        readonly description: "Date when the evaluation was published";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPerformanceReviewEvaluationsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "published", "status", "review_process_target_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Evaluation ID";
                    readonly examples: readonly [1];
                };
                readonly performance_review_process_id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly target_access_id: {
                    readonly type: "integer";
                    readonly description: "Participant access ID";
                    readonly examples: readonly [1];
                };
                readonly reviewer_access_id: {
                    readonly type: "integer";
                    readonly description: "Reviewer access ID";
                    readonly examples: readonly [1];
                };
                readonly evaluation_type: {
                    readonly type: "string";
                    readonly description: "Evaluation type\n\n`self` `manager` `direct_reports` `peers`";
                    readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                    readonly examples: readonly ["manager"];
                };
                readonly published: {
                    readonly type: "boolean";
                    readonly description: "Whether the evaluation is published";
                    readonly examples: readonly [true];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Evaluation status\n\n`pending` `published`";
                    readonly enum: readonly ["pending", "published"];
                    readonly examples: readonly ["published"];
                };
                readonly review_process_target_id: {
                    readonly type: "string";
                };
                readonly published_at: {
                    readonly type: "string";
                    readonly description: "Date when the evaluation was published";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPerformanceReviewOwners: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "performance_review_process_ids[]": {
                    readonly type: "array";
                    readonly description: "Filter by review process IDs";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "access_id", "performance_review_process_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Review owner ID";
                        readonly examples: readonly [1];
                    };
                    readonly access_id: {
                        readonly type: "integer";
                        readonly description: "Review owner access ID";
                        readonly examples: readonly [2];
                    };
                    readonly performance_review_process_id: {
                        readonly type: "integer";
                        readonly description: "Review process ID";
                        readonly examples: readonly [1];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPerformanceReviewProcessEstimatedTargets: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "performance_review_process_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "access_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "performance_review_process_id", "access_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly performance_review_process_id: {
                        readonly type: "integer";
                    };
                    readonly access_id: {
                        readonly type: "integer";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPerformanceReviewProcessTargets: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Filter by review process target IDs";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["1-1", "1-2", "1-3"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "access_ids[]": {
                    readonly type: "array";
                    readonly description: "Filter by access IDs";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly only_for_peer_assignment: {
                    readonly type: "boolean";
                    readonly description: "Only participants for peer assignment";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly without_manager: {
                    readonly type: "boolean";
                    readonly description: "Only participants with no manager assigned";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "performance_review_process_ids[]": {
                    readonly type: "array";
                    readonly description: "Filter by reviewer process IDs";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly agreement_completion_status: {
                    readonly type: "string";
                    readonly description: "Filter by agreement status";
                    readonly enum: readonly ["canbeinitiated", "haspendingagreement", "hassignedagreement"];
                    readonly examples: readonly ["canbeinitiated"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly pending_peer_evaluations: {
                    readonly type: "boolean";
                    readonly description: "Only participants with no peer evaluations";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly managed_by_filter: {
                    readonly type: "object";
                    readonly description: "Only participants managed by the specified employee ID";
                    readonly additionalProperties: true;
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "access_id", "performance_review_process_id", "materialized_process_target_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Review process target ID";
                        readonly examples: readonly ["1-3"];
                    };
                    readonly access_id: {
                        readonly type: "integer";
                        readonly description: "Participant access ID";
                        readonly examples: readonly [3];
                    };
                    readonly performance_review_process_id: {
                        readonly type: "integer";
                        readonly description: "Review process ID";
                        readonly examples: readonly [1];
                    };
                    readonly materialized_process_target_id: {
                        readonly type: "integer";
                        readonly examples: readonly [5];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPerformanceReviewProcessTargetsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "access_id", "performance_review_process_id", "materialized_process_target_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Review process target ID";
                    readonly examples: readonly ["1-3"];
                };
                readonly access_id: {
                    readonly type: "integer";
                    readonly description: "Participant access ID";
                    readonly examples: readonly [3];
                };
                readonly performance_review_process_id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly materialized_process_target_id: {
                    readonly type: "integer";
                    readonly examples: readonly [5];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPerformanceReviewProcesses: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Filter by review process IDs";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly search: {
                    readonly type: "string";
                    readonly description: "Filter by review process name";
                    readonly examples: readonly ["2024"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "company_id", "status", "start_validation_errors", "archived", "agreements_configuration", "employee_score_configuration"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Review process ID";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Review process name";
                        readonly examples: readonly ["Performance Review - Q1 2024"];
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "A brief description of the review process";
                        readonly examples: readonly ["The performance review for the first quarter of 2024 has started!"];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "Review process status\n\n`draft` `scheduled` `active` `finished`";
                        readonly enum: readonly ["draft", "scheduled", "active", "finished"];
                        readonly examples: readonly ["draft"];
                    };
                    readonly target_strategy: {
                        readonly type: "object";
                        readonly description: "Condition that defines the employees that will be evaluated (participants). Calculated when the review process starts";
                        readonly examples: readonly ["all_employees"];
                        readonly additionalProperties: true;
                    };
                    readonly reviewer_strategies: {
                        readonly type: "array";
                        readonly description: "Review types that will be assigned to the review process. It'll be used to create the evaluations when the process starts\n\n`self` `manager` `direct_reports` `peers`";
                        readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly examples: readonly ["self", "manager"];
                    };
                    readonly starts_at: {
                        readonly type: "string";
                        readonly description: "Date when the review process should start";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                    readonly ends_at: {
                        readonly type: "string";
                        readonly description: "Date when the review process should end";
                        readonly examples: readonly ["2024-04-01T00:00:00Z"];
                    };
                    readonly start_validation_errors: {
                        readonly type: "array";
                        readonly description: "Missing or invalid information to be able to start the review process\n\n`missing_deadline` `invalid_deadline` `missing_title` `missing_target_strategy` `missing_target_strategy_members` `missing_reviewer_strategy` `missing_questions` `missing_potential_reviewers`";
                        readonly enum: readonly ["missing_deadline", "invalid_deadline", "missing_title", "missing_target_strategy", "missing_target_strategy_members", "missing_reviewer_strategy", "missing_questions", "missing_potential_reviewers"];
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly examples: readonly ["invalid_deadline", "missing_questions"];
                    };
                    readonly archived: {
                        readonly type: "boolean";
                        readonly description: "Whether the review process is archived or not";
                    };
                    readonly agreements_configuration: {
                        readonly type: "object";
                        readonly description: "Configuration of the action plans feature";
                        readonly additionalProperties: true;
                    };
                    readonly employee_score_configuration: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly last_bulk_reminder: {
                        readonly type: "string";
                        readonly description: "Date when the last bulk reminder was sent";
                        readonly examples: readonly ["2024-03-01T00:00:00Z"];
                    };
                    readonly cycle_id: {
                        readonly type: "string";
                        readonly description: "Performance cycle ID";
                        readonly examples: readonly ["5"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPerformanceReviewProcessesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "status", "start_validation_errors", "archived", "agreements_configuration", "employee_score_configuration"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Review process name";
                    readonly examples: readonly ["Performance Review - Q1 2024"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A brief description of the review process";
                    readonly examples: readonly ["The performance review for the first quarter of 2024 has started!"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Review process status\n\n`draft` `scheduled` `active` `finished`";
                    readonly enum: readonly ["draft", "scheduled", "active", "finished"];
                    readonly examples: readonly ["draft"];
                };
                readonly target_strategy: {
                    readonly type: "object";
                    readonly description: "Condition that defines the employees that will be evaluated (participants). Calculated when the review process starts";
                    readonly examples: readonly ["all_employees"];
                    readonly additionalProperties: true;
                };
                readonly reviewer_strategies: {
                    readonly type: "array";
                    readonly description: "Review types that will be assigned to the review process. It'll be used to create the evaluations when the process starts\n\n`self` `manager` `direct_reports` `peers`";
                    readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["self", "manager"];
                };
                readonly starts_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should start";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly ends_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should end";
                    readonly examples: readonly ["2024-04-01T00:00:00Z"];
                };
                readonly start_validation_errors: {
                    readonly type: "array";
                    readonly description: "Missing or invalid information to be able to start the review process\n\n`missing_deadline` `invalid_deadline` `missing_title` `missing_target_strategy` `missing_target_strategy_members` `missing_reviewer_strategy` `missing_questions` `missing_potential_reviewers`";
                    readonly enum: readonly ["missing_deadline", "invalid_deadline", "missing_title", "missing_target_strategy", "missing_target_strategy_members", "missing_reviewer_strategy", "missing_questions", "missing_potential_reviewers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["invalid_deadline", "missing_questions"];
                };
                readonly archived: {
                    readonly type: "boolean";
                    readonly description: "Whether the review process is archived or not";
                };
                readonly agreements_configuration: {
                    readonly type: "object";
                    readonly description: "Configuration of the action plans feature";
                    readonly additionalProperties: true;
                };
                readonly employee_score_configuration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly last_bulk_reminder: {
                    readonly type: "string";
                    readonly description: "Date when the last bulk reminder was sent";
                    readonly examples: readonly ["2024-03-01T00:00:00Z"];
                };
                readonly cycle_id: {
                    readonly type: "string";
                    readonly description: "Performance cycle ID";
                    readonly examples: readonly ["5"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPerformanceReviewQuestionnaireByStrategies: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Filter by review process IDs";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "performance_review_process_id", "default_rating_scale"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Review process ID";
                        readonly examples: readonly [1];
                    };
                    readonly performance_review_process_id: {
                        readonly type: "integer";
                        readonly description: "Review process ID";
                        readonly examples: readonly [1];
                    };
                    readonly default_rating_scale: {
                        readonly type: "array";
                        readonly description: "Scoring range used in rating questions";
                        readonly items: {};
                    };
                    readonly self_questionnaire: {
                        readonly type: "object";
                        readonly description: "Questionnaire for self evaluation";
                        readonly additionalProperties: true;
                    };
                    readonly manager_questionnaire: {
                        readonly type: "object";
                        readonly description: "Questionnaire for manager evaluation";
                        readonly additionalProperties: true;
                    };
                    readonly direct_report_questionnaire: {
                        readonly type: "object";
                        readonly description: "Questionnaire for direct report evaluation";
                        readonly additionalProperties: true;
                    };
                    readonly peers_questionnaire: {
                        readonly type: "object";
                        readonly description: "Questionnaire for peers evaluation";
                        readonly additionalProperties: true;
                    };
                    readonly employee_score_self_questionnaire: {
                        readonly type: "object";
                        readonly description: "Questionnaire included in the end of self evaluation to evaluate the employee performance";
                        readonly additionalProperties: true;
                    };
                    readonly employee_score_manager_questionnaire: {
                        readonly type: "object";
                        readonly description: "Questionnaire included in the end of manager evaluation to evaluate the employee performance";
                        readonly additionalProperties: true;
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPerformanceReviewQuestionnaireByStrategiesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "performance_review_process_id", "default_rating_scale"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly performance_review_process_id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly default_rating_scale: {
                    readonly type: "array";
                    readonly description: "Scoring range used in rating questions";
                    readonly items: {};
                };
                readonly self_questionnaire: {
                    readonly type: "object";
                    readonly description: "Questionnaire for self evaluation";
                    readonly additionalProperties: true;
                };
                readonly manager_questionnaire: {
                    readonly type: "object";
                    readonly description: "Questionnaire for manager evaluation";
                    readonly additionalProperties: true;
                };
                readonly direct_report_questionnaire: {
                    readonly type: "object";
                    readonly description: "Questionnaire for direct report evaluation";
                    readonly additionalProperties: true;
                };
                readonly peers_questionnaire: {
                    readonly type: "object";
                    readonly description: "Questionnaire for peers evaluation";
                    readonly additionalProperties: true;
                };
                readonly employee_score_self_questionnaire: {
                    readonly type: "object";
                    readonly description: "Questionnaire included in the end of self evaluation to evaluate the employee performance";
                    readonly additionalProperties: true;
                };
                readonly employee_score_manager_questionnaire: {
                    readonly type: "object";
                    readonly description: "Questionnaire included in the end of manager evaluation to evaluate the employee performance";
                    readonly additionalProperties: true;
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPerformanceReviewVisibilitySettings: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "performance_review_process_ids[]": {
                    readonly type: "array";
                    readonly description: "Filter by review process IDs";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "performance_review_process_id", "restrict_answers_visibility_to_reportees", "early_access_to_answers_for_managers", "anonymous_peer_evaluation_for_target"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Review process ID";
                        readonly examples: readonly [1];
                    };
                    readonly performance_review_process_id: {
                        readonly type: "integer";
                        readonly description: "Review process ID";
                        readonly examples: readonly [1];
                    };
                    readonly restrict_answers_visibility_to_reportees: {
                        readonly type: "boolean";
                        readonly description: "Employees don't have access to their results when enabled";
                    };
                    readonly early_access_to_answers_for_managers: {
                        readonly type: "boolean";
                        readonly description: "Managers can access the results of their reports before deadline when enabled";
                        readonly examples: readonly [true];
                    };
                    readonly anonymous_peer_evaluation_for_target: {
                        readonly type: "boolean";
                        readonly description: "Peer evaluations are anonymous when enabled, so employees don't know who reviewed them";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPerformanceTargetManagers: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "performance_review_process_ids[]": {
                    readonly type: "array";
                    readonly description: "Review process ID (only one ID is allowed)";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["performance_review_process_ids[]"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "performance_review_process_id", "manager_access_id", "manager_full_name"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Manager employee ID";
                        readonly examples: readonly [1];
                    };
                    readonly performance_review_process_id: {
                        readonly type: "integer";
                        readonly description: "Review process ID";
                        readonly examples: readonly [1];
                    };
                    readonly manager_access_id: {
                        readonly type: "integer";
                        readonly description: "Manager access ID";
                        readonly examples: readonly [3];
                    };
                    readonly manager_full_name: {
                        readonly type: "string";
                        readonly description: "Manager full name";
                        readonly examples: readonly ["John Doe"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPerformanceTargetManagersId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "performance_review_process_id", "manager_access_id", "manager_full_name"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Manager employee ID";
                    readonly examples: readonly [1];
                };
                readonly performance_review_process_id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly manager_access_id: {
                    readonly type: "integer";
                    readonly description: "Manager access ID";
                    readonly examples: readonly [3];
                };
                readonly manager_full_name: {
                    readonly type: "string";
                    readonly description: "Manager full name";
                    readonly examples: readonly ["John Doe"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPostsComments: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "post_ids[]": {
                    readonly type: "array";
                    readonly description: "identifiers of the post";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "identifiers of the comment";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["post_ids[]"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "post_id", "author_id", "text", "created_at"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "identifier of the comment";
                        readonly examples: readonly [1];
                    };
                    readonly post_id: {
                        readonly type: "integer";
                        readonly description: "identifier of the post";
                        readonly examples: readonly [1];
                    };
                    readonly author_id: {
                        readonly type: "integer";
                        readonly description: "author identifier refers to the employee access, you can get the employee from the employee endpoint";
                        readonly examples: readonly [1];
                    };
                    readonly text: {
                        readonly type: "string";
                        readonly description: "text of the comment";
                        readonly examples: readonly ["How is the week going Ana?"];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "date of the comment";
                        readonly examples: readonly ["2024-07-17T00:00:00Z"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPostsCommentsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "post_id", "author_id", "text", "created_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the comment";
                    readonly examples: readonly [1];
                };
                readonly post_id: {
                    readonly type: "integer";
                    readonly description: "identifier of the post";
                    readonly examples: readonly [1];
                };
                readonly author_id: {
                    readonly type: "integer";
                    readonly description: "author identifier refers to the employee access, you can get the employee from the employee endpoint";
                    readonly examples: readonly [1];
                };
                readonly text: {
                    readonly type: "string";
                    readonly description: "text of the comment";
                    readonly examples: readonly ["How is the week going Ana?"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "date of the comment";
                    readonly examples: readonly ["2024-07-17T00:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPostsGroups: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "identifier of the group.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["ids[]"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "title"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "identifier of the group.";
                        readonly examples: readonly [1];
                    };
                    readonly title: {
                        readonly type: "string";
                        readonly description: "title of the group.";
                        readonly examples: readonly ["Company announcements"];
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "description of the group.";
                        readonly examples: readonly ["The place to find all company announcements."];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPostsGroupsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "title"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the group.";
                    readonly examples: readonly [1];
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "title of the group.";
                    readonly examples: readonly ["Company announcements"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "description of the group.";
                    readonly examples: readonly ["The place to find all company announcements."];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPostsPosts: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "groups[]": {
                    readonly type: "array";
                    readonly description: "group identifiers of the posts";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly from: {
                    readonly type: "string";
                    readonly description: "date from which posts will be retrieved";
                    readonly examples: readonly ["2024-05-02"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly until: {
                    readonly type: "string";
                    readonly description: "date until which the posts will be retrieved";
                    readonly examples: readonly ["2024-08-01"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "identifiers of the post";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "allow_comments_and_reactions", "published_at", "created_at", "updated_at", "visits_count", "comments_count"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "identifiers of the post";
                        readonly examples: readonly [1];
                    };
                    readonly title: {
                        readonly type: "string";
                        readonly description: "title of the post";
                        readonly examples: readonly ["Are you ready for the perfomance review?"];
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "description of the post";
                        readonly examples: readonly ["As you know today we start the performance review process."];
                    };
                    readonly allow_comments_and_reactions: {
                        readonly type: "boolean";
                        readonly description: "allow comments and reactions on the post";
                        readonly examples: readonly [true];
                    };
                    readonly published_at: {
                        readonly type: "string";
                        readonly description: "date when the post has been published";
                        readonly examples: readonly ["2024-07-17T00:00:00Z"];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "date when the post has been created";
                        readonly examples: readonly ["2024-07-17T00:00:00Z"];
                    };
                    readonly updated_at: {
                        readonly type: "string";
                        readonly description: "date when the post has been updated";
                        readonly examples: readonly ["2024-07-17T00:00:00Z"];
                    };
                    readonly visits_count: {
                        readonly type: "integer";
                        readonly description: "number of visits of the post";
                        readonly examples: readonly [10];
                    };
                    readonly cover_image_url: {
                        readonly type: "string";
                        readonly description: "url of the cover image";
                        readonly examples: readonly ["https://example.com/image.jpg"];
                    };
                    readonly posts_group_id: {
                        readonly type: "integer";
                        readonly description: "group identifier of the post, references to posts/groups endpoint";
                        readonly examples: readonly [1];
                    };
                    readonly comments_count: {
                        readonly type: "integer";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesPostsPostsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "allow_comments_and_reactions", "published_at", "created_at", "updated_at", "visits_count", "comments_count"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifiers of the post";
                    readonly examples: readonly [1];
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "title of the post";
                    readonly examples: readonly ["Are you ready for the perfomance review?"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "description of the post";
                    readonly examples: readonly ["As you know today we start the performance review process."];
                };
                readonly allow_comments_and_reactions: {
                    readonly type: "boolean";
                    readonly description: "allow comments and reactions on the post";
                    readonly examples: readonly [true];
                };
                readonly published_at: {
                    readonly type: "string";
                    readonly description: "date when the post has been published";
                    readonly examples: readonly ["2024-07-17T00:00:00Z"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "date when the post has been created";
                    readonly examples: readonly ["2024-07-17T00:00:00Z"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "date when the post has been updated";
                    readonly examples: readonly ["2024-07-17T00:00:00Z"];
                };
                readonly visits_count: {
                    readonly type: "integer";
                    readonly description: "number of visits of the post";
                    readonly examples: readonly [10];
                };
                readonly cover_image_url: {
                    readonly type: "string";
                    readonly description: "url of the cover image";
                    readonly examples: readonly ["https://example.com/image.jpg"];
                };
                readonly posts_group_id: {
                    readonly type: "integer";
                    readonly description: "group identifier of the post, references to posts/groups endpoint";
                    readonly examples: readonly [1];
                };
                readonly comments_count: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesProjectManagementExpenseRecords: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly start_date: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly end_date: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "expense_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "project_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "subproject_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly updated_after: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly employee_user_name_like: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "project_worker_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "project_worker_id", "expense_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly project_worker_id: {
                        readonly type: "integer";
                    };
                    readonly expense_id: {
                        readonly type: "integer";
                    };
                    readonly subproject_id: {
                        readonly type: "integer";
                    };
                    readonly original_amount_currency: {
                        readonly type: "string";
                    };
                    readonly original_amount_cents: {
                        readonly type: "integer";
                    };
                    readonly legal_entity_amount_currency: {
                        readonly type: "string";
                    };
                    readonly legal_entity_amount_cents: {
                        readonly type: "string";
                    };
                    readonly effective_on: {
                        readonly type: "string";
                    };
                    readonly exchange_rate: {
                        readonly type: "number";
                    };
                    readonly status: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesProjectManagementExpenseRecordsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "project_worker_id", "expense_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly project_worker_id: {
                    readonly type: "integer";
                };
                readonly expense_id: {
                    readonly type: "integer";
                };
                readonly subproject_id: {
                    readonly type: "integer";
                };
                readonly original_amount_currency: {
                    readonly type: "string";
                };
                readonly original_amount_cents: {
                    readonly type: "integer";
                };
                readonly legal_entity_amount_currency: {
                    readonly type: "string";
                };
                readonly legal_entity_amount_cents: {
                    readonly type: "string";
                };
                readonly effective_on: {
                    readonly type: "string";
                };
                readonly exchange_rate: {
                    readonly type: "number";
                };
                readonly status: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesProjectManagementExportableExpenses: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly start_date: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly end_date: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "project_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["start_date", "end_date", "project_ids[]"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["employee_name"];
                readonly properties: {
                    readonly date: {
                        readonly type: "string";
                    };
                    readonly project_name: {
                        readonly type: "string";
                    };
                    readonly subproject_name: {
                        readonly type: "string";
                    };
                    readonly employee_name: {
                        readonly type: "string";
                    };
                    readonly preferred_name: {
                        readonly type: "string";
                    };
                    readonly amount: {
                        readonly type: "string";
                    };
                    readonly currency: {
                        readonly type: "string";
                    };
                    readonly expense_category: {
                        readonly type: "string";
                    };
                    readonly expense_subcategory: {
                        readonly type: "string";
                    };
                    readonly expense_status: {
                        readonly type: "string";
                    };
                    readonly expense_link: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesProjectManagementExportableProjects: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly start_date: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly end_date: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "project_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly time_format: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_date: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["start_date", "end_date"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "project_name", "project_status", "inputed_time"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly date: {
                        readonly type: "string";
                    };
                    readonly project_name: {
                        readonly type: "string";
                    };
                    readonly project_code: {
                        readonly type: "string";
                    };
                    readonly project_start_date: {
                        readonly type: "string";
                    };
                    readonly project_due_date: {
                        readonly type: "string";
                    };
                    readonly project_status: {
                        readonly type: "string";
                    };
                    readonly subproject_name: {
                        readonly type: "string";
                    };
                    readonly employee_name: {
                        readonly type: "string";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly inputed_time: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesProjectManagementFlexibleTimeRecordComments: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly flexible_time_record_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "content", "flexible_time_record_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly content: {
                        readonly type: "string";
                    };
                    readonly flexible_time_record_id: {
                        readonly type: "integer";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesProjectManagementFlexibleTimeRecordCommentsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "content", "flexible_time_record_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly content: {
                    readonly type: "string";
                };
                readonly flexible_time_record_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesProjectManagementFlexibleTimeRecords: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "project_worker_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly starts_on: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly ends_on: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly updated_after: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["ids[]", "project_worker_ids[]"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "date", "imputed_minutes", "project_worker_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly date: {
                        readonly type: "string";
                    };
                    readonly imputed_minutes: {
                        readonly type: "integer";
                    };
                    readonly project_worker_id: {
                        readonly type: "integer";
                    };
                    readonly subproject_id: {
                        readonly type: "integer";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesProjectManagementFlexibleTimeRecordsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "date", "imputed_minutes", "project_worker_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly date: {
                    readonly type: "string";
                };
                readonly imputed_minutes: {
                    readonly type: "integer";
                };
                readonly project_worker_id: {
                    readonly type: "integer";
                };
                readonly subproject_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesProjectManagementProjectTasks: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "project_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "subproject_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "task_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly completed: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly overdue: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly search: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "project_id", "task_id", "follow_up"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly project_id: {
                        readonly type: "integer";
                    };
                    readonly subproject_id: {
                        readonly type: "integer";
                    };
                    readonly task_id: {
                        readonly type: "integer";
                    };
                    readonly follow_up: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesProjectManagementProjectTasksId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "project_id", "task_id", "follow_up"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly project_id: {
                    readonly type: "integer";
                };
                readonly subproject_id: {
                    readonly type: "integer";
                };
                readonly task_id: {
                    readonly type: "integer";
                };
                readonly follow_up: {
                    readonly type: "boolean";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesProjectManagementProjectWorkers: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Retrieve only the project workers that matches the ids provided in the request.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [314159, 271828];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "project_ids[]": {
                    readonly type: "array";
                    readonly description: "Retrieve only the project workers that matches the project_ids provided in the request.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [314159, 271828];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "subproject_ids[]": {
                    readonly type: "array";
                    readonly description: "Retrieve only the project workers that matches the subproject_ids provided in the request.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [314159, 271828];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly no_subproject: {
                    readonly type: "boolean";
                    readonly description: "Retrieve the project workers that are not assigned to any subproject (can be combined with subproject_ids).";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly description: "Retrieve only the project workers that are related to the employee_ids provided in the request.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [314159, 271828];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly assigned: {
                    readonly type: "boolean";
                    readonly description: "Retrieve project workers that are assigned if true or in not-assigned status if false.";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly project_active: {
                    readonly type: "boolean";
                    readonly description: "Retrieve the project workers that are assigned to active projects if turew or closed projects if false.";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly employee_name: {
                    readonly type: "string";
                    readonly description: "Retrieve only the project workers that matches the given employee's name provided in the request.";
                    readonly examples: readonly ["John D"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_inputed_minutes: {
                    readonly type: "boolean";
                    readonly description: "If true we will perform the minutes calculations and will be return the total inputed_minutes. If false, 0 will be returned and no minutes calculations will be performed.";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_cost: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly updated_after: {
                    readonly type: "string";
                    readonly description: "Retrieve only the project workers that were created or updated after the date provided in the request.";
                    readonly examples: readonly ["1993-08-23"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_labor_cost: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "project_id", "employee_id", "assigned"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly project_id: {
                        readonly type: "integer";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly assigned: {
                        readonly type: "boolean";
                    };
                    readonly inputed_minutes: {
                        readonly type: "integer";
                    };
                    readonly labor_cost_cents: {
                        readonly type: "integer";
                    };
                    readonly spending_cost_cents: {
                        readonly type: "integer";
                    };
                    readonly full_name: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesProjectManagementProjectWorkersId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "project_id", "employee_id", "assigned"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly project_id: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly assigned: {
                    readonly type: "boolean";
                };
                readonly inputed_minutes: {
                    readonly type: "integer";
                };
                readonly labor_cost_cents: {
                    readonly type: "integer";
                };
                readonly spending_cost_cents: {
                    readonly type: "integer";
                };
                readonly full_name: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesProjectManagementProjects: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Retrieve only the projects that matches the ids provided in the request.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [314159, 271828];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly name: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly name_or_code: {
                    readonly type: "string";
                    readonly description: "Retrieve only the projects that match the name or coded passed in the request.";
                    readonly examples: readonly ["Project Name"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_inputed_minutes: {
                    readonly type: "boolean";
                    readonly description: "If true we will perform the minutes calculations and will be return the total inputed_minutes. If false, 0 will be returned and no minutes calculations will be performed.";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly updated_after: {
                    readonly type: "string";
                    readonly description: "Retrieve only the projects that were created or updated after the date provided in the request.";
                    readonly examples: readonly ["1993-08-23"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "Retrieve only the projects that are related to the legal entity passed in the request.";
                    readonly examples: readonly [314159];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "client_ids[]": {
                    readonly type: "array";
                    readonly description: "Retrieve only the projects that are related to the client passed in the request.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [314159, 271828];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["include_inputed_minutes"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "name", "status", "employees_assignment", "is_billable", "legal_entity_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                    };
                    readonly start_date: {
                        readonly type: "string";
                    };
                    readonly due_date: {
                        readonly type: "string";
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly enum: readonly ["active", "closed", "processing"];
                        readonly description: "`active` `closed` `processing`";
                    };
                    readonly employees_assignment: {
                        readonly type: "string";
                        readonly enum: readonly ["manual", "company"];
                        readonly description: "`manual` `company`";
                    };
                    readonly inputed_minutes: {
                        readonly type: "integer";
                    };
                    readonly is_billable: {
                        readonly type: "boolean";
                    };
                    readonly fixed_cost_cents: {
                        readonly type: "integer";
                    };
                    readonly labor_cost_cents: {
                        readonly type: "integer";
                    };
                    readonly legal_entity_id: {
                        readonly type: "integer";
                    };
                    readonly spending_cost_cents: {
                        readonly type: "integer";
                    };
                    readonly client_id: {
                        readonly type: "integer";
                        readonly description: "The client id of the project";
                        readonly examples: readonly [123];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesProjectManagementProjectsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "status", "employees_assignment", "is_billable", "legal_entity_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly code: {
                    readonly type: "string";
                };
                readonly start_date: {
                    readonly type: "string";
                };
                readonly due_date: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["active", "closed", "processing"];
                    readonly description: "`active` `closed` `processing`";
                };
                readonly employees_assignment: {
                    readonly type: "string";
                    readonly enum: readonly ["manual", "company"];
                    readonly description: "`manual` `company`";
                };
                readonly inputed_minutes: {
                    readonly type: "integer";
                };
                readonly is_billable: {
                    readonly type: "boolean";
                };
                readonly fixed_cost_cents: {
                    readonly type: "integer";
                };
                readonly labor_cost_cents: {
                    readonly type: "integer";
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                };
                readonly spending_cost_cents: {
                    readonly type: "integer";
                };
                readonly client_id: {
                    readonly type: "integer";
                    readonly description: "The client id of the project";
                    readonly examples: readonly [123];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesProjectManagementSubprojects: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "project_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly name: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_no_subproject: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_inputed_minutes: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_cost: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly updated_after: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["name", "project_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly project_id: {
                        readonly type: "integer";
                    };
                    readonly inputed_minutes: {
                        readonly type: "integer";
                    };
                    readonly labor_cost_cents: {
                        readonly type: "integer";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesProjectManagementSubprojectsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["name", "project_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly project_id: {
                    readonly type: "integer";
                };
                readonly inputed_minutes: {
                    readonly type: "integer";
                };
                readonly labor_cost_cents: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesProjectManagementTimeRecords: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "project_worker_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "subproject_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "attendance_shift_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly month: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly year: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly updated_after: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "project_worker_id", "attendance_shift_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly project_worker_id: {
                        readonly type: "integer";
                    };
                    readonly attendance_shift_id: {
                        readonly type: "integer";
                    };
                    readonly subproject_id: {
                        readonly type: "integer";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesProjectManagementTimeRecordsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "project_worker_id", "attendance_shift_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly project_worker_id: {
                    readonly type: "integer";
                };
                readonly attendance_shift_id: {
                    readonly type: "integer";
                };
                readonly subproject_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesShiftManagementShifts: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "List of shift identifiers";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly description: "List of employee identifiers";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "location_ids[]": {
                    readonly type: "array";
                    readonly description: "List of location identifiers";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly start_at: {
                    readonly type: "string";
                    readonly description: "Start date to find shifts from";
                    readonly examples: readonly ["2024-11-01"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly end_at: {
                    readonly type: "string";
                    readonly description: "End date to find shifts to";
                    readonly examples: readonly ["2024-11-20"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly only_published: {
                    readonly type: "boolean";
                    readonly description: "To retrieve only published shifts";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "company_id", "state", "employee_id", "start_at", "end_at", "timezone", "local_start_at", "local_end_at"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Shift identifier";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "Company identifier";
                        readonly examples: readonly [1];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Name of the shift";
                        readonly examples: readonly ["Morning shift"];
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly examples: readonly ["published, draft"];
                    };
                    readonly location_id: {
                        readonly type: "integer";
                        readonly description: "Shift location identifier";
                        readonly examples: readonly [3];
                    };
                    readonly locations_work_area_id: {
                        readonly type: "integer";
                        readonly description: "Shift work area identifier";
                        readonly examples: readonly [5];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "Employee identifier";
                        readonly examples: readonly [45];
                    };
                    readonly start_at: {
                        readonly type: "string";
                        readonly description: "Start date of the shift";
                        readonly examples: readonly ["2020-09-07T06:00:00.000+00:00"];
                    };
                    readonly end_at: {
                        readonly type: "string";
                        readonly description: "End date of the shift";
                        readonly examples: readonly ["2020-09-07T15:00:00.000+00:00"];
                    };
                    readonly notes: {
                        readonly type: "string";
                        readonly description: "Shift notes";
                        readonly examples: readonly ["This is a shift note"];
                    };
                    readonly extra_hours: {
                        readonly type: "boolean";
                        readonly description: "Flag to indicate if the shift has extra hours";
                    };
                    readonly default_shift_title: {
                        readonly type: "string";
                        readonly description: "Default shift title";
                    };
                    readonly timezone: {
                        readonly type: "string";
                        readonly description: "Shift timezone";
                        readonly examples: readonly ["Europe/Madrid"];
                    };
                    readonly local_start_at: {
                        readonly type: "string";
                        readonly description: "Local start date of the shift";
                        readonly examples: readonly ["2020-09-07T07:00:00.000+00:00"];
                    };
                    readonly local_end_at: {
                        readonly type: "string";
                        readonly description: "Local end date of the shift";
                        readonly examples: readonly ["2020-09-07T15:00:00.000+00:00"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesShiftManagementShiftsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "state", "employee_id", "start_at", "end_at", "timezone", "local_start_at", "local_end_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Shift identifier";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the shift";
                    readonly examples: readonly ["Morning shift"];
                };
                readonly state: {
                    readonly type: "string";
                    readonly examples: readonly ["published, draft"];
                };
                readonly location_id: {
                    readonly type: "integer";
                    readonly description: "Shift location identifier";
                    readonly examples: readonly [3];
                };
                readonly locations_work_area_id: {
                    readonly type: "integer";
                    readonly description: "Shift work area identifier";
                    readonly examples: readonly [5];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee identifier";
                    readonly examples: readonly [45];
                };
                readonly start_at: {
                    readonly type: "string";
                    readonly description: "Start date of the shift";
                    readonly examples: readonly ["2020-09-07T06:00:00.000+00:00"];
                };
                readonly end_at: {
                    readonly type: "string";
                    readonly description: "End date of the shift";
                    readonly examples: readonly ["2020-09-07T15:00:00.000+00:00"];
                };
                readonly notes: {
                    readonly type: "string";
                    readonly description: "Shift notes";
                    readonly examples: readonly ["This is a shift note"];
                };
                readonly extra_hours: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate if the shift has extra hours";
                };
                readonly default_shift_title: {
                    readonly type: "string";
                    readonly description: "Default shift title";
                };
                readonly timezone: {
                    readonly type: "string";
                    readonly description: "Shift timezone";
                    readonly examples: readonly ["Europe/Madrid"];
                };
                readonly local_start_at: {
                    readonly type: "string";
                    readonly description: "Local start date of the shift";
                    readonly examples: readonly ["2020-09-07T07:00:00.000+00:00"];
                };
                readonly local_end_at: {
                    readonly type: "string";
                    readonly description: "Local end date of the shift";
                    readonly examples: readonly ["2020-09-07T15:00:00.000+00:00"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTasksTaskFiles: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "integer";
                    readonly description: "identifier of the task";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "identifiers of the files";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["task_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "task_id", "filename", "path", "created_at"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "identifier of the file.";
                        readonly examples: readonly [1];
                    };
                    readonly task_id: {
                        readonly type: "integer";
                        readonly description: "identifier of the task.";
                        readonly examples: readonly [1];
                    };
                    readonly filename: {
                        readonly type: "string";
                        readonly description: "name of the file.";
                        readonly examples: readonly ["expenses.png"];
                    };
                    readonly content_type: {
                        readonly type: "string";
                        readonly description: "content type of the file.";
                        readonly examples: readonly ["image/png"];
                    };
                    readonly path: {
                        readonly type: "string";
                        readonly description: "path of the file, for downloading the file you need to concat api_url/path.";
                        readonly examples: readonly ["/tasks/tasks_files/405"];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "creation date of the file.";
                        readonly examples: readonly ["2024-10-06"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTasksTaskFilesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "task_id", "filename", "path", "created_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the file.";
                    readonly examples: readonly [1];
                };
                readonly task_id: {
                    readonly type: "integer";
                    readonly description: "identifier of the task.";
                    readonly examples: readonly [1];
                };
                readonly filename: {
                    readonly type: "string";
                    readonly description: "name of the file.";
                    readonly examples: readonly ["expenses.png"];
                };
                readonly content_type: {
                    readonly type: "string";
                    readonly description: "content type of the file.";
                    readonly examples: readonly ["image/png"];
                };
                readonly path: {
                    readonly type: "string";
                    readonly description: "path of the file, for downloading the file you need to concat api_url/path.";
                    readonly examples: readonly ["/tasks/tasks_files/405"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "creation date of the file.";
                    readonly examples: readonly ["2024-10-06"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTasksTasks: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "retrieve only the tasks that match the IDs passed in the request.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "retrieve the tasks that have a company_id associated";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly assignee_id: {
                    readonly type: "integer";
                    readonly description: "retrieve the tasks that have an assignee_id associated, assignee_id references to employee_id.";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly due_on: {
                    readonly type: "string";
                    readonly description: "filter by tasks that have a due date.";
                    readonly examples: readonly ["2024-06-06"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly already_due: {
                    readonly type: "boolean";
                    readonly description: "filter by tasks that have expired or are still due.";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly task_status: {
                    readonly type: "string";
                    readonly description: "filter by tasks that with an especific status (todo | in_progress | done | discarded).";
                    readonly enum: readonly ["todo", "in_progress", "done", "discarded"];
                    readonly examples: readonly ["todo"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly involvee_id: {
                    readonly type: "integer";
                    readonly description: "retrieve tasks where the user is affectee or assignee";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "name", "company_id", "assignee_ids", "created_at", "updated_at"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Identifier of the task";
                        readonly examples: readonly [1];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Name of the task";
                        readonly examples: readonly ["Upload payroll files"];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "Company identifier of the author of the task";
                        readonly examples: readonly [1];
                    };
                    readonly content: {
                        readonly type: "string";
                        readonly description: "Content of the task";
                        readonly examples: readonly ["Do it as soon as possible"];
                    };
                    readonly due_on: {
                        readonly type: "string";
                        readonly description: "Due on date of the task";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                    readonly assignee_ids: {
                        readonly type: "array";
                        readonly description: "Employees assigned to the task, assignee_id references to employee_id";
                        readonly items: {
                            readonly type: "integer";
                        };
                        readonly examples: readonly [1, 2, 3];
                    };
                    readonly author_employee_id: {
                        readonly type: "integer";
                        readonly description: "Employee id of the author of the task";
                        readonly examples: readonly [1];
                    };
                    readonly completed_at: {
                        readonly type: "string";
                        readonly description: "Completed at date of the task";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                    readonly completed_by_id: {
                        readonly type: "integer";
                        readonly description: "Completed by identifier";
                        readonly examples: readonly [1];
                    };
                    readonly created_at: {
                        readonly type: "string";
                    };
                    readonly updated_at: {
                        readonly type: "string";
                        readonly description: "Updated at date of the task";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "Status of the task\n\n`todo` `in_progress` `done` `discarded`";
                        readonly enum: readonly ["todo", "in_progress", "done", "discarded"];
                        readonly examples: readonly ["done"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTasksTasksId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id", "assignee_ids", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the task";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the task";
                    readonly examples: readonly ["Upload payroll files"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the author of the task";
                    readonly examples: readonly [1];
                };
                readonly content: {
                    readonly type: "string";
                    readonly description: "Content of the task";
                    readonly examples: readonly ["Do it as soon as possible"];
                };
                readonly due_on: {
                    readonly type: "string";
                    readonly description: "Due on date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly assignee_ids: {
                    readonly type: "array";
                    readonly description: "Employees assigned to the task, assignee_id references to employee_id";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                };
                readonly author_employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee id of the author of the task";
                    readonly examples: readonly [1];
                };
                readonly completed_at: {
                    readonly type: "string";
                    readonly description: "Completed at date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly completed_by_id: {
                    readonly type: "integer";
                    readonly description: "Completed by identifier";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "Updated at date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the task\n\n`todo` `in_progress` `done` `discarded`";
                    readonly enum: readonly ["todo", "in_progress", "done", "discarded"];
                    readonly examples: readonly ["done"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTeamsMemberships: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Membership ids.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "team_ids[]": {
                    readonly type: "array";
                    readonly description: "Team ids.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [3, 5, 7];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly description: "Employee ids.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [10, 12, 13];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "employee_id", "team_id", "lead"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Membership ID";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "Company ID of the membership";
                        readonly examples: readonly [5];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "Employee ID of the membership";
                        readonly examples: readonly [12];
                    };
                    readonly team_id: {
                        readonly type: "integer";
                        readonly description: "Team ID of the membership";
                        readonly examples: readonly [4];
                    };
                    readonly lead: {
                        readonly type: "boolean";
                        readonly description: "Whether the employee is a lead of the team or not";
                        readonly examples: readonly [true];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTeamsMembershipsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "team_id", "lead"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Membership ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company ID of the membership";
                    readonly examples: readonly [5];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee ID of the membership";
                    readonly examples: readonly [12];
                };
                readonly team_id: {
                    readonly type: "integer";
                    readonly description: "Team ID of the membership";
                    readonly examples: readonly [4];
                };
                readonly lead: {
                    readonly type: "boolean";
                    readonly description: "Whether the employee is a lead of the team or not";
                    readonly examples: readonly [true];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTeamsTeams: {
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "name", "company_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly description: {
                        readonly type: "string";
                    };
                    readonly avatar: {
                        readonly type: "string";
                    };
                    readonly employee_ids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                        };
                    };
                    readonly lead_ids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                        };
                    };
                    readonly company_id: {
                        readonly type: "integer";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTeamsTeamsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly avatar: {
                    readonly type: "string";
                };
                readonly employee_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly lead_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly company_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTimePlanningPlanningVersions: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly for_shifts: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly only_active: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly planning_tool: {
                    readonly type: "string";
                    readonly enum: readonly ["shift_management", "work_schedule", "contract_hours"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "schedule_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["only_active"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["effective_at", "planning_tool", "employee_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly effective_at: {
                        readonly type: "string";
                    };
                    readonly planning_tool: {
                        readonly type: "string";
                    };
                    readonly number_of_rest_days_in_cents: {
                        readonly type: "integer";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly work_schedule_schedule_id: {
                        readonly type: "integer";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTimeSettingsBreakConfigurations: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["active"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "name", "paid", "archived"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly paid: {
                        readonly type: "boolean";
                    };
                    readonly archived: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTimeSettingsBreakConfigurationsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "paid", "archived"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly paid: {
                    readonly type: "boolean";
                };
                readonly archived: {
                    readonly type: "boolean";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTimeoffAllowanceIncidences: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "timeoff_allowance_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "employee_id", "days_in_cents", "timeoff_allowance_id", "effective_on", "created_at", "updated_at"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Unique identifier of the allowance incidence";
                        readonly examples: readonly [1];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "Employee id of the affected employee";
                        readonly examples: readonly [1];
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "Optional comment regarding the incidence";
                        readonly examples: readonly ["Added because working on a holiday"];
                    };
                    readonly days_in_cents: {
                        readonly type: "integer";
                        readonly description: "How many units * 100 does the incidence add/substract. Can be positive or negative. Example is one unit";
                        readonly examples: readonly [100];
                    };
                    readonly timeoff_allowance_id: {
                        readonly type: "integer";
                        readonly description: "To what allowance does the incidence affect. It will dictate if its days or hours";
                        readonly examples: readonly [2];
                    };
                    readonly effective_on: {
                        readonly type: "string";
                        readonly description: "When does the incidence take effect; this is for time off cycles calculations.";
                        readonly examples: readonly ["2024-01-02"];
                    };
                    readonly target_balance: {
                        readonly type: "string";
                        readonly description: "Whether the incidence affects the Accrued or the Available counter.";
                        readonly examples: readonly ["accrued"];
                    };
                    readonly created_at: {
                        readonly type: "integer";
                        readonly description: "Unix timestamp when the DB record was created";
                        readonly examples: readonly [1723623354];
                    };
                    readonly updated_at: {
                        readonly type: "integer";
                        readonly description: "Unix timestamp when the DB record was last updated";
                        readonly examples: readonly [1723623354];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTimeoffAllowanceIncidencesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "days_in_cents", "timeoff_allowance_id", "effective_on", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier of the allowance incidence";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee id of the affected employee";
                    readonly examples: readonly [1];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Optional comment regarding the incidence";
                    readonly examples: readonly ["Added because working on a holiday"];
                };
                readonly days_in_cents: {
                    readonly type: "integer";
                    readonly description: "How many units * 100 does the incidence add/substract. Can be positive or negative. Example is one unit";
                    readonly examples: readonly [100];
                };
                readonly timeoff_allowance_id: {
                    readonly type: "integer";
                    readonly description: "To what allowance does the incidence affect. It will dictate if its days or hours";
                    readonly examples: readonly [2];
                };
                readonly effective_on: {
                    readonly type: "string";
                    readonly description: "When does the incidence take effect; this is for time off cycles calculations.";
                    readonly examples: readonly ["2024-01-02"];
                };
                readonly target_balance: {
                    readonly type: "string";
                    readonly description: "Whether the incidence affects the Accrued or the Available counter.";
                    readonly examples: readonly ["accrued"];
                };
                readonly created_at: {
                    readonly type: "integer";
                    readonly description: "Unix timestamp when the DB record was created";
                    readonly examples: readonly [1723623354];
                };
                readonly updated_at: {
                    readonly type: "integer";
                    readonly description: "Unix timestamp when the DB record was last updated";
                    readonly examples: readonly [1723623354];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTimeoffAllowanceStats: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly allowance_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly reference_date: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["employee_id", "allowance_id", "reference_date"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "allowance_id", "employee_id", "year", "cycles", "carry_overs", "accumulated_carry_over", "available_days", "total_accrued_units", "incidences", "policy_allowance", "prorated_allowance_days", "used_carry_over", "used_days", "used_units_until_reference_date", "outstanding_units"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly allowance_id: {
                        readonly type: "integer";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly year: {
                        readonly type: "integer";
                    };
                    readonly cycles: {
                        readonly type: "string";
                    };
                    readonly carry_overs: {
                        readonly type: "array";
                        readonly items: {};
                    };
                    readonly accumulated_carry_over: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly available_days: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly total_accrued_units: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly incidences: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly max_balance_cap: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly policy_allowance: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly prorated_allowance_days: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly total_in_decimal: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly used_carry_over: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly used_days: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly used_units_until_reference_date: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly outstanding_units: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTimeoffAllowanceStatsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "allowance_id", "employee_id", "year", "cycles", "carry_overs", "accumulated_carry_over", "available_days", "total_accrued_units", "incidences", "policy_allowance", "prorated_allowance_days", "used_carry_over", "used_days", "used_units_until_reference_date", "outstanding_units"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly allowance_id: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly year: {
                    readonly type: "integer";
                };
                readonly cycles: {
                    readonly type: "string";
                };
                readonly carry_overs: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly accumulated_carry_over: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly available_days: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly total_accrued_units: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly incidences: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly max_balance_cap: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly policy_allowance: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly prorated_allowance_days: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly total_in_decimal: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly used_carry_over: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly used_days: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly used_units_until_reference_date: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly outstanding_units: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTimeoffAllowances: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "An array of allowance ids to look for";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly timeoff_policy_id: {
                    readonly type: "integer";
                    readonly description: "Filter allowances by Time off policy id";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly by_overtime: {
                    readonly type: "boolean";
                    readonly description: "Filter by only overtime allowances";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "allowance_type", "available_days", "count_holiday_as_workable", "leave_type_ids", "name", "proration_type", "rounding", "tenure_periods", "timeoff_cycle", "timeoff_policy_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Unique identifier of the allowance";
                        readonly examples: readonly [1];
                    };
                    readonly accrued_denominator_in_cents: {
                        readonly type: "integer";
                        readonly description: "Only for Allowances based on worked time. It represents how many units you need to work to be granted allowance units";
                        readonly examples: readonly [1000];
                    };
                    readonly accrued_factor_in_cents: {
                        readonly type: "integer";
                        readonly description: "Only for Allowances based on worked time. It represents how many units you are given per unit of time worked";
                        readonly examples: readonly [10];
                    };
                    readonly accrued_units_availability: {
                        readonly type: "string";
                        readonly description: "When can the acrrued units be spent.\n\n`current_cycle` `next_cycle`";
                        readonly enum: readonly ["current_cycle", "next_cycle"];
                        readonly examples: readonly ["current_cycle"];
                    };
                    readonly allowance_type: {
                        readonly type: "string";
                        readonly description: "Sets the allowance units. Can be \"days\" or \"hours\"\n\n`days` `hours`";
                        readonly enum: readonly ["days", "hours"];
                        readonly examples: readonly ["days"];
                    };
                    readonly available_days: {
                        readonly type: "string";
                        readonly description: "Indicates how the allowance units are accrued. For example all_days means all allowance days are given on the first day of the cycle.\n\n`all_days` `generated_days` `generated_days_monthly` `generated_days_monthly_first_day` `monthly_fifteenth` `mensiversary` `bimonthly_first_and_fifteenth` `bimonthly_fifteenth_and_last`";
                        readonly enum: readonly ["all_days", "generated_days", "generated_days_monthly", "generated_days_monthly_first_day", "monthly_fifteenth", "mensiversary", "bimonthly_first_and_fifteenth", "bimonthly_fifteenth_and_last"];
                        readonly examples: readonly ["all_days"];
                    };
                    readonly carry_over_days: {
                        readonly type: "integer";
                        readonly description: "How many units can carry over between cycles";
                        readonly examples: readonly [15];
                    };
                    readonly carry_over_units_in_cents: {
                        readonly type: "integer";
                        readonly description: "How many units can carry over between cycles multiplied by 100";
                        readonly examples: readonly [1500];
                    };
                    readonly count_holiday_as_workable: {
                        readonly type: "boolean";
                        readonly description: "This setting flags if units taken during a bank holiday should be deducted or not from allowance.";
                    };
                    readonly cycle_length: {
                        readonly type: "integer";
                        readonly description: "How many months does each allowance cycle last";
                        readonly examples: readonly [12];
                    };
                    readonly cycle_start: {
                        readonly type: "string";
                        readonly description: "When does the cycle start.";
                        readonly examples: readonly ["jan"];
                    };
                    readonly days_type: {
                        readonly type: "string";
                        readonly description: "Indicates if the allowance is based on working on calendar days.\n\n`working_days` `natural_days` `natural_days_only_range` `french_calendar_days` `french_ouvres`";
                        readonly enum: readonly ["working_days", "natural_days", "natural_days_only_range", "french_calendar_days", "french_ouvres"];
                        readonly examples: readonly ["working_days"];
                    };
                    readonly employee_carry_over_starting_year: {
                        readonly type: "integer";
                        readonly description: "When does the carryover start";
                        readonly examples: readonly [1];
                    };
                    readonly expire_in_months: {
                        readonly type: "integer";
                        readonly description: "When does the carryover expire in months.";
                        readonly examples: readonly [6];
                    };
                    readonly frequency: {
                        readonly type: "string";
                        readonly description: "Defines duration of the allowance cycles. Can be \"yearly\", \"monthly_flexible\" or \"lifetime\"\n\n`monthly_flexible` `yearly` `lifetime`";
                        readonly enum: readonly ["monthly_flexible", "yearly", "lifetime"];
                        readonly examples: readonly ["yearly"];
                    };
                    readonly holiday_allowance_in_cents: {
                        readonly type: "integer";
                        readonly description: "Base amount of holiday allowance units multiplied by 100";
                        readonly examples: readonly [2300];
                    };
                    readonly leave_type_ids: {
                        readonly type: "array";
                        readonly description: "An array of leave type ids associated with that allowance";
                        readonly items: {
                            readonly type: "integer";
                        };
                        readonly examples: readonly [1, 2, 3, 4];
                    };
                    readonly maximum_amount_in_cents: {
                        readonly type: "integer";
                        readonly description: "Maximum the allowance can reach on accrued";
                        readonly examples: readonly [2800];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Allowance name set by the user";
                        readonly examples: readonly ["Holiday Allowance"];
                    };
                    readonly negative_counter_type: {
                        readonly type: "string";
                        readonly description: "Whether the allowance allows to request more days than available\n\n`negative_counter_disabled` `negative_counter_enabled`";
                        readonly enum: readonly ["negative_counter_disabled", "negative_counter_enabled"];
                        readonly examples: readonly ["negative_counter_disabled"];
                    };
                    readonly position: {
                        readonly type: "integer";
                        readonly description: "Indicates the position in the allowance when rendering them in UI";
                        readonly examples: readonly [0];
                    };
                    readonly proration_type: {
                        readonly type: "string";
                        readonly description: "Whether the allowance has proration enabled or not.\n\n`proration_enabled` `proration_disabled`";
                        readonly enum: readonly ["proration_enabled", "proration_disabled"];
                        readonly examples: readonly ["proration_enabled"];
                    };
                    readonly pto_proratio_enabled: {
                        readonly type: "boolean";
                        readonly description: "Whether the allowance days are prorrated or not";
                    };
                    readonly range_type: {
                        readonly type: "string";
                        readonly description: "Configures how leaves duration is handled.\n\n`exact_range` `extra_non_working_days_at_end`";
                        readonly enum: readonly ["exact_range", "extra_non_working_days_at_end"];
                        readonly examples: readonly ["working_days"];
                    };
                    readonly rounding: {
                        readonly type: "string";
                        readonly description: "How the accrued units of the allowance are rounded. It depends if the allowance is set in hours or days.\n\n`half_day` `decimals` `quarters` `round_up`";
                        readonly enum: readonly ["half_day", "decimals", "quarters", "round_up"];
                        readonly examples: readonly ["half_day"];
                    };
                    readonly send_notification: {
                        readonly type: "boolean";
                    };
                    readonly source_units: {
                        readonly type: "string";
                        readonly description: "This field configures the type of allowance (fixed balance, based on worked time)\n\n`base_units` `overtime_units` `by_worked_time`";
                        readonly enum: readonly ["base_units", "overtime_units", "by_worked_time"];
                        readonly examples: readonly ["base_units"];
                    };
                    readonly tenure_period_transition: {
                        readonly type: "string";
                        readonly description: "In case the allowance has tenure periods, when is this tenure applied.\n\n`beginning_of_cycle` `end_of_cycle` `after_milestone`";
                        readonly enum: readonly ["beginning_of_cycle", "end_of_cycle", "after_milestone"];
                        readonly examples: readonly ["beginning_of_cycle"];
                    };
                    readonly tenure_periods: {
                        readonly type: "array";
                        readonly description: "The tenure periods associated with the allowance.";
                        readonly items: {};
                    };
                    readonly tenure_periods_enabled: {
                        readonly type: "boolean";
                        readonly description: "Whether the allowance has tenure periods enabled or not.";
                    };
                    readonly timeoff_cycle: {
                        readonly type: "string";
                        readonly description: "Value to indicate how the allowance cycle is configured. Its an abbreviation of the first and last month.";
                        readonly examples: readonly ["jan_dec"];
                    };
                    readonly timeoff_policy_id: {
                        readonly type: "integer";
                        readonly description: "The Id of the policy to which the allowance belongs to";
                        readonly examples: readonly [1];
                    };
                    readonly unlimited_accrued_hours: {
                        readonly type: "boolean";
                        readonly description: "Flag to indicate if there is unlimited accrual.";
                    };
                    readonly unlimited_carry_over: {
                        readonly type: "boolean";
                        readonly description: "Flag to indicate if there is unlimited carry over.";
                    };
                    readonly unlimited_carry_over_expiration: {
                        readonly type: "boolean";
                        readonly description: "Boolean to flag if carryover does not expire";
                    };
                    readonly unlimited_holidays: {
                        readonly type: "boolean";
                        readonly description: "Flag to indicate that the allowance has unlimited available days";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTimeoffAllowancesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "allowance_type", "available_days", "count_holiday_as_workable", "leave_type_ids", "name", "proration_type", "rounding", "tenure_periods", "timeoff_cycle", "timeoff_policy_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier of the allowance";
                    readonly examples: readonly [1];
                };
                readonly accrued_denominator_in_cents: {
                    readonly type: "integer";
                    readonly description: "Only for Allowances based on worked time. It represents how many units you need to work to be granted allowance units";
                    readonly examples: readonly [1000];
                };
                readonly accrued_factor_in_cents: {
                    readonly type: "integer";
                    readonly description: "Only for Allowances based on worked time. It represents how many units you are given per unit of time worked";
                    readonly examples: readonly [10];
                };
                readonly accrued_units_availability: {
                    readonly type: "string";
                    readonly description: "When can the acrrued units be spent.\n\n`current_cycle` `next_cycle`";
                    readonly enum: readonly ["current_cycle", "next_cycle"];
                    readonly examples: readonly ["current_cycle"];
                };
                readonly allowance_type: {
                    readonly type: "string";
                    readonly description: "Sets the allowance units. Can be \"days\" or \"hours\"\n\n`days` `hours`";
                    readonly enum: readonly ["days", "hours"];
                    readonly examples: readonly ["days"];
                };
                readonly available_days: {
                    readonly type: "string";
                    readonly description: "Indicates how the allowance units are accrued. For example all_days means all allowance days are given on the first day of the cycle.\n\n`all_days` `generated_days` `generated_days_monthly` `generated_days_monthly_first_day` `monthly_fifteenth` `mensiversary` `bimonthly_first_and_fifteenth` `bimonthly_fifteenth_and_last`";
                    readonly enum: readonly ["all_days", "generated_days", "generated_days_monthly", "generated_days_monthly_first_day", "monthly_fifteenth", "mensiversary", "bimonthly_first_and_fifteenth", "bimonthly_fifteenth_and_last"];
                    readonly examples: readonly ["all_days"];
                };
                readonly carry_over_days: {
                    readonly type: "integer";
                    readonly description: "How many units can carry over between cycles";
                    readonly examples: readonly [15];
                };
                readonly carry_over_units_in_cents: {
                    readonly type: "integer";
                    readonly description: "How many units can carry over between cycles multiplied by 100";
                    readonly examples: readonly [1500];
                };
                readonly count_holiday_as_workable: {
                    readonly type: "boolean";
                    readonly description: "This setting flags if units taken during a bank holiday should be deducted or not from allowance.";
                };
                readonly cycle_length: {
                    readonly type: "integer";
                    readonly description: "How many months does each allowance cycle last";
                    readonly examples: readonly [12];
                };
                readonly cycle_start: {
                    readonly type: "string";
                    readonly description: "When does the cycle start.";
                    readonly examples: readonly ["jan"];
                };
                readonly days_type: {
                    readonly type: "string";
                    readonly description: "Indicates if the allowance is based on working on calendar days.\n\n`working_days` `natural_days` `natural_days_only_range` `french_calendar_days` `french_ouvres`";
                    readonly enum: readonly ["working_days", "natural_days", "natural_days_only_range", "french_calendar_days", "french_ouvres"];
                    readonly examples: readonly ["working_days"];
                };
                readonly employee_carry_over_starting_year: {
                    readonly type: "integer";
                    readonly description: "When does the carryover start";
                    readonly examples: readonly [1];
                };
                readonly expire_in_months: {
                    readonly type: "integer";
                    readonly description: "When does the carryover expire in months.";
                    readonly examples: readonly [6];
                };
                readonly frequency: {
                    readonly type: "string";
                    readonly description: "Defines duration of the allowance cycles. Can be \"yearly\", \"monthly_flexible\" or \"lifetime\"\n\n`monthly_flexible` `yearly` `lifetime`";
                    readonly enum: readonly ["monthly_flexible", "yearly", "lifetime"];
                    readonly examples: readonly ["yearly"];
                };
                readonly holiday_allowance_in_cents: {
                    readonly type: "integer";
                    readonly description: "Base amount of holiday allowance units multiplied by 100";
                    readonly examples: readonly [2300];
                };
                readonly leave_type_ids: {
                    readonly type: "array";
                    readonly description: "An array of leave type ids associated with that allowance";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3, 4];
                };
                readonly maximum_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "Maximum the allowance can reach on accrued";
                    readonly examples: readonly [2800];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Allowance name set by the user";
                    readonly examples: readonly ["Holiday Allowance"];
                };
                readonly negative_counter_type: {
                    readonly type: "string";
                    readonly description: "Whether the allowance allows to request more days than available\n\n`negative_counter_disabled` `negative_counter_enabled`";
                    readonly enum: readonly ["negative_counter_disabled", "negative_counter_enabled"];
                    readonly examples: readonly ["negative_counter_disabled"];
                };
                readonly position: {
                    readonly type: "integer";
                    readonly description: "Indicates the position in the allowance when rendering them in UI";
                    readonly examples: readonly [0];
                };
                readonly proration_type: {
                    readonly type: "string";
                    readonly description: "Whether the allowance has proration enabled or not.\n\n`proration_enabled` `proration_disabled`";
                    readonly enum: readonly ["proration_enabled", "proration_disabled"];
                    readonly examples: readonly ["proration_enabled"];
                };
                readonly pto_proratio_enabled: {
                    readonly type: "boolean";
                    readonly description: "Whether the allowance days are prorrated or not";
                };
                readonly range_type: {
                    readonly type: "string";
                    readonly description: "Configures how leaves duration is handled.\n\n`exact_range` `extra_non_working_days_at_end`";
                    readonly enum: readonly ["exact_range", "extra_non_working_days_at_end"];
                    readonly examples: readonly ["working_days"];
                };
                readonly rounding: {
                    readonly type: "string";
                    readonly description: "How the accrued units of the allowance are rounded. It depends if the allowance is set in hours or days.\n\n`half_day` `decimals` `quarters` `round_up`";
                    readonly enum: readonly ["half_day", "decimals", "quarters", "round_up"];
                    readonly examples: readonly ["half_day"];
                };
                readonly send_notification: {
                    readonly type: "boolean";
                };
                readonly source_units: {
                    readonly type: "string";
                    readonly description: "This field configures the type of allowance (fixed balance, based on worked time)\n\n`base_units` `overtime_units` `by_worked_time`";
                    readonly enum: readonly ["base_units", "overtime_units", "by_worked_time"];
                    readonly examples: readonly ["base_units"];
                };
                readonly tenure_period_transition: {
                    readonly type: "string";
                    readonly description: "In case the allowance has tenure periods, when is this tenure applied.\n\n`beginning_of_cycle` `end_of_cycle` `after_milestone`";
                    readonly enum: readonly ["beginning_of_cycle", "end_of_cycle", "after_milestone"];
                    readonly examples: readonly ["beginning_of_cycle"];
                };
                readonly tenure_periods: {
                    readonly type: "array";
                    readonly description: "The tenure periods associated with the allowance.";
                    readonly items: {};
                };
                readonly tenure_periods_enabled: {
                    readonly type: "boolean";
                    readonly description: "Whether the allowance has tenure periods enabled or not.";
                };
                readonly timeoff_cycle: {
                    readonly type: "string";
                    readonly description: "Value to indicate how the allowance cycle is configured. Its an abbreviation of the first and last month.";
                    readonly examples: readonly ["jan_dec"];
                };
                readonly timeoff_policy_id: {
                    readonly type: "integer";
                    readonly description: "The Id of the policy to which the allowance belongs to";
                    readonly examples: readonly [1];
                };
                readonly unlimited_accrued_hours: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate if there is unlimited accrual.";
                };
                readonly unlimited_carry_over: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate if there is unlimited carry over.";
                };
                readonly unlimited_carry_over_expiration: {
                    readonly type: "boolean";
                    readonly description: "Boolean to flag if carryover does not expire";
                };
                readonly unlimited_holidays: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate that the allowance has unlimited available days";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTimeoffBlockedPeriods: {
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "company_id", "name", "leave_type_ids", "time_periods", "strategy", "members"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Unique identifier of the blocked period";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "Company id of the blocked period";
                        readonly examples: readonly [1];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Name of the blocked period.";
                        readonly examples: readonly ["Onboarding period"];
                    };
                    readonly leave_type_ids: {
                        readonly type: "array";
                        readonly description: "Leave types for which absence request has been blocked";
                        readonly items: {
                            readonly type: "integer";
                        };
                        readonly examples: readonly [1, 2];
                    };
                    readonly time_periods: {
                        readonly type: "array";
                        readonly description: "The tenure periods associated with the allowance.";
                        readonly items: {};
                    };
                    readonly strategy: {
                        readonly type: "string";
                        readonly description: "Type of access group";
                        readonly examples: readonly ["everyone"];
                    };
                    readonly members: {
                        readonly type: "array";
                        readonly description: "Employees whose timeoff will be affected";
                        readonly items: {
                            readonly type: "integer";
                        };
                        readonly examples: readonly [1, 2];
                    };
                    readonly location_ids: {
                        readonly type: "array";
                        readonly description: "Array of locations workplace identifiers where the employees are located";
                        readonly items: {
                            readonly type: "integer";
                        };
                        readonly examples: readonly [1, 2];
                    };
                    readonly team_ids: {
                        readonly type: "array";
                        readonly description: "Array of team identifiers which the selected employees belong to";
                        readonly items: {
                            readonly type: "integer";
                        };
                        readonly examples: readonly [1, 2];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTimeoffLeaveTypes: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "Identifiers of the leave types";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "company_ids[]": {
                    readonly type: "array";
                    readonly description: "Identifiers of the companies";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is active";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly payable: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is payable";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly identifier: {
                    readonly type: "boolean";
                    readonly description: "A unique identifier for the leave type, or an array of identifiers";
                    readonly examples: readonly ["annual_leave"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the employee";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly reference_date: {
                    readonly type: "string";
                    readonly description: "A reference date for the leave type";
                    readonly examples: readonly ["2024-08-22"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly leave_type_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of a specific leave type";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "name", "identifier", "color", "attachment", "visibility", "workable", "company_id", "allowance_ids", "details_required"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Identifier of the leave type";
                        readonly examples: readonly [1];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Name of the leave type";
                        readonly examples: readonly ["Annual Leave"];
                    };
                    readonly translated_name: {
                        readonly type: "string";
                        readonly description: "Translated name of the leave type, if available";
                        readonly examples: readonly ["Congé Annuel"];
                    };
                    readonly identifier: {
                        readonly type: "string";
                        readonly description: "Unique identifier of the leave type";
                        readonly examples: readonly ["annual_leave"];
                    };
                    readonly color: {
                        readonly type: "string";
                        readonly description: "The color associated with this leave type";
                        readonly examples: readonly ["red"];
                    };
                    readonly active: {
                        readonly type: "boolean";
                        readonly description: "Whether the leave type is active";
                        readonly examples: readonly [true];
                    };
                    readonly editable: {
                        readonly type: "boolean";
                        readonly description: "Whether the leave type is editable";
                    };
                    readonly approval_required: {
                        readonly type: "boolean";
                        readonly description: "Whether approval is required for this leave type";
                        readonly examples: readonly [true];
                    };
                    readonly accrues: {
                        readonly type: "boolean";
                        readonly description: "Whether the leave type accrues over time";
                        readonly examples: readonly [true];
                    };
                    readonly attachment: {
                        readonly type: "boolean";
                        readonly description: "Whether an attachment is required for this leave type";
                        readonly examples: readonly [true];
                    };
                    readonly allow_endless: {
                        readonly type: "boolean";
                        readonly description: "Whether endless leave is allowed";
                    };
                    readonly restricted: {
                        readonly type: "boolean";
                        readonly description: "Whether the leave type is restricted";
                    };
                    readonly visibility: {
                        readonly type: "boolean";
                        readonly description: "Whether the leave type is visible to employees";
                        readonly examples: readonly [true];
                    };
                    readonly workable: {
                        readonly type: "boolean";
                        readonly description: "Whether the leave type is workable";
                    };
                    readonly payable: {
                        readonly type: "boolean";
                        readonly description: "Whether the leave type is payable";
                        readonly examples: readonly [true];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "Identifier of the company associated with this leave type";
                        readonly examples: readonly [1];
                    };
                    readonly is_attachment_mandatory: {
                        readonly type: "boolean";
                        readonly description: "Whether the attachment is mandatory";
                    };
                    readonly allowance_ids: {
                        readonly type: "array";
                        readonly description: "List of allowance identifiers associated with this leave type";
                        readonly items: {
                            readonly type: "integer";
                        };
                        readonly examples: readonly [1, 2];
                    };
                    readonly half_days_units_enabled: {
                        readonly type: "boolean";
                        readonly description: "Whether half-day units are enabled for this leave type";
                        readonly examples: readonly [true];
                    };
                    readonly max_days_in_cents: {
                        readonly type: "integer";
                        readonly description: "Maximum days in cents that can be taken";
                        readonly examples: readonly [5000];
                    };
                    readonly min_days_in_cents: {
                        readonly type: "integer";
                        readonly description: "Minimum days in cents that must be taken";
                        readonly examples: readonly [1000];
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "Description of the leave type";
                        readonly examples: readonly ["This leave type is for annual holidays."];
                    };
                    readonly details_required: {
                        readonly type: "boolean";
                        readonly description: "Whether additional details are required for the leave type";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTimeoffLeaveTypesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "identifier", "color", "attachment", "visibility", "workable", "company_id", "allowance_ids", "details_required"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the leave type";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the leave type";
                    readonly examples: readonly ["Annual Leave"];
                };
                readonly translated_name: {
                    readonly type: "string";
                    readonly description: "Translated name of the leave type, if available";
                    readonly examples: readonly ["Congé Annuel"];
                };
                readonly identifier: {
                    readonly type: "string";
                    readonly description: "Unique identifier of the leave type";
                    readonly examples: readonly ["annual_leave"];
                };
                readonly color: {
                    readonly type: "string";
                    readonly description: "The color associated with this leave type";
                    readonly examples: readonly ["red"];
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is active";
                    readonly examples: readonly [true];
                };
                readonly editable: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is editable";
                };
                readonly approval_required: {
                    readonly type: "boolean";
                    readonly description: "Whether approval is required for this leave type";
                    readonly examples: readonly [true];
                };
                readonly accrues: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type accrues over time";
                    readonly examples: readonly [true];
                };
                readonly attachment: {
                    readonly type: "boolean";
                    readonly description: "Whether an attachment is required for this leave type";
                    readonly examples: readonly [true];
                };
                readonly allow_endless: {
                    readonly type: "boolean";
                    readonly description: "Whether endless leave is allowed";
                };
                readonly restricted: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is restricted";
                };
                readonly visibility: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is visible to employees";
                    readonly examples: readonly [true];
                };
                readonly workable: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is workable";
                };
                readonly payable: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is payable";
                    readonly examples: readonly [true];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the company associated with this leave type";
                    readonly examples: readonly [1];
                };
                readonly is_attachment_mandatory: {
                    readonly type: "boolean";
                    readonly description: "Whether the attachment is mandatory";
                };
                readonly allowance_ids: {
                    readonly type: "array";
                    readonly description: "List of allowance identifiers associated with this leave type";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                };
                readonly half_days_units_enabled: {
                    readonly type: "boolean";
                    readonly description: "Whether half-day units are enabled for this leave type";
                    readonly examples: readonly [true];
                };
                readonly max_days_in_cents: {
                    readonly type: "integer";
                    readonly description: "Maximum days in cents that can be taken";
                    readonly examples: readonly [5000];
                };
                readonly min_days_in_cents: {
                    readonly type: "integer";
                    readonly description: "Minimum days in cents that must be taken";
                    readonly examples: readonly [1000];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Description of the leave type";
                    readonly examples: readonly ["This leave type is for annual holidays."];
                };
                readonly details_required: {
                    readonly type: "boolean";
                    readonly description: "Whether additional details are required for the leave type";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTimeoffLeaves: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "The leave ids to retrieve";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "employee_ids[]": {
                    readonly type: "array";
                    readonly description: "The employee ids to retrieve";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "leave_type_id[]": {
                    readonly type: "array";
                    readonly description: "The leave type id to retrieve";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly to: {
                    readonly type: "string";
                    readonly description: "Valid date following the format YYYY-MM-DD";
                    readonly examples: readonly ["2024-01-02"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly from: {
                    readonly type: "string";
                    readonly description: "Valid date following the format YYYY-MM-DD";
                    readonly examples: readonly ["2024-01-01"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly only_active: {
                    readonly type: "boolean";
                    readonly description: "Retrieve only active leaves";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly approved: {
                    readonly type: "boolean";
                    readonly description: "Retrieve approved leaves";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_pending: {
                    readonly type: "boolean";
                    readonly description: "Retrieve pending leaves";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_leave_type: {
                    readonly type: "boolean";
                    readonly description: "Retrieve leave types";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly include_duration: {
                    readonly type: "boolean";
                    readonly description: "Retrieve leave duration";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly type_is_workable: {
                    readonly type: "boolean";
                    readonly description: "Retrieve workable leaves";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["include_leave_type", "include_duration"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "company_id", "employee_id", "start_on", "updated_at"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Identifier of the Leave";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "Company identifier of the employee of the leave";
                        readonly examples: readonly [1];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "Employee identifier of the leave";
                        readonly examples: readonly [1];
                    };
                    readonly start_on: {
                        readonly type: "string";
                        readonly description: "The start date of the leave";
                        readonly examples: readonly ["2023-09-01"];
                    };
                    readonly finish_on: {
                        readonly type: "string";
                        readonly description: "The end date of the leave";
                        readonly examples: readonly ["2023-09-10"];
                    };
                    readonly half_day: {
                        readonly type: "string";
                        readonly description: "Indicates if the leave is taken as a half-day";
                        readonly examples: readonly ["end_of_day"];
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "A description of the leave";
                        readonly examples: readonly ["Annual family vacation"];
                    };
                    readonly reason: {
                        readonly type: "string";
                        readonly description: "The reason provided by the employee for taking the leave";
                        readonly examples: readonly ["Medical appointment"];
                    };
                    readonly leave_type_id: {
                        readonly type: "integer";
                        readonly description: "The identifier for the type of leave";
                        readonly examples: readonly [2];
                    };
                    readonly leave_type_name: {
                        readonly type: "string";
                        readonly description: "The name of the leave type";
                        readonly examples: readonly ["Vacation"];
                    };
                    readonly approved: {
                        readonly type: "boolean";
                        readonly description: "Indicates whether the leave has been approved";
                        readonly examples: readonly [true];
                    };
                    readonly employee_full_name: {
                        readonly type: "string";
                        readonly description: "The full name of the employee taking the leave";
                        readonly examples: readonly ["John Doe"];
                    };
                    readonly start_time: {
                        readonly type: "string";
                        readonly description: "The start time of the leave";
                        readonly examples: readonly ["09:00"];
                    };
                    readonly hours_amount_in_cents: {
                        readonly type: "integer";
                        readonly description: "The total number of hours taken for the leave, represented in cents";
                        readonly examples: readonly [80000];
                    };
                    readonly updated_at: {
                        readonly type: "string";
                        readonly description: "The updated at date of the leave";
                        readonly examples: readonly ["2023-08-31T15:30:00Z"];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "The created at date of the leave";
                        readonly examples: readonly ["2023-08-01T08:00:00Z"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTimeoffLeavesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "employee_id", "start_on", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the Leave";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the employee of the leave";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee identifier of the leave";
                    readonly examples: readonly [1];
                };
                readonly start_on: {
                    readonly type: "string";
                    readonly description: "The start date of the leave";
                    readonly examples: readonly ["2023-09-01"];
                };
                readonly finish_on: {
                    readonly type: "string";
                    readonly description: "The end date of the leave";
                    readonly examples: readonly ["2023-09-10"];
                };
                readonly half_day: {
                    readonly type: "string";
                    readonly description: "Indicates if the leave is taken as a half-day";
                    readonly examples: readonly ["end_of_day"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A description of the leave";
                    readonly examples: readonly ["Annual family vacation"];
                };
                readonly reason: {
                    readonly type: "string";
                    readonly description: "The reason provided by the employee for taking the leave";
                    readonly examples: readonly ["Medical appointment"];
                };
                readonly leave_type_id: {
                    readonly type: "integer";
                    readonly description: "The identifier for the type of leave";
                    readonly examples: readonly [2];
                };
                readonly leave_type_name: {
                    readonly type: "string";
                    readonly description: "The name of the leave type";
                    readonly examples: readonly ["Vacation"];
                };
                readonly approved: {
                    readonly type: "boolean";
                    readonly description: "Indicates whether the leave has been approved";
                    readonly examples: readonly [true];
                };
                readonly employee_full_name: {
                    readonly type: "string";
                    readonly description: "The full name of the employee taking the leave";
                    readonly examples: readonly ["John Doe"];
                };
                readonly start_time: {
                    readonly type: "string";
                    readonly description: "The start time of the leave";
                    readonly examples: readonly ["09:00"];
                };
                readonly hours_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The total number of hours taken for the leave, represented in cents";
                    readonly examples: readonly [80000];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "The updated at date of the leave";
                    readonly examples: readonly ["2023-08-31T15:30:00Z"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "The created at date of the leave";
                    readonly examples: readonly ["2023-08-01T08:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTimeoffPolicies: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "The policies ids to retrieve.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "company_ids[]": {
                    readonly type: "array";
                    readonly description: "The company ids to retrieve policies.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "name", "company_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "The policy id.";
                        readonly examples: readonly [1];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Policy name.";
                        readonly examples: readonly ["Policy for remotes"];
                    };
                    readonly main: {
                        readonly type: "boolean";
                        readonly description: "Is the main policy? It will return true if it's the main policy if not it will return false.";
                        readonly examples: readonly [true];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "The company id.";
                        readonly examples: readonly [1];
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "The policy description.";
                        readonly examples: readonly ["This policy will apply only for remote employees"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTimeoffPoliciesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "The policy id.";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Policy name.";
                    readonly examples: readonly ["Policy for remotes"];
                };
                readonly main: {
                    readonly type: "boolean";
                    readonly description: "Is the main policy? It will return true if it's the main policy if not it will return false.";
                    readonly examples: readonly [true];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "The company id.";
                    readonly examples: readonly [1];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The policy description.";
                    readonly examples: readonly ["This policy will apply only for remote employees"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTimeoffPolicyTimelines: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly employee_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly reference_date: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["employee_id", "reference_date"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["employee_id", "start_limit_date", "end_limit_date", "items", "id"];
                readonly properties: {
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly start_limit_date: {
                        readonly type: "string";
                    };
                    readonly end_limit_date: {
                        readonly type: "string";
                    };
                    readonly items: {
                        readonly type: "array";
                        readonly items: {};
                    };
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "This is the employee id since it's a virtual entity";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTrainingsCategories: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "name", "company_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly company_id: {
                        readonly type: "integer";
                    };
                    readonly created_at: {
                        readonly type: "string";
                    };
                    readonly updated_at: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTrainingsCategoriesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTrainingsSessionAccessMemberships: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly session_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly search: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly team_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["session_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "access_id", "session_id", "session_attendance_status", "team_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly access_id: {
                        readonly type: "integer";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly session_id: {
                        readonly type: "integer";
                    };
                    readonly first_name: {
                        readonly type: "string";
                    };
                    readonly last_name: {
                        readonly type: "string";
                    };
                    readonly job_title: {
                        readonly type: "string";
                    };
                    readonly session_attendance_status: {
                        readonly type: "string";
                    };
                    readonly team_id: {
                        readonly type: "integer";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTrainingsSessionAccessMembershipsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "access_id", "session_id", "session_attendance_status", "team_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly access_id: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly session_id: {
                    readonly type: "integer";
                };
                readonly first_name: {
                    readonly type: "string";
                };
                readonly last_name: {
                    readonly type: "string";
                };
                readonly job_title: {
                    readonly type: "string";
                };
                readonly session_attendance_status: {
                    readonly type: "string";
                };
                readonly team_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTrainingsSessionAttendances: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly session_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "session_access_membership_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "access_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "status", "session_access_membership_id", "access_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly status: {
                        readonly type: "string";
                    };
                    readonly session_access_membership_id: {
                        readonly type: "integer";
                    };
                    readonly access_id: {
                        readonly type: "integer";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTrainingsSessionAttendancesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "status", "session_access_membership_id", "access_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly session_access_membership_id: {
                    readonly type: "integer";
                };
                readonly access_id: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTrainingsSessions: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "This field is used to filter those sessions whose id match with the given.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "training_ids[]": {
                    readonly type: "array";
                    readonly description: "This field is used to filter those sessions whose belong to these trainings.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly search: {
                    readonly type: "string";
                    readonly description: "This field is used to filter those sessions whose name include some of the text written.";
                    readonly examples: readonly ["Session name"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly start_after: {
                    readonly type: "string";
                    readonly description: "This field is used to filter those sessions whose starts date is after the given.";
                    readonly examples: readonly ["2024-01-05"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly start_before: {
                    readonly type: "string";
                    readonly description: "This field is used to filter those sessions whose starts date is before the given.";
                    readonly examples: readonly ["2024-01-05"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly access_id: {
                    readonly type: "integer";
                    readonly description: "access_id associated to the employee, refers to employees/employees endpoint.";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "training_class_ids[]": {
                    readonly type: "array";
                    readonly description: "This field is used to filter those sessions whose belong to this training groups.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly next: {
                    readonly type: "boolean";
                    readonly description: "When this field is active, it filters and orders those sessions taht are closest in time, with the first element being the closest.";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "name", "training_id", "subsidized", "session_attendances_status"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly training_id: {
                        readonly type: "integer";
                    };
                    readonly description: {
                        readonly type: "string";
                    };
                    readonly training_class_id: {
                        readonly type: "integer";
                    };
                    readonly starts_at: {
                        readonly type: "string";
                    };
                    readonly ends_at: {
                        readonly type: "string";
                    };
                    readonly due_date: {
                        readonly type: "string";
                    };
                    readonly duration: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly modality: {
                        readonly type: "string";
                    };
                    readonly link: {
                        readonly type: "string";
                    };
                    readonly location: {
                        readonly type: "string";
                    };
                    readonly session_attendance_ids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                        };
                    };
                    readonly session_feedback_id: {
                        readonly type: "integer";
                    };
                    readonly subsidized: {
                        readonly type: "boolean";
                    };
                    readonly status: {
                        readonly type: "string";
                    };
                    readonly session_attendances_status: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTrainingsSessionsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "training_id", "subsidized", "session_attendances_status"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly training_id: {
                    readonly type: "integer";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly training_class_id: {
                    readonly type: "integer";
                };
                readonly starts_at: {
                    readonly type: "string";
                };
                readonly ends_at: {
                    readonly type: "string";
                };
                readonly due_date: {
                    readonly type: "string";
                };
                readonly duration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly modality: {
                    readonly type: "string";
                };
                readonly link: {
                    readonly type: "string";
                };
                readonly location: {
                    readonly type: "string";
                };
                readonly session_attendance_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly session_feedback_id: {
                    readonly type: "integer";
                };
                readonly subsidized: {
                    readonly type: "boolean";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly session_attendances_status: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTrainingsTrainingMemberships: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly training_id: {
                    readonly type: "integer";
                    readonly description: "This field is used to filter those trainings memberships that belongs to this training.";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ids[]": {
                    readonly type: "array";
                    readonly description: "This field is used to filter those trainings memberships whose id match with the given.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly access_id: {
                    readonly type: "integer";
                    readonly description: "access_id associated to the employee, refers to employees/employees endpoint.";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly search: {
                    readonly type: "string";
                    readonly description: "This field is used to filter those trainings memberships whose employee name include some of the text written.";
                    readonly examples: readonly ["Jane Doe"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly team_id: {
                    readonly type: "integer";
                    readonly description: "This field is used to filter those memberships whose employees belongs to this team.";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "This field is used to filter those trainings memberships whose attendance status is the given.";
                    readonly examples: readonly ["notstarted"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly class_id: {
                    readonly type: "integer";
                    readonly description: "This field is used to filter those trainings memberships whose employees belongs to this group.";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["training_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "access_id", "training_id", "status"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Unique identifier for the training membership.";
                        readonly examples: readonly [1];
                    };
                    readonly access_id: {
                        readonly type: "integer";
                        readonly description: "Access_id associated to the employee, refers to employees/employees endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly training_id: {
                        readonly type: "integer";
                        readonly description: "This field is used to filter those trainings memberships that belongs to this training.";
                        readonly examples: readonly [1];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "This field is used to filter those trainings memberships whose attendance status is the given.";
                        readonly examples: readonly ["notstarted"];
                    };
                    readonly training_due_date: {
                        readonly type: "string";
                        readonly description: "This field is used for those trainings with an expiry date.";
                        readonly examples: readonly ["2022-01-01"];
                    };
                    readonly training_completed_at: {
                        readonly type: "string";
                        readonly description: "This field is used to record the date a training was completed for trainings that have an expiry date.";
                        readonly examples: readonly ["2022-01-01"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTrainingsTrainingMembershipsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "access_id", "training_id", "status"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the training membership.";
                    readonly examples: readonly [1];
                };
                readonly access_id: {
                    readonly type: "integer";
                    readonly description: "Access_id associated to the employee, refers to employees/employees endpoint.";
                    readonly examples: readonly [1];
                };
                readonly training_id: {
                    readonly type: "integer";
                    readonly description: "This field is used to filter those trainings memberships that belongs to this training.";
                    readonly examples: readonly [1];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "This field is used to filter those trainings memberships whose attendance status is the given.";
                    readonly examples: readonly ["notstarted"];
                };
                readonly training_due_date: {
                    readonly type: "string";
                    readonly description: "This field is used for those trainings with an expiry date.";
                    readonly examples: readonly ["2022-01-01"];
                };
                readonly training_completed_at: {
                    readonly type: "string";
                    readonly description: "This field is used to record the date a training was completed for trainings that have an expiry date.";
                    readonly examples: readonly ["2022-01-01"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTrainingsTrainings: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly access_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly search: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly status: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly catalog: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly only_assigned: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly with_expired_memberships: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "company_id", "author_id", "name", "description", "external", "fundae_subsidized", "cost", "subsidized_cost", "cost_decimal", "subsidized_cost_decimal", "year", "catalog", "competency_ids", "total_training_cost", "total_training_subsidized_cost", "total_participants", "training_attendance_status", "access_id", "session_attendance", "competency_id", "modality"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly company_id: {
                        readonly type: "integer";
                    };
                    readonly author_id: {
                        readonly type: "integer";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                    };
                    readonly description: {
                        readonly type: "string";
                    };
                    readonly created_at: {
                        readonly type: "string";
                    };
                    readonly updated_at: {
                        readonly type: "string";
                    };
                    readonly external_provider: {
                        readonly type: "string";
                    };
                    readonly external: {
                        readonly type: "boolean";
                    };
                    readonly total_cost: {
                        readonly type: "integer";
                    };
                    readonly fundae_subsidized: {
                        readonly type: "boolean";
                    };
                    readonly cost: {
                        readonly type: "integer";
                    };
                    readonly subsidized_cost: {
                        readonly type: "integer";
                    };
                    readonly total_cost_decimal: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly cost_decimal: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly subsidized_cost_decimal: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly category_ids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                        };
                    };
                    readonly status: {
                        readonly type: "string";
                    };
                    readonly year: {
                        readonly type: "integer";
                    };
                    readonly catalog: {
                        readonly type: "boolean";
                    };
                    readonly competency_ids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                        };
                    };
                    readonly total_training_cost: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly total_training_subsidized_cost: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly total_participants: {
                        readonly type: "integer";
                    };
                    readonly training_attendance_status: {
                        readonly type: "string";
                        readonly enum: readonly ["notassigned", "notstarted", "missing", "started", "partiallycompleted", "completed"];
                        readonly description: "`notassigned` `notstarted` `missing` `started` `partiallycompleted` `completed`";
                    };
                    readonly valid_for: {
                        readonly type: "integer";
                    };
                    readonly objectives: {
                        readonly type: "string";
                        readonly description: "Objectives of the course";
                        readonly examples: readonly ["Intermediate-level communication course that focuses on building and enhancing language skills."];
                    };
                    readonly number_of_expired_participants: {
                        readonly type: "integer";
                        readonly description: "Number of participants that have the course expired or about to expire in the next 3 months. Only applicable to trainings with validity period.";
                        readonly examples: readonly [2];
                    };
                    readonly access_id: {
                        readonly type: "integer";
                    };
                    readonly session_attendance: {
                        readonly type: "string";
                    };
                    readonly competency_id: {
                        readonly type: "integer";
                    };
                    readonly modality: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesTrainingsTrainingsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "author_id", "name", "description", "external", "fundae_subsidized", "cost", "subsidized_cost", "cost_decimal", "subsidized_cost_decimal", "year", "catalog", "competency_ids", "total_training_cost", "total_training_subsidized_cost", "total_participants", "training_attendance_status", "access_id", "session_attendance", "competency_id", "modality"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly author_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly code: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                };
                readonly external_provider: {
                    readonly type: "string";
                };
                readonly external: {
                    readonly type: "boolean";
                };
                readonly total_cost: {
                    readonly type: "integer";
                };
                readonly fundae_subsidized: {
                    readonly type: "boolean";
                };
                readonly cost: {
                    readonly type: "integer";
                };
                readonly subsidized_cost: {
                    readonly type: "integer";
                };
                readonly total_cost_decimal: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly cost_decimal: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly subsidized_cost_decimal: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly category_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly year: {
                    readonly type: "integer";
                };
                readonly catalog: {
                    readonly type: "boolean";
                };
                readonly competency_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly total_training_cost: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly total_training_subsidized_cost: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly total_participants: {
                    readonly type: "integer";
                };
                readonly training_attendance_status: {
                    readonly type: "string";
                    readonly enum: readonly ["notassigned", "notstarted", "missing", "started", "partiallycompleted", "completed"];
                    readonly description: "`notassigned` `notstarted` `missing` `started` `partiallycompleted` `completed`";
                };
                readonly valid_for: {
                    readonly type: "integer";
                };
                readonly objectives: {
                    readonly type: "string";
                    readonly description: "Objectives of the course";
                    readonly examples: readonly ["Intermediate-level communication course that focuses on building and enhancing language skills."];
                };
                readonly number_of_expired_participants: {
                    readonly type: "integer";
                    readonly description: "Number of participants that have the course expired or about to expire in the next 3 months. Only applicable to trainings with validity period.";
                    readonly examples: readonly [2];
                };
                readonly access_id: {
                    readonly type: "integer";
                };
                readonly session_attendance: {
                    readonly type: "string";
                };
                readonly competency_id: {
                    readonly type: "integer";
                };
                readonly modality: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesWorkScheduleDayConfigurations: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly overlap_period_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly schedule_id: {
                    readonly type: "integer";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "overlap_period_id", "weekday", "duration_in_seconds"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly overlap_period_id: {
                        readonly type: "integer";
                    };
                    readonly weekday: {
                        readonly type: "string";
                    };
                    readonly start_at: {
                        readonly type: "string";
                    };
                    readonly duration_in_seconds: {
                        readonly type: "integer";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesWorkScheduleDayConfigurationsId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "overlap_period_id", "weekday", "duration_in_seconds"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly overlap_period_id: {
                    readonly type: "integer";
                };
                readonly weekday: {
                    readonly type: "string";
                };
                readonly start_at: {
                    readonly type: "string";
                };
                readonly duration_in_seconds: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesWorkScheduleOverlapPeriods: {
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "default", "schedule_id", "start_month", "start_day", "end_month", "end_day", "schedule_type"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly default: {
                        readonly type: "boolean";
                    };
                    readonly schedule_id: {
                        readonly type: "integer";
                    };
                    readonly start_month: {
                        readonly type: "integer";
                    };
                    readonly start_day: {
                        readonly type: "integer";
                    };
                    readonly end_month: {
                        readonly type: "integer";
                    };
                    readonly end_day: {
                        readonly type: "integer";
                    };
                    readonly schedule_type: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesWorkScheduleSchedules: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly with_employee_ids: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly with_periods: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["with_employee_ids", "with_periods"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "name", "company_id", "created_at", "updated_at", "employee_ids", "periods"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly archived_at: {
                        readonly type: "string";
                    };
                    readonly company_id: {
                        readonly type: "integer";
                    };
                    readonly created_at: {
                        readonly type: "string";
                    };
                    readonly updated_at: {
                        readonly type: "string";
                    };
                    readonly employee_ids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                        };
                    };
                    readonly periods: {
                        readonly type: "array";
                        readonly items: {};
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetApi20241001ResourcesWorkScheduleSchedulesId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id", "created_at", "updated_at", "employee_ids", "periods"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly archived_at: {
                    readonly type: "string";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                };
                readonly employee_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly periods: {
                    readonly type: "array";
                    readonly items: {};
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesApiPublicWebhookSubscriptions: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["subscription_type", "target_url", "company_id"];
        readonly properties: {
            readonly subscription_type: {
                readonly type: "string";
                readonly description: "Type of the webhook subscription";
                readonly examples: readonly ["ats/job_posting/create"];
            };
            readonly target_url: {
                readonly type: "string";
                readonly description: "URL where the webhook payload will be sent";
                readonly examples: readonly ["https://webhook.site/"];
            };
            readonly name: {
                readonly type: "string";
                readonly description: "Name of the webhook subscription";
                readonly examples: readonly ["Webhook subscription of a job posting created"];
            };
            readonly challenge: {
                readonly type: "string";
                readonly description: "String to verify the subscription";
                readonly examples: readonly ["2bca4e6d-9aaf-4f11-9e5d"];
            };
            readonly company_id: {
                readonly type: "integer";
                readonly description: "Company identifier of the webhook subscription";
                readonly examples: readonly [1];
            };
            readonly api_version: {
                readonly type: "string";
                readonly description: "API version of the webhook subscription that determines the schema of the payload";
                readonly enum: readonly ["2024-10-01"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "target_url", "type", "enabled", "api_version"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the webhook subscription";
                    readonly examples: readonly [1];
                };
                readonly target_url: {
                    readonly type: "string";
                    readonly description: "URL where the webhook payload will be sent";
                    readonly examples: readonly ["https://webhook.site/"];
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the webhook subscription";
                    readonly examples: readonly ["ats/job_posting/create"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the webhook subscription";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the webhook subscription";
                    readonly examples: readonly ["Webhook subscription of a job posting created"];
                };
                readonly challenge: {
                    readonly type: "string";
                    readonly description: "String to verify the subscription";
                    readonly examples: readonly ["2bca4e6d-9aaf-4f11-9e5d"];
                };
                readonly enabled: {
                    readonly type: "boolean";
                    readonly description: "Boolean to enable/disable the subscription";
                    readonly examples: readonly [true];
                };
                readonly api_version: {
                    readonly type: "string";
                    readonly description: "API version of the webhook subscription that determines the schema of the payload";
                    readonly examples: readonly ["2024-10-01"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesAtsApplications: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["ats_job_posting_id"];
        readonly properties: {
            readonly author_id: {
                readonly type: "integer";
                readonly description: "Application author id";
                readonly examples: readonly [1];
            };
            readonly author_type: {
                readonly type: "string";
                readonly description: "Application author type";
                readonly enum: readonly ["company", "access", "user"];
                readonly examples: readonly ["Company"];
            };
            readonly phone: {
                readonly type: "string";
                readonly description: "Application candidate phone";
                readonly examples: readonly ["34612345678"];
            };
            readonly ats_candidate_id: {
                readonly type: "integer";
                readonly description: "Application candidate id";
                readonly examples: readonly [1];
            };
            readonly ats_job_posting_id: {
                readonly type: "integer";
                readonly description: "Application job posting id";
                readonly examples: readonly [1];
            };
            readonly ats_application_phase_id: {
                readonly type: "integer";
                readonly description: "Application phase id";
                readonly examples: readonly [1];
            };
            readonly cover_letter: {
                readonly type: "string";
                readonly description: "Application cover letter";
                readonly examples: readonly ["cover letter"];
            };
            readonly source: {
                readonly type: "string";
                readonly description: "Application source";
                readonly examples: readonly ["source"];
            };
            readonly medium: {
                readonly type: "string";
                readonly description: "Application medium";
                readonly examples: readonly ["medium"];
            };
            readonly answers: {
                readonly type: "array";
                readonly description: "answers";
                readonly items: {};
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "ats_job_posting_id", "ats_candidate_id", "created_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Id of the application";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company id of the application";
                    readonly examples: readonly [1];
                };
                readonly ats_job_posting_id: {
                    readonly type: "integer";
                    readonly description: "Job posting id of the application";
                    readonly examples: readonly [1];
                };
                readonly ats_candidate_id: {
                    readonly type: "integer";
                    readonly description: "Candidate id of the application";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee id of the application";
                    readonly examples: readonly [1];
                };
                readonly phone: {
                    readonly type: "string";
                    readonly description: "Candidate phone of the application";
                    readonly examples: readonly ["123321"];
                };
                readonly qualified: {
                    readonly type: "boolean";
                    readonly description: "Qualified of the application";
                    readonly examples: readonly [true];
                };
                readonly ats_application_phase_id: {
                    readonly type: "integer";
                    readonly description: "Application phase id";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Application created at date";
                    readonly examples: readonly ["2024-08-19T14:30:00Z"];
                };
                readonly cover_letter: {
                    readonly type: "string";
                    readonly description: "Application cover letter";
                    readonly examples: readonly ["cover_letter"];
                };
                readonly ats_conversation_id: {
                    readonly type: "integer";
                    readonly description: "Application conversation id";
                    readonly examples: readonly [1];
                };
                readonly medium: {
                    readonly type: "string";
                    readonly description: "Application medium";
                    readonly examples: readonly ["medium"];
                };
                readonly rating_average: {
                    readonly type: "integer";
                    readonly description: "Application average rating";
                    readonly examples: readonly [1];
                };
                readonly ats_rejection_reason_id: {
                    readonly type: "integer";
                    readonly description: "Application rejection reason id";
                    readonly examples: readonly [1];
                };
                readonly source_id: {
                    readonly type: "integer";
                    readonly description: "Application source id";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesAtsCandidates: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["first_name", "last_name", "company_id"];
        readonly properties: {
            readonly first_name: {
                readonly type: "string";
                readonly description: "first name of the candidate.";
                readonly examples: readonly ["Ana"];
            };
            readonly last_name: {
                readonly type: "string";
                readonly description: "last name of the candidate.";
                readonly examples: readonly ["Fernandez Perez"];
            };
            readonly email: {
                readonly type: "string";
                readonly description: "email of the candidate.";
                readonly examples: readonly ["ana@factorial.com"];
            };
            readonly company_id: {
                readonly type: "integer";
                readonly description: "company identifier, refers to /core/me endpoint.";
                readonly examples: readonly [1];
            };
            readonly talent_pool: {
                readonly type: "boolean";
                readonly description: "is the candidate part of talent pool?";
                readonly examples: readonly [true];
            };
            readonly consent_given_at: {
                readonly type: "string";
                readonly description: "date when the consent was given.";
                readonly examples: readonly ["2021-01-01T00:00:00Z"];
            };
            readonly source: {
                readonly type: "string";
                readonly description: "source of the candidate.";
                readonly examples: readonly ["referred"];
            };
            readonly medium: {
                readonly type: "string";
                readonly description: "specifies additional details related to the source of the candidate, such as the referrer name for example if the source is referred.";
                readonly examples: readonly ["email"];
            };
            readonly phone_number: {
                readonly type: "string";
                readonly description: "phone number of the candidate.";
                readonly examples: readonly [645786980];
            };
            readonly personal_url: {
                readonly type: "string";
                readonly description: "personal web resource from the candidate.";
                readonly examples: readonly ["https://anaperez.factorial.com"];
            };
            readonly gender: {
                readonly type: "string";
                readonly description: "gender of the candidate.";
                readonly examples: readonly ["female"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "first_name", "last_name", "full_name", "talent_pool", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the candidate.";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "company identifier.";
                    readonly examples: readonly [1];
                };
                readonly first_name: {
                    readonly type: "string";
                    readonly description: "name of the candidate.";
                    readonly examples: readonly ["Ana"];
                };
                readonly last_name: {
                    readonly type: "string";
                    readonly description: "last name of the candidate.";
                    readonly examples: readonly ["Fernandez Perez"];
                };
                readonly full_name: {
                    readonly type: "string";
                    readonly description: "full name of the candidate.";
                    readonly examples: readonly ["Ana Fernandez Perez"];
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "email of the candidate.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly talent_pool: {
                    readonly type: "boolean";
                    readonly description: "is the candidate part of talent pool?";
                    readonly examples: readonly [true];
                };
                readonly phone_number: {
                    readonly type: "string";
                    readonly description: "phone number of the candidate.";
                    readonly examples: readonly [645786980];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "creation date of the candidate.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "last update of the candidate.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly consent_given_at: {
                    readonly type: "string";
                    readonly description: "date when the consent was given.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly inactive_since: {
                    readonly type: "string";
                    readonly description: "date when the candidate became inactive.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly ats_job_posting_ids: {
                    readonly type: "array";
                    readonly description: "list of job posting identifiers.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                };
                readonly personal_url: {
                    readonly type: "string";
                    readonly description: "personal web resource from the candidate.";
                    readonly examples: readonly ["https://anaperez.factorial.com"];
                };
                readonly consent_expiration_date: {
                    readonly type: "string";
                    readonly description: "date when the consent expires.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly consent_to_talent_pool: {
                    readonly type: "boolean";
                    readonly description: "consent to talent pool.";
                    readonly examples: readonly [true];
                };
                readonly medium: {
                    readonly type: "string";
                    readonly description: "specifies additional details related to the source of the candidate, such as the referrer name for example if the source is referred.";
                    readonly examples: readonly ["email"];
                };
                readonly source_id: {
                    readonly type: "integer";
                    readonly description: "candidate source identifier, refers to ats/candidate_sources endpoint.";
                    readonly examples: readonly [1];
                };
                readonly gender: {
                    readonly type: "string";
                    readonly description: "gender of the candidate.\n\n`female` `male` `unanswered` `other`";
                    readonly enum: readonly ["female", "male", "unanswered", "other"];
                    readonly examples: readonly ["female"];
                };
                readonly score: {
                    readonly type: "number";
                    readonly description: "score of the candidate.";
                    readonly examples: readonly [7];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesAtsEvaluationFormsSaveAsTemplate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Id of the evaluation form to be saved as a template.";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "name", "questions", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Id of the evaluation form.";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Id of the company that the evaluation form belongs to.";
                    readonly examples: readonly [1];
                };
                readonly ats_job_posting_id: {
                    readonly type: "integer";
                    readonly description: "Id of the job posting that the evaluation form is associated with.";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the evaluation form.";
                    readonly examples: readonly ["Technical Evaluation"];
                };
                readonly based_on_id: {
                    readonly type: "integer";
                    readonly description: "Id of the evaluation form that this evaluation form is related.";
                    readonly examples: readonly [1];
                };
                readonly questions: {
                    readonly type: "array";
                    readonly description: "List of questions in the evaluation form.";
                    readonly items: {};
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "date and time when the evaluation form was created.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "date and time when the evaluation form was last updated.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesAtsFeedbacks: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["ats_candidate_id"];
        readonly properties: {
            readonly ats_candidate_id: {
                readonly type: "integer";
                readonly description: "the ID of the candidate to whom the new feedback will be associated.";
                readonly examples: readonly [1];
            };
            readonly rating: {
                readonly type: "integer";
                readonly description: "the overall rating from 1 to 5 to be given to the candidate's application.";
                readonly examples: readonly [4];
            };
            readonly ats_application_id: {
                readonly type: "integer";
                readonly description: "the ID of the application related to the feedback.";
                readonly examples: readonly [1];
            };
            readonly ats_application_phase_id: {
                readonly type: "integer";
                readonly description: "the ID of the phase within the application related to the feedback.";
                readonly examples: readonly [1];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "a string describing the feedback provided.";
                readonly examples: readonly ["The candidate has a great attitude and is a good fit for the team."];
            };
            readonly mention_ids: {
                readonly type: "array";
                readonly description: "the IDs of the accesses for sending notifications if they have it enabled. They must have permissions to see the assosiated application.";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3];
            };
            readonly ats_evaluation_forms_id: {
                readonly type: "integer";
                readonly description: "IDs of the form to which the feedback belongs if the evaluation forms feature is active.";
                readonly examples: readonly [1, 2, 3];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "created_at", "ats_candidate_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "the ID of the feedback entry.";
                    readonly examples: readonly [1];
                };
                readonly rating: {
                    readonly type: "integer";
                    readonly description: "the overall rating from 1 to 5 for the candidate's application.";
                    readonly examples: readonly [4];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "the description of the feedback provided.";
                    readonly examples: readonly ["The candidate has a great attitude and is a good fit for the team."];
                };
                readonly ats_application_id: {
                    readonly type: "integer";
                    readonly description: "the ID of the application related to the feedback.";
                    readonly examples: readonly [1];
                };
                readonly ats_application_phase_id: {
                    readonly type: "integer";
                    readonly description: "the ID of the phase within the application related to the feedback.";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "the date and time when the feedback entry was created.";
                    readonly examples: readonly ["2022-01-01T00:00:00Z"];
                };
                readonly ats_candidate_id: {
                    readonly type: "integer";
                    readonly description: "the ID of the candidate to whom the feedback is associated.";
                    readonly examples: readonly [1];
                };
                readonly ats_evaluation_forms_id: {
                    readonly type: "integer";
                    readonly description: "the ID of the evaluation form to which the feedback belongs if the evaluation forms feature is active.";
                    readonly examples: readonly [1];
                };
                readonly evaluation_form_answers: {
                    readonly type: "array";
                    readonly description: "the answers from the evaluation form, if this feedback is related to an evaluation form.";
                    readonly items: {};
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesAtsJobPostings: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["title", "status", "cv_requirement", "cover_letter_requirement", "phone_requirement", "photo_requirement"];
        readonly properties: {
            readonly title: {
                readonly type: "string";
            };
            readonly description: {
                readonly type: "string";
            };
            readonly contract_type: {
                readonly type: "string";
            };
            readonly workplace_type: {
                readonly type: "string";
            };
            readonly status: {
                readonly type: "string";
                readonly enum: readonly ["draft", "published", "unlisted", "archived", "cancelled"];
            };
            readonly schedule_type: {
                readonly type: "string";
            };
            readonly team_id: {
                readonly type: "integer";
            };
            readonly location_id: {
                readonly type: "integer";
            };
            readonly salary_format: {
                readonly type: "string";
            };
            readonly salary_from_amount_in_cents: {
                readonly type: "integer";
            };
            readonly salary_to_amount_in_cents: {
                readonly type: "integer";
            };
            readonly cv_requirement: {
                readonly type: "string";
            };
            readonly cover_letter_requirement: {
                readonly type: "string";
            };
            readonly phone_requirement: {
                readonly type: "string";
            };
            readonly photo_requirement: {
                readonly type: "string";
            };
            readonly salary_period: {
                readonly type: "string";
                readonly enum: readonly ["annual", "monthly", "daily"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "ats_company_id", "title", "remote", "status", "cv_requirement", "cover_letter_requirement", "phone_requirement", "photo_requirement", "salary_period", "created_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the job posting";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly ats_company_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the ATS company associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "Title of the job posting";
                    readonly examples: readonly ["My job title"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Description of the job posting";
                    readonly examples: readonly ["My job description"];
                };
                readonly contract_type: {
                    readonly type: "string";
                };
                readonly workplace_type: {
                    readonly type: "string";
                };
                readonly remote: {
                    readonly type: "boolean";
                    readonly description: "Indicates if the job posting is remote";
                    readonly examples: readonly ["true"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The current status of the job posting (e.g., draft, published, archived)\n\n`draft` `published` `unlisted` `archived` `cancelled`";
                    readonly enum: readonly ["draft", "published", "unlisted", "archived", "cancelled"];
                    readonly examples: readonly ["draft"];
                };
                readonly schedule_type: {
                    readonly type: "string";
                    readonly description: "The schedule type of the job posting (e.g., full_time, part_time)";
                    readonly examples: readonly ["full_time"];
                };
                readonly team_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the team associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly location_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the location associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the legal entity associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly salary_format: {
                    readonly type: "string";
                    readonly description: "The format of the salary (e.g., range, fixed_amount)";
                    readonly examples: readonly ["range"];
                };
                readonly salary_from_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The minimum salary amount in cents";
                    readonly examples: readonly ["3000000"];
                };
                readonly salary_to_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The maximum salary amount in cents";
                    readonly examples: readonly ["5000000"];
                };
                readonly hide_salary: {
                    readonly type: "boolean";
                    readonly description: "Indicates whether the salary information for the job posting should be hidden from applicants.";
                    readonly examples: readonly ["true"];
                };
                readonly cv_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the CV (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["mandatory"];
                };
                readonly cover_letter_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the cover letter (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["optional"];
                };
                readonly phone_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the phone number (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["do_not_ask"];
                };
                readonly photo_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the phone number (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["do_not_ask"];
                };
                readonly preview_token: {
                    readonly type: "string";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "If published, the public URL of the job posting. Otherwise will be null";
                    readonly examples: readonly ["https://my-factorial-domain/job_posting/job-title-slug"];
                };
                readonly salary_period: {
                    readonly type: "string";
                    readonly enum: readonly ["annual", "monthly", "daily"];
                    readonly description: "`annual` `monthly` `daily`";
                };
                readonly published_at: {
                    readonly type: "string";
                    readonly description: "Published date in ISO 8601 format of the job. If never been published the value will be null";
                    readonly examples: readonly ["Tue, 02 Jul 2024 08:28:00.000000000 UTC +00:00"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Date in ISO 8601 format when the job posting was created";
                    readonly examples: readonly ["Wed, 10 Jul 2024 13:30:02.000000000 UTC +00:00"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesAtsJobPostingsDuplicate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "The Job ID of the job posting that you want to duplicate.";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "ats_company_id", "title", "remote", "status", "cv_requirement", "cover_letter_requirement", "phone_requirement", "photo_requirement", "salary_period", "created_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the job posting";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly ats_company_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the ATS company associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "Title of the job posting";
                    readonly examples: readonly ["My job title"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Description of the job posting";
                    readonly examples: readonly ["My job description"];
                };
                readonly contract_type: {
                    readonly type: "string";
                };
                readonly workplace_type: {
                    readonly type: "string";
                };
                readonly remote: {
                    readonly type: "boolean";
                    readonly description: "Indicates if the job posting is remote";
                    readonly examples: readonly ["true"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The current status of the job posting (e.g., draft, published, archived)\n\n`draft` `published` `unlisted` `archived` `cancelled`";
                    readonly enum: readonly ["draft", "published", "unlisted", "archived", "cancelled"];
                    readonly examples: readonly ["draft"];
                };
                readonly schedule_type: {
                    readonly type: "string";
                    readonly description: "The schedule type of the job posting (e.g., full_time, part_time)";
                    readonly examples: readonly ["full_time"];
                };
                readonly team_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the team associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly location_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the location associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the legal entity associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly salary_format: {
                    readonly type: "string";
                    readonly description: "The format of the salary (e.g., range, fixed_amount)";
                    readonly examples: readonly ["range"];
                };
                readonly salary_from_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The minimum salary amount in cents";
                    readonly examples: readonly ["3000000"];
                };
                readonly salary_to_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The maximum salary amount in cents";
                    readonly examples: readonly ["5000000"];
                };
                readonly hide_salary: {
                    readonly type: "boolean";
                    readonly description: "Indicates whether the salary information for the job posting should be hidden from applicants.";
                    readonly examples: readonly ["true"];
                };
                readonly cv_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the CV (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["mandatory"];
                };
                readonly cover_letter_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the cover letter (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["optional"];
                };
                readonly phone_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the phone number (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["do_not_ask"];
                };
                readonly photo_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the phone number (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["do_not_ask"];
                };
                readonly preview_token: {
                    readonly type: "string";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "If published, the public URL of the job posting. Otherwise will be null";
                    readonly examples: readonly ["https://my-factorial-domain/job_posting/job-title-slug"];
                };
                readonly salary_period: {
                    readonly type: "string";
                    readonly enum: readonly ["annual", "monthly", "daily"];
                    readonly description: "`annual` `monthly` `daily`";
                };
                readonly published_at: {
                    readonly type: "string";
                    readonly description: "Published date in ISO 8601 format of the job. If never been published the value will be null";
                    readonly examples: readonly ["Tue, 02 Jul 2024 08:28:00.000000000 UTC +00:00"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Date in ISO 8601 format when the job posting was created";
                    readonly examples: readonly ["Wed, 10 Jul 2024 13:30:02.000000000 UTC +00:00"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesAtsMessages: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["content", "sent_by_id", "sent_by_type", "ats_application_id", "attachments", "topic", "send_as_corporate_email"];
        readonly properties: {
            readonly content: {
                readonly type: "string";
            };
            readonly sent_by_id: {
                readonly type: "integer";
            };
            readonly sent_by_type: {
                readonly type: "string";
                readonly enum: readonly ["candidate", "user"];
            };
            readonly ats_application_id: {
                readonly type: "integer";
            };
            readonly attachments: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly format: "binary";
                };
            };
            readonly topic: {
                readonly type: "string";
            };
            readonly send_as_corporate_email: {
                readonly type: "boolean";
            };
            readonly delayed_until: {
                readonly type: "string";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "content", "ats_conversation_id", "sent_by_id", "sent_by_type", "created_at", "attachments", "topic"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly content: {
                    readonly type: "string";
                };
                readonly ats_conversation_id: {
                    readonly type: "integer";
                };
                readonly sent_by_id: {
                    readonly type: "integer";
                };
                readonly sent_by_type: {
                    readonly type: "string";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly attachments: {
                    readonly type: "array";
                    readonly items: {};
                };
                readonly topic: {
                    readonly type: "string";
                };
                readonly delayed_until: {
                    readonly type: "string";
                };
                readonly sent_at: {
                    readonly type: "string";
                };
                readonly delivered_at: {
                    readonly type: "string";
                };
                readonly opened_at: {
                    readonly type: "string";
                };
                readonly last_error_at: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesAttendanceBreakConfigurations: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["time_settings_break_configuration_id", "attendance_employees_setting_id", "enabled"];
        readonly properties: {
            readonly time_settings_break_configuration_id: {
                readonly type: "integer";
                readonly description: "Id of the time settings break configuration";
                readonly examples: readonly [1];
            };
            readonly attendance_employees_setting_id: {
                readonly type: "integer";
                readonly description: "Id of the attendance employee setting";
                readonly examples: readonly [1];
            };
            readonly enabled: {
                readonly type: "boolean";
                readonly description: "Status of the break configuration if enabled or not";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "attendance_employees_setting_id", "time_settings_break_configuration_id", "enabled"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly attendance_employees_setting_id: {
                    readonly type: "integer";
                    readonly description: "Id of the attendance employee setting";
                };
                readonly time_settings_break_configuration_id: {
                    readonly type: "integer";
                    readonly description: "Id of the time settings break configuration";
                };
                readonly enabled: {
                    readonly type: "boolean";
                    readonly description: "Status of the break configuration if enabled or not";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the break configuration";
                };
                readonly paid: {
                    readonly type: "boolean";
                    readonly description: "Check the break configuration is paid or not";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesAttendanceOvertimeRequests: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["date", "employee_id", "author_id"];
        readonly properties: {
            readonly date: {
                readonly type: "string";
            };
            readonly description: {
                readonly type: "string";
            };
            readonly hours_amount: {
                readonly type: "number";
            };
            readonly employee_id: {
                readonly type: "integer";
            };
            readonly author_id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "author_id", "status", "date", "hours_amount_in_cents", "approver", "is_editable"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly approver_id: {
                    readonly type: "integer";
                };
                readonly author_id: {
                    readonly type: "integer";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["pending", "approved", "rejected", "none"];
                    readonly description: "`pending` `approved` `rejected` `none`";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly reason: {
                    readonly type: "string";
                };
                readonly date: {
                    readonly type: "string";
                };
                readonly hours_amount_in_cents: {
                    readonly type: "integer";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly approver: {
                    readonly type: "boolean";
                };
                readonly approver_full_name: {
                    readonly type: "string";
                };
                readonly is_editable: {
                    readonly type: "boolean";
                    readonly description: "Defines if the overtime request can be edited";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesAttendanceOvertimeRequestsApprove: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly reason: {
                readonly type: "string";
            };
            readonly approver_id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "author_id", "status", "date", "hours_amount_in_cents", "approver", "is_editable"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly approver_id: {
                    readonly type: "integer";
                };
                readonly author_id: {
                    readonly type: "integer";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["pending", "approved", "rejected", "none"];
                    readonly description: "`pending` `approved` `rejected` `none`";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly reason: {
                    readonly type: "string";
                };
                readonly date: {
                    readonly type: "string";
                };
                readonly hours_amount_in_cents: {
                    readonly type: "integer";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly approver: {
                    readonly type: "boolean";
                };
                readonly approver_full_name: {
                    readonly type: "string";
                };
                readonly is_editable: {
                    readonly type: "boolean";
                    readonly description: "Defines if the overtime request can be edited";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesAttendanceOvertimeRequestsReject: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "reason"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly reason: {
                readonly type: "string";
            };
            readonly approver_id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "author_id", "status", "date", "hours_amount_in_cents", "approver", "is_editable"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly approver_id: {
                    readonly type: "integer";
                };
                readonly author_id: {
                    readonly type: "integer";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["pending", "approved", "rejected", "none"];
                    readonly description: "`pending` `approved` `rejected` `none`";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly reason: {
                    readonly type: "string";
                };
                readonly date: {
                    readonly type: "string";
                };
                readonly hours_amount_in_cents: {
                    readonly type: "integer";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly approver: {
                    readonly type: "boolean";
                };
                readonly approver_full_name: {
                    readonly type: "string";
                };
                readonly is_editable: {
                    readonly type: "boolean";
                    readonly description: "Defines if the overtime request can be edited";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesAttendanceShifts: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["date"];
        readonly properties: {
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "Id of the employee related";
                readonly examples: readonly [1];
            };
            readonly date: {
                readonly type: "string";
                readonly description: "Date of the shift";
                readonly examples: readonly ["2022-01-01"];
            };
            readonly reference_date: {
                readonly type: "string";
                readonly description: "Reference date of the shift";
                readonly examples: readonly ["2022-01-01"];
            };
            readonly day: {
                readonly type: "integer";
                readonly description: "number of days of the shift";
                readonly examples: readonly [1];
            };
            readonly clock_in: {
                readonly type: "string";
                readonly description: "Time of the clock in";
                readonly examples: readonly ["2024-01-01T12:12:01-02:00"];
            };
            readonly clock_out: {
                readonly type: "string";
                readonly description: "Time of the clock out";
                readonly examples: readonly ["2024-01-01T12:12:01-02:00"];
            };
            readonly observations: {
                readonly type: "string";
                readonly description: "Comments added to the shift";
                readonly examples: readonly ["This is an observation"];
            };
            readonly half_day: {
                readonly type: "string";
                readonly description: "Boolean that indicates if the shift is a half day";
                readonly examples: readonly [true];
            };
            readonly workable: {
                readonly type: "boolean";
                readonly description: "Boolean that indicates if the shift is workable";
                readonly examples: readonly [true];
            };
            readonly location_type: {
                readonly type: "string";
                readonly description: "Type of the location";
                readonly enum: readonly ["office", "business_trip", "work_from_home"];
                readonly examples: readonly ["office"];
            };
            readonly source: {
                readonly type: "string";
                readonly description: "Source of the shift creation";
                readonly enum: readonly ["desktop", "mobile", "face_recognition", "qr_code", "mobile_geolocation", "shared_device", "api", "system"];
                readonly examples: readonly ["desktop"];
            };
            readonly time_settings_break_configuration_id: {
                readonly type: "integer";
                readonly description: "Id of the break configuration";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "date", "reference_date", "created_at", "company_id", "minutes"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the shift";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the employee assigned to the shift";
                    readonly examples: readonly [1];
                };
                readonly date: {
                    readonly type: "string";
                    readonly description: "Date of the shift";
                    readonly examples: readonly ["2023-10-01"];
                };
                readonly reference_date: {
                    readonly type: "string";
                    readonly description: "Reference date for the shift";
                    readonly examples: readonly ["2023-09-30"];
                };
                readonly clock_in: {
                    readonly type: "string";
                    readonly description: "Time when the employee clocked in";
                    readonly examples: readonly ["08:30"];
                };
                readonly clock_out: {
                    readonly type: "string";
                    readonly description: "Time when the employee clocked out";
                    readonly examples: readonly ["12:30"];
                };
                readonly in_source: {
                    readonly type: "string";
                    readonly description: "Source of the clock-in time";
                    readonly examples: readonly ["automatic"];
                };
                readonly out_source: {
                    readonly type: "string";
                    readonly description: "Source of the clock-out time";
                    readonly examples: readonly ["automatic"];
                };
                readonly observations: {
                    readonly type: "string";
                    readonly description: "Additional observations about the shift";
                    readonly examples: readonly ["Employee arrived late due to traffic"];
                };
                readonly location_type: {
                    readonly type: "string";
                    readonly description: "Type of location for the shift\n\n`office` `business_trip` `work_from_home`";
                    readonly enum: readonly ["office", "business_trip", "work_from_home"];
                    readonly examples: readonly ["office"];
                };
                readonly half_day: {
                    readonly type: "string";
                    readonly description: "Indicates which worked part of the day\n\n`beginning_of_day` `end_of_day`";
                    readonly enum: readonly ["beginning_of_day", "end_of_day"];
                    readonly examples: readonly ["beginning_of_day"];
                };
                readonly in_location_latitude: {
                    readonly type: "number";
                    readonly description: "Latitude of the clock-in location";
                    readonly examples: readonly [37.7749];
                };
                readonly in_location_longitude: {
                    readonly type: "number";
                    readonly description: "Longitude of the clock-in location";
                    readonly examples: readonly [-122.4194];
                };
                readonly in_location_accuracy: {
                    readonly type: "number";
                    readonly description: "Accuracy of the clock-in location";
                    readonly examples: readonly [5];
                };
                readonly out_location_latitude: {
                    readonly type: "number";
                    readonly description: "Latitude of the clock-out location";
                    readonly examples: readonly [37.7749];
                };
                readonly out_location_longitude: {
                    readonly type: "number";
                    readonly description: "Longitude of the clock-out location";
                    readonly examples: readonly [-122.4194];
                };
                readonly out_location_accuracy: {
                    readonly type: "number";
                    readonly description: "Accuracy of the clock-out location";
                    readonly examples: readonly [5.7];
                };
                readonly workable: {
                    readonly type: "boolean";
                    readonly description: "Indicates if the shift is workable";
                    readonly examples: readonly [true];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Timestamp when the shift record was created";
                    readonly examples: readonly ["2023-10-01T08:00:00Z"];
                };
                readonly workplace_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the location";
                    readonly examples: readonly [1];
                };
                readonly time_settings_break_configuration_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the break configuration";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the company";
                    readonly examples: readonly [1];
                };
                readonly minutes: {
                    readonly type: "integer";
                    readonly description: "Number in minutes of the shift";
                    readonly examples: readonly [152];
                };
                readonly clock_in_with_seconds: {
                    readonly type: "string";
                    readonly description: "Clock in time with seconds";
                    readonly examples: readonly ["08:30:15"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesAttendanceShiftsAutofill: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["employee_ids", "start_on", "end_on"];
        readonly properties: {
            readonly employee_ids: {
                readonly type: "array";
                readonly description: "Ids of the employees to be autofilled";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3];
            };
            readonly start_on: {
                readonly type: "string";
                readonly description: "Date to start autofilling";
                readonly examples: readonly ["2022-01-01"];
            };
            readonly end_on: {
                readonly type: "string";
                readonly description: "Date to end autofilling";
                readonly examples: readonly ["2022-01-01"];
            };
            readonly source: {
                readonly type: "string";
                readonly description: "Source of the shift creation";
                readonly examples: readonly ["desktop"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "employee_id", "date", "reference_date", "created_at", "company_id", "minutes"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Unique identifier for the shift";
                        readonly examples: readonly [1];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "Identifier for the employee assigned to the shift";
                        readonly examples: readonly [1];
                    };
                    readonly date: {
                        readonly type: "string";
                        readonly description: "Date of the shift";
                        readonly examples: readonly ["2023-10-01"];
                    };
                    readonly reference_date: {
                        readonly type: "string";
                        readonly description: "Reference date for the shift";
                        readonly examples: readonly ["2023-09-30"];
                    };
                    readonly clock_in: {
                        readonly type: "string";
                        readonly description: "Time when the employee clocked in";
                        readonly examples: readonly ["08:30"];
                    };
                    readonly clock_out: {
                        readonly type: "string";
                        readonly description: "Time when the employee clocked out";
                        readonly examples: readonly ["12:30"];
                    };
                    readonly in_source: {
                        readonly type: "string";
                        readonly description: "Source of the clock-in time";
                        readonly examples: readonly ["automatic"];
                    };
                    readonly out_source: {
                        readonly type: "string";
                        readonly description: "Source of the clock-out time";
                        readonly examples: readonly ["automatic"];
                    };
                    readonly observations: {
                        readonly type: "string";
                        readonly description: "Additional observations about the shift";
                        readonly examples: readonly ["Employee arrived late due to traffic"];
                    };
                    readonly location_type: {
                        readonly type: "string";
                        readonly description: "Type of location for the shift\n\n`office` `business_trip` `work_from_home`";
                        readonly enum: readonly ["office", "business_trip", "work_from_home"];
                        readonly examples: readonly ["office"];
                    };
                    readonly half_day: {
                        readonly type: "string";
                        readonly description: "Indicates which worked part of the day\n\n`beginning_of_day` `end_of_day`";
                        readonly enum: readonly ["beginning_of_day", "end_of_day"];
                        readonly examples: readonly ["beginning_of_day"];
                    };
                    readonly in_location_latitude: {
                        readonly type: "number";
                        readonly description: "Latitude of the clock-in location";
                        readonly examples: readonly [37.7749];
                    };
                    readonly in_location_longitude: {
                        readonly type: "number";
                        readonly description: "Longitude of the clock-in location";
                        readonly examples: readonly [-122.4194];
                    };
                    readonly in_location_accuracy: {
                        readonly type: "number";
                        readonly description: "Accuracy of the clock-in location";
                        readonly examples: readonly [5];
                    };
                    readonly out_location_latitude: {
                        readonly type: "number";
                        readonly description: "Latitude of the clock-out location";
                        readonly examples: readonly [37.7749];
                    };
                    readonly out_location_longitude: {
                        readonly type: "number";
                        readonly description: "Longitude of the clock-out location";
                        readonly examples: readonly [-122.4194];
                    };
                    readonly out_location_accuracy: {
                        readonly type: "number";
                        readonly description: "Accuracy of the clock-out location";
                        readonly examples: readonly [5.7];
                    };
                    readonly workable: {
                        readonly type: "boolean";
                        readonly description: "Indicates if the shift is workable";
                        readonly examples: readonly [true];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "Timestamp when the shift record was created";
                        readonly examples: readonly ["2023-10-01T08:00:00Z"];
                    };
                    readonly workplace_id: {
                        readonly type: "integer";
                        readonly description: "Identifier for the location";
                        readonly examples: readonly [1];
                    };
                    readonly time_settings_break_configuration_id: {
                        readonly type: "integer";
                        readonly description: "Identifier for the break configuration";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "Identifier for the company";
                        readonly examples: readonly [1];
                    };
                    readonly minutes: {
                        readonly type: "integer";
                        readonly description: "Number in minutes of the shift";
                        readonly examples: readonly [152];
                    };
                    readonly clock_in_with_seconds: {
                        readonly type: "string";
                        readonly description: "Clock in time with seconds";
                        readonly examples: readonly ["08:30:15"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesAttendanceShiftsBreakEnd: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["now"];
        readonly properties: {
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "Employee id of the break";
                readonly examples: readonly [1];
            };
            readonly now: {
                readonly type: "string";
                readonly description: "Current time of the break";
                readonly examples: readonly ["2022-06-23T11:00:00.000+00:00"];
            };
            readonly observations: {
                readonly type: "string";
                readonly description: "Observations of the break";
                readonly examples: readonly ["break observation"];
            };
            readonly project_worker_id: {
                readonly type: "integer";
            };
            readonly subproject_id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "date", "reference_date", "created_at", "company_id", "minutes"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the shift";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the employee assigned to the shift";
                    readonly examples: readonly [1];
                };
                readonly date: {
                    readonly type: "string";
                    readonly description: "Date of the shift";
                    readonly examples: readonly ["2023-10-01"];
                };
                readonly reference_date: {
                    readonly type: "string";
                    readonly description: "Reference date for the shift";
                    readonly examples: readonly ["2023-09-30"];
                };
                readonly clock_in: {
                    readonly type: "string";
                    readonly description: "Time when the employee clocked in";
                    readonly examples: readonly ["08:30"];
                };
                readonly clock_out: {
                    readonly type: "string";
                    readonly description: "Time when the employee clocked out";
                    readonly examples: readonly ["12:30"];
                };
                readonly in_source: {
                    readonly type: "string";
                    readonly description: "Source of the clock-in time";
                    readonly examples: readonly ["automatic"];
                };
                readonly out_source: {
                    readonly type: "string";
                    readonly description: "Source of the clock-out time";
                    readonly examples: readonly ["automatic"];
                };
                readonly observations: {
                    readonly type: "string";
                    readonly description: "Additional observations about the shift";
                    readonly examples: readonly ["Employee arrived late due to traffic"];
                };
                readonly location_type: {
                    readonly type: "string";
                    readonly description: "Type of location for the shift\n\n`office` `business_trip` `work_from_home`";
                    readonly enum: readonly ["office", "business_trip", "work_from_home"];
                    readonly examples: readonly ["office"];
                };
                readonly half_day: {
                    readonly type: "string";
                    readonly description: "Indicates which worked part of the day\n\n`beginning_of_day` `end_of_day`";
                    readonly enum: readonly ["beginning_of_day", "end_of_day"];
                    readonly examples: readonly ["beginning_of_day"];
                };
                readonly in_location_latitude: {
                    readonly type: "number";
                    readonly description: "Latitude of the clock-in location";
                    readonly examples: readonly [37.7749];
                };
                readonly in_location_longitude: {
                    readonly type: "number";
                    readonly description: "Longitude of the clock-in location";
                    readonly examples: readonly [-122.4194];
                };
                readonly in_location_accuracy: {
                    readonly type: "number";
                    readonly description: "Accuracy of the clock-in location";
                    readonly examples: readonly [5];
                };
                readonly out_location_latitude: {
                    readonly type: "number";
                    readonly description: "Latitude of the clock-out location";
                    readonly examples: readonly [37.7749];
                };
                readonly out_location_longitude: {
                    readonly type: "number";
                    readonly description: "Longitude of the clock-out location";
                    readonly examples: readonly [-122.4194];
                };
                readonly out_location_accuracy: {
                    readonly type: "number";
                    readonly description: "Accuracy of the clock-out location";
                    readonly examples: readonly [5.7];
                };
                readonly workable: {
                    readonly type: "boolean";
                    readonly description: "Indicates if the shift is workable";
                    readonly examples: readonly [true];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Timestamp when the shift record was created";
                    readonly examples: readonly ["2023-10-01T08:00:00Z"];
                };
                readonly workplace_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the location";
                    readonly examples: readonly [1];
                };
                readonly time_settings_break_configuration_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the break configuration";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the company";
                    readonly examples: readonly [1];
                };
                readonly minutes: {
                    readonly type: "integer";
                    readonly description: "Number in minutes of the shift";
                    readonly examples: readonly [152];
                };
                readonly clock_in_with_seconds: {
                    readonly type: "string";
                    readonly description: "Clock in time with seconds";
                    readonly examples: readonly ["08:30:15"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesAttendanceShiftsBreakStart: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["now"];
        readonly properties: {
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "Employee id of the break";
                readonly examples: readonly [1];
            };
            readonly now: {
                readonly type: "string";
                readonly description: "Current time of the break";
                readonly examples: readonly ["2022-06-23T11:00:00.000+00:00"];
            };
            readonly observations: {
                readonly type: "string";
                readonly description: "Observations of the break";
                readonly examples: readonly ["break observation"];
            };
            readonly time_settings_break_configuration_id: {
                readonly type: "integer";
                readonly description: "Time settings configuration id of the break";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "date", "reference_date", "created_at", "company_id", "minutes"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the shift";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the employee assigned to the shift";
                    readonly examples: readonly [1];
                };
                readonly date: {
                    readonly type: "string";
                    readonly description: "Date of the shift";
                    readonly examples: readonly ["2023-10-01"];
                };
                readonly reference_date: {
                    readonly type: "string";
                    readonly description: "Reference date for the shift";
                    readonly examples: readonly ["2023-09-30"];
                };
                readonly clock_in: {
                    readonly type: "string";
                    readonly description: "Time when the employee clocked in";
                    readonly examples: readonly ["08:30"];
                };
                readonly clock_out: {
                    readonly type: "string";
                    readonly description: "Time when the employee clocked out";
                    readonly examples: readonly ["12:30"];
                };
                readonly in_source: {
                    readonly type: "string";
                    readonly description: "Source of the clock-in time";
                    readonly examples: readonly ["automatic"];
                };
                readonly out_source: {
                    readonly type: "string";
                    readonly description: "Source of the clock-out time";
                    readonly examples: readonly ["automatic"];
                };
                readonly observations: {
                    readonly type: "string";
                    readonly description: "Additional observations about the shift";
                    readonly examples: readonly ["Employee arrived late due to traffic"];
                };
                readonly location_type: {
                    readonly type: "string";
                    readonly description: "Type of location for the shift\n\n`office` `business_trip` `work_from_home`";
                    readonly enum: readonly ["office", "business_trip", "work_from_home"];
                    readonly examples: readonly ["office"];
                };
                readonly half_day: {
                    readonly type: "string";
                    readonly description: "Indicates which worked part of the day\n\n`beginning_of_day` `end_of_day`";
                    readonly enum: readonly ["beginning_of_day", "end_of_day"];
                    readonly examples: readonly ["beginning_of_day"];
                };
                readonly in_location_latitude: {
                    readonly type: "number";
                    readonly description: "Latitude of the clock-in location";
                    readonly examples: readonly [37.7749];
                };
                readonly in_location_longitude: {
                    readonly type: "number";
                    readonly description: "Longitude of the clock-in location";
                    readonly examples: readonly [-122.4194];
                };
                readonly in_location_accuracy: {
                    readonly type: "number";
                    readonly description: "Accuracy of the clock-in location";
                    readonly examples: readonly [5];
                };
                readonly out_location_latitude: {
                    readonly type: "number";
                    readonly description: "Latitude of the clock-out location";
                    readonly examples: readonly [37.7749];
                };
                readonly out_location_longitude: {
                    readonly type: "number";
                    readonly description: "Longitude of the clock-out location";
                    readonly examples: readonly [-122.4194];
                };
                readonly out_location_accuracy: {
                    readonly type: "number";
                    readonly description: "Accuracy of the clock-out location";
                    readonly examples: readonly [5.7];
                };
                readonly workable: {
                    readonly type: "boolean";
                    readonly description: "Indicates if the shift is workable";
                    readonly examples: readonly [true];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Timestamp when the shift record was created";
                    readonly examples: readonly ["2023-10-01T08:00:00Z"];
                };
                readonly workplace_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the location";
                    readonly examples: readonly [1];
                };
                readonly time_settings_break_configuration_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the break configuration";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the company";
                    readonly examples: readonly [1];
                };
                readonly minutes: {
                    readonly type: "integer";
                    readonly description: "Number in minutes of the shift";
                    readonly examples: readonly [152];
                };
                readonly clock_in_with_seconds: {
                    readonly type: "string";
                    readonly description: "Clock in time with seconds";
                    readonly examples: readonly ["08:30:15"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesAttendanceShiftsClockIn: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["now"];
        readonly properties: {
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "Employee identifier";
                readonly examples: readonly [1];
            };
            readonly now: {
                readonly type: "string";
                readonly description: "Clock in time";
                readonly examples: readonly ["2024-06-23T11:00:00.000+00:00"];
            };
            readonly latitude: {
                readonly type: "number";
                readonly description: "Latitude from where user clocked in";
                readonly examples: readonly [52.377956];
            };
            readonly longitude: {
                readonly type: "number";
                readonly description: "Longitude from where user clocked in";
                readonly examples: readonly [4.89707];
            };
            readonly accuracy: {
                readonly type: "number";
                readonly description: "Location identifier";
                readonly examples: readonly [5];
            };
            readonly observations: {
                readonly type: "string";
                readonly description: "Notes on the shift record";
                readonly examples: readonly ["I clocked in 10 minutes before"];
            };
            readonly location_type: {
                readonly type: "string";
                readonly description: "Place where user has clocked in";
                readonly enum: readonly ["office", "business_trip", "work_from_home"];
                readonly examples: readonly ["office"];
            };
            readonly workplace_id: {
                readonly type: "integer";
                readonly description: "Location identifier";
                readonly examples: readonly [5];
            };
            readonly time_settings_break_configuration_id: {
                readonly type: "integer";
                readonly description: "Break configuration identifier";
                readonly examples: readonly [2];
            };
            readonly project_worker_id: {
                readonly type: "integer";
                readonly description: "Project worker identifier";
                readonly examples: readonly [3];
            };
            readonly subproject_id: {
                readonly type: "integer";
                readonly description: "Subproject identifier";
                readonly examples: readonly [4];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "date", "reference_date", "created_at", "company_id", "minutes"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the shift";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the employee assigned to the shift";
                    readonly examples: readonly [1];
                };
                readonly date: {
                    readonly type: "string";
                    readonly description: "Date of the shift";
                    readonly examples: readonly ["2023-10-01"];
                };
                readonly reference_date: {
                    readonly type: "string";
                    readonly description: "Reference date for the shift";
                    readonly examples: readonly ["2023-09-30"];
                };
                readonly clock_in: {
                    readonly type: "string";
                    readonly description: "Time when the employee clocked in";
                    readonly examples: readonly ["08:30"];
                };
                readonly clock_out: {
                    readonly type: "string";
                    readonly description: "Time when the employee clocked out";
                    readonly examples: readonly ["12:30"];
                };
                readonly in_source: {
                    readonly type: "string";
                    readonly description: "Source of the clock-in time";
                    readonly examples: readonly ["automatic"];
                };
                readonly out_source: {
                    readonly type: "string";
                    readonly description: "Source of the clock-out time";
                    readonly examples: readonly ["automatic"];
                };
                readonly observations: {
                    readonly type: "string";
                    readonly description: "Additional observations about the shift";
                    readonly examples: readonly ["Employee arrived late due to traffic"];
                };
                readonly location_type: {
                    readonly type: "string";
                    readonly description: "Type of location for the shift\n\n`office` `business_trip` `work_from_home`";
                    readonly enum: readonly ["office", "business_trip", "work_from_home"];
                    readonly examples: readonly ["office"];
                };
                readonly half_day: {
                    readonly type: "string";
                    readonly description: "Indicates which worked part of the day\n\n`beginning_of_day` `end_of_day`";
                    readonly enum: readonly ["beginning_of_day", "end_of_day"];
                    readonly examples: readonly ["beginning_of_day"];
                };
                readonly in_location_latitude: {
                    readonly type: "number";
                    readonly description: "Latitude of the clock-in location";
                    readonly examples: readonly [37.7749];
                };
                readonly in_location_longitude: {
                    readonly type: "number";
                    readonly description: "Longitude of the clock-in location";
                    readonly examples: readonly [-122.4194];
                };
                readonly in_location_accuracy: {
                    readonly type: "number";
                    readonly description: "Accuracy of the clock-in location";
                    readonly examples: readonly [5];
                };
                readonly out_location_latitude: {
                    readonly type: "number";
                    readonly description: "Latitude of the clock-out location";
                    readonly examples: readonly [37.7749];
                };
                readonly out_location_longitude: {
                    readonly type: "number";
                    readonly description: "Longitude of the clock-out location";
                    readonly examples: readonly [-122.4194];
                };
                readonly out_location_accuracy: {
                    readonly type: "number";
                    readonly description: "Accuracy of the clock-out location";
                    readonly examples: readonly [5.7];
                };
                readonly workable: {
                    readonly type: "boolean";
                    readonly description: "Indicates if the shift is workable";
                    readonly examples: readonly [true];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Timestamp when the shift record was created";
                    readonly examples: readonly ["2023-10-01T08:00:00Z"];
                };
                readonly workplace_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the location";
                    readonly examples: readonly [1];
                };
                readonly time_settings_break_configuration_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the break configuration";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the company";
                    readonly examples: readonly [1];
                };
                readonly minutes: {
                    readonly type: "integer";
                    readonly description: "Number in minutes of the shift";
                    readonly examples: readonly [152];
                };
                readonly clock_in_with_seconds: {
                    readonly type: "string";
                    readonly description: "Clock in time with seconds";
                    readonly examples: readonly ["08:30:15"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesAttendanceShiftsClockOut: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["now"];
        readonly properties: {
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "Employee identifier";
                readonly examples: readonly [1];
            };
            readonly now: {
                readonly type: "string";
                readonly description: "Clock out time";
                readonly examples: readonly ["2024-06-23T11:00:00.000+00:00"];
            };
            readonly latitude: {
                readonly type: "number";
                readonly description: "Latitude from where user clocked in";
                readonly examples: readonly [52.377956];
            };
            readonly longitude: {
                readonly type: "number";
                readonly description: "Longitude from where user clocked in";
                readonly examples: readonly [4.89707];
            };
            readonly accuracy: {
                readonly type: "number";
                readonly description: "Location accuracy";
                readonly examples: readonly [5];
            };
            readonly observations: {
                readonly type: "string";
                readonly description: "Notes on the shift record";
                readonly examples: readonly ["I clocked in 10 minutes before"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "date", "reference_date", "created_at", "company_id", "minutes"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the shift";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the employee assigned to the shift";
                    readonly examples: readonly [1];
                };
                readonly date: {
                    readonly type: "string";
                    readonly description: "Date of the shift";
                    readonly examples: readonly ["2023-10-01"];
                };
                readonly reference_date: {
                    readonly type: "string";
                    readonly description: "Reference date for the shift";
                    readonly examples: readonly ["2023-09-30"];
                };
                readonly clock_in: {
                    readonly type: "string";
                    readonly description: "Time when the employee clocked in";
                    readonly examples: readonly ["08:30"];
                };
                readonly clock_out: {
                    readonly type: "string";
                    readonly description: "Time when the employee clocked out";
                    readonly examples: readonly ["12:30"];
                };
                readonly in_source: {
                    readonly type: "string";
                    readonly description: "Source of the clock-in time";
                    readonly examples: readonly ["automatic"];
                };
                readonly out_source: {
                    readonly type: "string";
                    readonly description: "Source of the clock-out time";
                    readonly examples: readonly ["automatic"];
                };
                readonly observations: {
                    readonly type: "string";
                    readonly description: "Additional observations about the shift";
                    readonly examples: readonly ["Employee arrived late due to traffic"];
                };
                readonly location_type: {
                    readonly type: "string";
                    readonly description: "Type of location for the shift\n\n`office` `business_trip` `work_from_home`";
                    readonly enum: readonly ["office", "business_trip", "work_from_home"];
                    readonly examples: readonly ["office"];
                };
                readonly half_day: {
                    readonly type: "string";
                    readonly description: "Indicates which worked part of the day\n\n`beginning_of_day` `end_of_day`";
                    readonly enum: readonly ["beginning_of_day", "end_of_day"];
                    readonly examples: readonly ["beginning_of_day"];
                };
                readonly in_location_latitude: {
                    readonly type: "number";
                    readonly description: "Latitude of the clock-in location";
                    readonly examples: readonly [37.7749];
                };
                readonly in_location_longitude: {
                    readonly type: "number";
                    readonly description: "Longitude of the clock-in location";
                    readonly examples: readonly [-122.4194];
                };
                readonly in_location_accuracy: {
                    readonly type: "number";
                    readonly description: "Accuracy of the clock-in location";
                    readonly examples: readonly [5];
                };
                readonly out_location_latitude: {
                    readonly type: "number";
                    readonly description: "Latitude of the clock-out location";
                    readonly examples: readonly [37.7749];
                };
                readonly out_location_longitude: {
                    readonly type: "number";
                    readonly description: "Longitude of the clock-out location";
                    readonly examples: readonly [-122.4194];
                };
                readonly out_location_accuracy: {
                    readonly type: "number";
                    readonly description: "Accuracy of the clock-out location";
                    readonly examples: readonly [5.7];
                };
                readonly workable: {
                    readonly type: "boolean";
                    readonly description: "Indicates if the shift is workable";
                    readonly examples: readonly [true];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Timestamp when the shift record was created";
                    readonly examples: readonly ["2023-10-01T08:00:00Z"];
                };
                readonly workplace_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the location";
                    readonly examples: readonly [1];
                };
                readonly time_settings_break_configuration_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the break configuration";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the company";
                    readonly examples: readonly [1];
                };
                readonly minutes: {
                    readonly type: "integer";
                    readonly description: "Number in minutes of the shift";
                    readonly examples: readonly [152];
                };
                readonly clock_in_with_seconds: {
                    readonly type: "string";
                    readonly description: "Clock in time with seconds";
                    readonly examples: readonly ["08:30:15"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesAttendanceShiftsToggleClock: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["employee_id", "clock_time"];
        readonly properties: {
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "Employee identifier";
                readonly examples: readonly [1];
            };
            readonly clock_time: {
                readonly type: "string";
                readonly description: "Clock in or out Timestamp";
                readonly examples: readonly ["2024-06-23T11:00:00.000+00:00"];
            };
            readonly location_type: {
                readonly type: "string";
                readonly description: "Place where user has clocked in";
                readonly enum: readonly ["office", "business_trip", "work_from_home"];
                readonly examples: readonly ["office"];
            };
            readonly observations: {
                readonly type: "string";
                readonly description: "Notes on the shift record";
                readonly examples: readonly ["I clocked in 10 minutes before"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "date", "reference_date", "created_at", "company_id", "minutes"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the shift";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the employee assigned to the shift";
                    readonly examples: readonly [1];
                };
                readonly date: {
                    readonly type: "string";
                    readonly description: "Date of the shift";
                    readonly examples: readonly ["2023-10-01"];
                };
                readonly reference_date: {
                    readonly type: "string";
                    readonly description: "Reference date for the shift";
                    readonly examples: readonly ["2023-09-30"];
                };
                readonly clock_in: {
                    readonly type: "string";
                    readonly description: "Time when the employee clocked in";
                    readonly examples: readonly ["08:30"];
                };
                readonly clock_out: {
                    readonly type: "string";
                    readonly description: "Time when the employee clocked out";
                    readonly examples: readonly ["12:30"];
                };
                readonly in_source: {
                    readonly type: "string";
                    readonly description: "Source of the clock-in time";
                    readonly examples: readonly ["automatic"];
                };
                readonly out_source: {
                    readonly type: "string";
                    readonly description: "Source of the clock-out time";
                    readonly examples: readonly ["automatic"];
                };
                readonly observations: {
                    readonly type: "string";
                    readonly description: "Additional observations about the shift";
                    readonly examples: readonly ["Employee arrived late due to traffic"];
                };
                readonly location_type: {
                    readonly type: "string";
                    readonly description: "Type of location for the shift\n\n`office` `business_trip` `work_from_home`";
                    readonly enum: readonly ["office", "business_trip", "work_from_home"];
                    readonly examples: readonly ["office"];
                };
                readonly half_day: {
                    readonly type: "string";
                    readonly description: "Indicates which worked part of the day\n\n`beginning_of_day` `end_of_day`";
                    readonly enum: readonly ["beginning_of_day", "end_of_day"];
                    readonly examples: readonly ["beginning_of_day"];
                };
                readonly in_location_latitude: {
                    readonly type: "number";
                    readonly description: "Latitude of the clock-in location";
                    readonly examples: readonly [37.7749];
                };
                readonly in_location_longitude: {
                    readonly type: "number";
                    readonly description: "Longitude of the clock-in location";
                    readonly examples: readonly [-122.4194];
                };
                readonly in_location_accuracy: {
                    readonly type: "number";
                    readonly description: "Accuracy of the clock-in location";
                    readonly examples: readonly [5];
                };
                readonly out_location_latitude: {
                    readonly type: "number";
                    readonly description: "Latitude of the clock-out location";
                    readonly examples: readonly [37.7749];
                };
                readonly out_location_longitude: {
                    readonly type: "number";
                    readonly description: "Longitude of the clock-out location";
                    readonly examples: readonly [-122.4194];
                };
                readonly out_location_accuracy: {
                    readonly type: "number";
                    readonly description: "Accuracy of the clock-out location";
                    readonly examples: readonly [5.7];
                };
                readonly workable: {
                    readonly type: "boolean";
                    readonly description: "Indicates if the shift is workable";
                    readonly examples: readonly [true];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Timestamp when the shift record was created";
                    readonly examples: readonly ["2023-10-01T08:00:00Z"];
                };
                readonly workplace_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the location";
                    readonly examples: readonly [1];
                };
                readonly time_settings_break_configuration_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the break configuration";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the company";
                    readonly examples: readonly [1];
                };
                readonly minutes: {
                    readonly type: "integer";
                    readonly description: "Number in minutes of the shift";
                    readonly examples: readonly [152];
                };
                readonly clock_in_with_seconds: {
                    readonly type: "string";
                    readonly description: "Clock in time with seconds";
                    readonly examples: readonly ["08:30:15"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesContractsCompensations: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["contract_version_id", "contracts_taxonomy_id"];
        readonly properties: {
            readonly contract_version_id: {
                readonly type: "integer";
            };
            readonly contracts_taxonomy_id: {
                readonly type: "integer";
            };
            readonly description: {
                readonly type: "string";
            };
            readonly compensation_type: {
                readonly type: "string";
            };
            readonly amount: {
                readonly type: "integer";
            };
            readonly unit: {
                readonly type: "string";
            };
            readonly sync_with_supplements: {
                readonly type: "boolean";
            };
            readonly payroll_policy_id: {
                readonly type: "integer";
            };
            readonly recurrence_count: {
                readonly type: "integer";
            };
            readonly starts_on: {
                readonly type: "string";
            };
            readonly recurrence: {
                readonly type: "string";
            };
            readonly first_payment_on: {
                readonly type: "string";
            };
            readonly calculation: {
                readonly type: "string";
            };
            readonly time_condition: {
                readonly type: "string";
                readonly enum: readonly ["full_day", "half_day", "custom"];
            };
            readonly minimum_amount_of_hours: {
                readonly type: "integer";
            };
            readonly minimum_amount_of_hours_in_cents: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "contract_version_id", "contracts_taxonomy_id", "unit"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Compensation ID";
                    readonly examples: readonly [1];
                };
                readonly contract_version_id: {
                    readonly type: "integer";
                    readonly description: "Contract version ID";
                    readonly examples: readonly [1];
                };
                readonly contracts_taxonomy_id: {
                    readonly type: "integer";
                    readonly description: "Contracts taxonomy ID";
                    readonly examples: readonly [1];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Compensation description";
                    readonly examples: readonly ["Compensation for Meal"];
                };
                readonly compensation_type: {
                    readonly type: "string";
                    readonly description: "Required field. You can only use the following options: fixed, undefined, up_to, per_worked_day, per_worked_hour";
                    readonly examples: readonly ["fixed"];
                };
                readonly amount: {
                    readonly type: "integer";
                    readonly description: "Required field unless your compensation type is undefined";
                    readonly examples: readonly [1000];
                };
                readonly unit: {
                    readonly type: "string";
                    readonly description: "Unit of the compensation";
                    readonly examples: readonly ["Money"];
                };
                readonly sync_with_supplements: {
                    readonly type: "boolean";
                    readonly description: "Sync with supplements";
                };
                readonly payroll_policy_id: {
                    readonly type: "integer";
                    readonly description: "Payroll policy ID";
                    readonly examples: readonly [1];
                };
                readonly recurrence_count: {
                    readonly type: "integer";
                    readonly description: "Recurrence count";
                    readonly examples: readonly [1];
                };
                readonly starts_on: {
                    readonly type: "string";
                    readonly description: "When the compensation starts_on";
                    readonly examples: readonly ["2022-01-01"];
                };
                readonly recurrence: {
                    readonly type: "string";
                    readonly description: "Compensation recurrence";
                    readonly examples: readonly ["monthly"];
                };
                readonly first_payment_on: {
                    readonly type: "string";
                    readonly description: "When the first payment is done";
                    readonly examples: readonly ["2022-01-01"];
                };
                readonly calculation: {
                    readonly type: "string";
                    readonly description: "Compensation calculation";
                    readonly examples: readonly ["current period"];
                };
                readonly currency: {
                    readonly type: "string";
                };
                readonly time_condition: {
                    readonly type: "string";
                    readonly enum: readonly ["full_day", "half_day", "custom"];
                    readonly description: "`full_day` `half_day` `custom`";
                };
                readonly minimum_amount_of_hours: {
                    readonly type: "integer";
                };
                readonly minimum_amount_of_hours_in_cents: {
                    readonly type: "integer";
                    readonly description: "Compensation expected minimum amount of hours in cents";
                    readonly examples: readonly [1000];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesContractsContractVersions: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["employee_id", "effective_on", "starts_on"];
        readonly properties: {
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "employee identifier, refers to /employees/employees endpoint.";
                readonly examples: readonly [1];
            };
            readonly effective_on: {
                readonly type: "string";
                readonly description: "the day the specific contract starts, in case of hiring the same than starts_on.";
                readonly examples: readonly ["2024-10-06"];
            };
            readonly starts_on: {
                readonly type: "string";
                readonly description: "the day the employee is hired.";
                readonly examples: readonly ["2024-10-06"];
            };
            readonly ends_on: {
                readonly type: "string";
                readonly description: "the day the employee is terminated.";
                readonly examples: readonly ["2024-10-06"];
            };
            readonly working_hours_frequency: {
                readonly type: "string";
                readonly description: "the frequency of the working hours.";
                readonly examples: readonly ["week"];
            };
            readonly working_week_days: {
                readonly type: "string";
                readonly description: "the days of the week the employee works.";
                readonly examples: readonly ["monday,tuesday,wednesday,thursday,friday"];
            };
            readonly working_hours: {
                readonly type: "integer";
                readonly description: "the amount of hours the employee works.";
                readonly examples: readonly [40];
            };
            readonly max_legal_yearly_hours: {
                readonly type: "integer";
                readonly description: "the maximum amount of hours the employee can work in a year.";
                readonly examples: readonly [2000];
            };
            readonly maximum_weekly_hours: {
                readonly type: "integer";
                readonly description: "the maximum amount of hours the employee can work in a week.";
                readonly examples: readonly [40];
            };
            readonly salary_frequency: {
                readonly type: "string";
                readonly description: "the frequency of the salary payment.";
                readonly examples: readonly ["yearly"];
            };
            readonly salary_amount: {
                readonly type: "integer";
                readonly description: "the amount of money the employee earns.";
                readonly examples: readonly [40000];
            };
            readonly job_title: {
                readonly type: "string";
                readonly description: "job title of the employee.";
                readonly examples: readonly ["Designer"];
            };
            readonly has_trial_period: {
                readonly type: "boolean";
                readonly description: "a flag that indicates if the employee has a trial period.";
                readonly examples: readonly [true];
            };
            readonly trial_period_ends_on: {
                readonly type: "string";
                readonly description: "when the trial period ends.";
                readonly examples: readonly ["2024-10-06"];
            };
            readonly copy_current_contract_version: {
                readonly type: "boolean";
            };
            readonly job_catalog_level_id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["company_id", "employee_id", "effective_on", "has_payroll", "created_at", "updated_at", "fr_forfait_jours"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier for the contract version.";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "identifier for company.";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "employee identifier, refers to /employees/employees endpoint.";
                    readonly examples: readonly [1];
                };
                readonly effective_on: {
                    readonly type: "string";
                    readonly description: "the day the specific contract starts, in case of hiring the same than starts_on.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly job_title: {
                    readonly type: "string";
                    readonly description: "job title of the employee.";
                    readonly examples: readonly ["Designer"];
                };
                readonly job_catalog_level: {
                    readonly type: "string";
                    readonly description: "the level of the employee in the job catalog.";
                    readonly examples: readonly ["Senior Designer"];
                };
                readonly job_catalog_role: {
                    readonly type: "string";
                    readonly description: "the role of the employee in the job catalog.";
                    readonly examples: readonly ["Designer"];
                };
                readonly starts_on: {
                    readonly type: "string";
                    readonly description: "the day the employee is hired.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly ends_on: {
                    readonly type: "string";
                    readonly description: "the day the employee is terminated.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly has_payroll: {
                    readonly type: "boolean";
                    readonly description: "boolean that indicates if the employee asociated to this contract belongs to a payroll policy.";
                    readonly examples: readonly [true];
                };
                readonly has_trial_period: {
                    readonly type: "boolean";
                    readonly description: "a flag that indicates if the employee has a trial period.";
                    readonly examples: readonly [true];
                };
                readonly trial_period_ends_on: {
                    readonly type: "string";
                    readonly description: "when the trial period ends.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly salary_amount: {
                    readonly type: "integer";
                    readonly description: "the amount of money the employee earns.";
                    readonly examples: readonly [1000];
                };
                readonly salary_frequency: {
                    readonly type: "string";
                    readonly description: "the frequency of the salary payment.";
                    readonly examples: readonly ["yearly"];
                };
                readonly working_week_days: {
                    readonly type: "string";
                    readonly description: "the days of the week the employee works.";
                    readonly examples: readonly ["monday,tuesday,wednesday,thursday,friday"];
                };
                readonly working_hours: {
                    readonly type: "integer";
                    readonly description: "the amount of hours the employee works.";
                    readonly examples: readonly [40];
                };
                readonly working_hours_frequency: {
                    readonly type: "string";
                    readonly description: "the frequency of the working hours.";
                    readonly examples: readonly ["week"];
                };
                readonly max_legal_yearly_hours: {
                    readonly type: "integer";
                    readonly description: "the maximum amount of hours the employee can work in a year.";
                    readonly examples: readonly [2000];
                };
                readonly maximum_weekly_hours: {
                    readonly type: "integer";
                    readonly description: "the maximum amount of hours the employee can work in a week.";
                    readonly examples: readonly [40];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "the date the contract version was created.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "the date of the last contract version updated.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly es_has_teleworking_contract: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the contract has teleworking.";
                    readonly examples: readonly [true];
                };
                readonly es_cotization_group: {
                    readonly type: "integer";
                    readonly description: "the group of cotization of the employee.";
                    readonly examples: readonly [1];
                };
                readonly es_contract_observations: {
                    readonly type: "string";
                    readonly description: "observations of the contract.";
                    readonly examples: readonly ["review contract for job promotion"];
                };
                readonly es_job_description: {
                    readonly type: "string";
                    readonly description: "the job description of the employee.";
                    readonly examples: readonly ["Designer"];
                };
                readonly es_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "contract type identifier.";
                    readonly examples: readonly [1];
                };
                readonly es_working_day_type_id: {
                    readonly type: "integer";
                    readonly description: "working day type identifier.";
                    readonly examples: readonly [1];
                };
                readonly es_education_level_id: {
                    readonly type: "integer";
                    readonly description: "education level identifier.";
                    readonly examples: readonly [1];
                };
                readonly es_professional_category_id: {
                    readonly type: "integer";
                    readonly description: "professional category identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_employee_type: {
                    readonly type: "string";
                    readonly description: "employee type.";
                    readonly examples: readonly ["apprenti"];
                };
                readonly fr_forfait_jours: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the employee is allowed to work within the framework of a fixed number of days.";
                    readonly examples: readonly [true];
                };
                readonly fr_jours_par_an: {
                    readonly type: "integer";
                    readonly description: "the number of days the employee is allowed to work.";
                    readonly examples: readonly [200];
                };
                readonly fr_coefficient: {
                    readonly type: "string";
                };
                readonly fr_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "contract type identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_level_id: {
                    readonly type: "integer";
                    readonly description: "level identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_step_id: {
                    readonly type: "integer";
                    readonly description: "step identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_mutual_id: {
                    readonly type: "integer";
                    readonly description: "mutual identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_professional_category_id: {
                    readonly type: "integer";
                    readonly description: "professional category identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_work_type_id: {
                    readonly type: "integer";
                    readonly description: "work type identifier.";
                    readonly examples: readonly [1];
                };
                readonly de_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "contract type identifier.";
                    readonly examples: readonly [1];
                };
                readonly pt_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "contract type identifier.";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesCustomFieldsFields: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["company_id", "field_type"];
        readonly properties: {
            readonly company_id: {
                readonly type: "integer";
                readonly description: "Company identifier where this field belongs";
                readonly examples: readonly [3];
            };
            readonly editable: {
                readonly type: "string";
                readonly description: "Group of employees that can edit the field";
                readonly enum: readonly ["owned", "reportees", "team_leader", "everybody"];
                readonly examples: readonly ["owned"];
            };
            readonly visible: {
                readonly type: "string";
                readonly description: "Group of employees that can see the field";
                readonly enum: readonly ["owned", "reportees", "team_leader", "everybody"];
                readonly examples: readonly ["everybody"];
            };
            readonly label: {
                readonly type: "string";
                readonly description: "Field label";
                readonly examples: readonly ["T-Shirt Size"];
            };
            readonly field_type: {
                readonly type: "string";
                readonly enum: readonly ["text", "long_text", "date", "rating", "checkbox", "single_choice", "multiple_choice", "money", "cents"];
            };
            readonly min_value: {
                readonly type: "integer";
                readonly description: "Minimum value in range field type";
                readonly examples: readonly [10];
            };
            readonly max_value: {
                readonly type: "integer";
                readonly description: "Maximum value in range field type";
                readonly examples: readonly [0];
            };
            readonly required: {
                readonly type: "boolean";
                readonly description: "Requirement to fill this field";
                readonly examples: readonly [true];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "field_type", "label_text"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Field identifier";
                    readonly examples: readonly [2];
                };
                readonly field_type: {
                    readonly type: "string";
                    readonly description: "The type of the field's value\n\n`text` `long_text` `date` `rating` `checkbox` `single_choice` `multiple_choice` `money` `cents`";
                    readonly enum: readonly ["text", "long_text", "date", "rating", "checkbox", "single_choice", "multiple_choice", "money", "cents"];
                    readonly examples: readonly ["text"];
                };
                readonly label_text: {
                    readonly type: "string";
                    readonly description: "Field label";
                    readonly examples: readonly ["T-Shirt Size"];
                };
                readonly position: {
                    readonly type: "integer";
                    readonly description: "Field position within employee profile";
                    readonly examples: readonly [3];
                };
                readonly required: {
                    readonly type: "boolean";
                    readonly description: "Requirement to fill this field";
                    readonly examples: readonly [true];
                };
                readonly min_value: {
                    readonly type: "integer";
                    readonly description: "Minimum value in range field type";
                    readonly examples: readonly [10];
                };
                readonly max_value: {
                    readonly type: "integer";
                    readonly description: "Maximum value in range field type";
                    readonly examples: readonly [0];
                };
                readonly options: {
                    readonly type: "array";
                    readonly description: "Array of options";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly [true, false, "maybe"];
                };
                readonly legal_entity_name: {
                    readonly type: "string";
                    readonly description: "Legal entity name where this field belongs";
                    readonly examples: readonly ["Factorial Legal"];
                };
                readonly slug: {
                    readonly type: "string";
                    readonly description: "Custom field slug";
                    readonly examples: readonly ["tshirt_size"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesCustomFieldsOptions: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["label", "field_id"];
        readonly properties: {
            readonly label: {
                readonly type: "string";
                readonly description: "Title for option";
                readonly examples: readonly ["T-shirt size"];
            };
            readonly is_active: {
                readonly type: "boolean";
                readonly description: "Flag to make the option available";
                readonly examples: readonly [true];
            };
            readonly field_id: {
                readonly type: "integer";
                readonly description: "Custom Fields identifier";
                readonly examples: readonly [2];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Option identifier";
                    readonly examples: readonly [1];
                };
                readonly label: {
                    readonly type: "string";
                    readonly description: "Title for option";
                    readonly examples: readonly ["T-shirt size"];
                };
                readonly value: {
                    readonly type: "string";
                    readonly description: "Option value";
                    readonly examples: readonly ["L"];
                };
                readonly is_active: {
                    readonly type: "boolean";
                    readonly description: "Flag to make the option available";
                    readonly examples: readonly [true];
                };
                readonly field_id: {
                    readonly type: "integer";
                    readonly description: "Custom Fields identifier";
                    readonly examples: readonly [2];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesCustomFieldsResourceFields: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["schema_id", "company_id", "field_type", "required", "editable", "visible"];
        readonly properties: {
            readonly schema_id: {
                readonly type: "integer";
                readonly description: "Schema identifier";
                readonly examples: readonly [1];
            };
            readonly company_id: {
                readonly type: "integer";
                readonly description: "Company identifier";
                readonly examples: readonly [1];
            };
            readonly label: {
                readonly type: "string";
                readonly description: "Resource field label";
                readonly examples: readonly ["T-shirt size"];
            };
            readonly field_type: {
                readonly type: "string";
                readonly description: "Type of the value for the resource field";
                readonly enum: readonly ["text", "long_text", "date", "rating", "checkbox", "single_choice", "multiple_choice", "money", "cents"];
                readonly examples: readonly ["text"];
            };
            readonly required: {
                readonly type: "boolean";
                readonly description: "Requirement to fill this resource field";
                readonly examples: readonly [true];
            };
            readonly max_value: {
                readonly type: "integer";
                readonly description: "Maximum value for range field type";
                readonly examples: readonly [10];
            };
            readonly min_value: {
                readonly type: "integer";
                readonly description: "Minimum value for range field type";
                readonly examples: readonly [0];
            };
            readonly position: {
                readonly type: "integer";
                readonly description: "Field position within schema";
                readonly examples: readonly [2];
            };
            readonly editable: {
                readonly type: "string";
                readonly description: "Group for which this field is editable";
                readonly enum: readonly ["owned", "reportees", "team_leader", "everybody"];
                readonly examples: readonly ["team_leader"];
            };
            readonly visible: {
                readonly type: "string";
                readonly description: "Group for which this field is visible";
                readonly enum: readonly ["owned", "reportees", "team_leader", "everybody"];
                readonly examples: readonly ["everybody"];
            };
            readonly options: {
                readonly type: "array";
                readonly description: "Array of options to choose from";
                readonly items: {
                    readonly type: "string";
                };
                readonly examples: readonly ["yes", "no", "maybe"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Resource field identifier";
                    readonly examples: readonly [1];
                };
                readonly field_id: {
                    readonly type: "integer";
                    readonly description: "Custom Field identifier";
                    readonly examples: readonly [2];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesCustomFieldsValues: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["field_id", "valuable_type", "valuable_id", "value"];
        readonly properties: {
            readonly field_id: {
                readonly type: "integer";
                readonly description: "Custom Fields identifier";
                readonly examples: readonly [1];
            };
            readonly valuable_type: {
                readonly type: "string";
                readonly description: "Type of the object that the custom field is attached to: 'Document' | 'Employee' | 'Contracts::ContractVersion' | 'CustomResources::Value' ";
                readonly examples: readonly ["Employee"];
            };
            readonly valuable_id: {
                readonly type: "integer";
                readonly description: "Identifier of the object that the custom field is attached to";
                readonly examples: readonly [1];
            };
            readonly value: {
                readonly type: "string";
                readonly description: "Custom Fields value";
                readonly examples: readonly ["This is an example value for a custom field"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "custom_field_identifier", "valuable_id", "field_id", "valuable_type"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the custom field value";
                    readonly examples: readonly [1];
                };
                readonly value: {
                    readonly type: "boolean";
                    readonly description: "Custom Fields value";
                    readonly examples: readonly ["This is an example value for a custom field"];
                };
                readonly long_text_value: {
                    readonly type: "string";
                    readonly description: "Custom field text value";
                    readonly examples: readonly ["The value of a text custom field"];
                };
                readonly custom_field_identifier: {
                    readonly type: "string";
                };
                readonly date_value: {
                    readonly type: "string";
                    readonly description: "Custom field date value";
                    readonly examples: readonly ["2022-01-01"];
                };
                readonly single_choice_value: {
                    readonly type: "string";
                    readonly description: "Custom field single choice value";
                    readonly examples: readonly ["Option 1"];
                };
                readonly cents_value: {
                    readonly type: "integer";
                    readonly description: "Custom field number value";
                    readonly examples: readonly [100];
                };
                readonly valuable_id: {
                    readonly type: "integer";
                };
                readonly field_id: {
                    readonly type: "integer";
                };
                readonly valuable_type: {
                    readonly type: "string";
                };
                readonly label: {
                    readonly type: "string";
                };
                readonly required: {
                    readonly type: "boolean";
                };
                readonly usage_group_id: {
                    readonly type: "integer";
                };
                readonly usage_group_slug: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesCustomResourcesSchemas: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "company_id", "hidden"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Schema name";
                readonly examples: readonly ["Company Offsite"];
            };
            readonly company_id: {
                readonly type: "integer";
                readonly description: "Company identifier where this schema belongs";
                readonly examples: readonly [2];
            };
            readonly effective_at_id: {
                readonly type: "integer";
                readonly description: "Custom field identifier";
                readonly examples: readonly [1];
            };
            readonly hidden: {
                readonly type: "boolean";
                readonly description: "Manages visibility of the schema";
            };
            readonly position: {
                readonly type: "integer";
                readonly description: "Schema position within employee profile";
                readonly examples: readonly [1];
            };
            readonly usage_group_slug: {
                readonly type: "string";
                readonly description: "Schema slug";
                readonly examples: readonly ["company_offsite"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id", "hidden"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Schema identifier";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Schema name";
                    readonly examples: readonly ["Company Offsite"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier where this schema belongs";
                    readonly examples: readonly [2];
                };
                readonly hidden: {
                    readonly type: "boolean";
                    readonly description: "Manages visibility of the schema";
                };
                readonly position: {
                    readonly type: "integer";
                    readonly description: "Schema position within employee profile";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesCustomResourcesValues: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["schema_id", "employee_id", "field_id", "value"];
        readonly properties: {
            readonly schema_id: {
                readonly type: "integer";
                readonly description: "Identifier of the schema this value belongs to";
                readonly examples: readonly [1];
            };
            readonly employee_id: {
                readonly type: "integer";
            };
            readonly field_id: {
                readonly type: "integer";
                readonly description: "Identifier of the field this value belongs to";
                readonly examples: readonly [2];
            };
            readonly value: {
                readonly type: "string";
                readonly description: "Value for schema custom field";
                readonly examples: readonly ["This is an example value for a custom field"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "field_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Value identifier";
                    readonly examples: readonly [1];
                };
                readonly field_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the field this value belongs to";
                    readonly examples: readonly [2];
                };
                readonly long_text_value: {
                    readonly type: "string";
                    readonly description: "When the field's type is long_text_value, value for schema long_text_value custom field";
                    readonly examples: readonly ["Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."];
                };
                readonly date_value: {
                    readonly type: "string";
                    readonly description: "When the field's type is date_value, value for schema date_value custom field";
                    readonly examples: readonly ["2024-04-01"];
                };
                readonly text_value: {
                    readonly type: "string";
                    readonly description: "When the field's type is text_value, value for schema text_value custom field";
                    readonly examples: readonly ["Lorem ipsum dolor sit amet, consectetur adipiscing elit."];
                };
                readonly number_value: {
                    readonly type: "integer";
                    readonly description: "When the field's type is number_value, value for schema number_value custom field";
                    readonly examples: readonly [2];
                };
                readonly option_value: {
                    readonly type: "string";
                    readonly description: "When the field's type is option_value, selected value for schema option_value custom field";
                    readonly examples: readonly ["one_of_the_options"];
                };
                readonly cents_value: {
                    readonly type: "integer";
                    readonly description: "When the field's type is cents_value, value for schema cents_value custom field";
                    readonly examples: readonly [5];
                };
                readonly boolean_value: {
                    readonly type: "boolean";
                    readonly description: "When the field's type is boolean_value, value for schema boolean_value custom field";
                    readonly examples: readonly [true];
                };
                readonly single_choice_value: {
                    readonly type: "string";
                    readonly description: "When the field's type is single_choice_value, selected value for schema single_choice_value custom field";
                    readonly examples: readonly ["selected_choice"];
                };
                readonly multiple_choice_value: {
                    readonly type: "array";
                    readonly description: "When the field's type is multiple_choice_value,selected values for schema multiple_choice_value custom field";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["selected_choice_1", "selected_choice_2"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesDocumentsDocuments: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["public", "space", "is_pending_assignment", "file", "author_id", "company_id", "signee_ids", "request_esignature"];
        readonly properties: {
            readonly public: {
                readonly type: "boolean";
                readonly description: "flag to indicate if the document is public.";
                readonly examples: readonly [true];
            };
            readonly space: {
                readonly type: "string";
                readonly description: "document space, in case of employee_my_documents it's necessary to fill employee_id.";
                readonly enum: readonly ["employee_my_documents", "company_public", "company_internal", "pending_to_assign", "pending_to_destroy"];
                readonly examples: readonly ["employee_my_documents"];
            };
            readonly folder_id: {
                readonly type: "integer";
                readonly description: "folder identifier, references to documents/folders endpoint.";
                readonly examples: readonly [1];
            };
            readonly file_filename: {
                readonly type: "string";
                readonly description: "final name of the file, even if the file has been uploaded with a different name.";
                readonly examples: readonly ["document.pdf"];
            };
            readonly is_pending_assignment: {
                readonly type: "boolean";
                readonly description: "flag that indicates if the document is pending assignment.";
                readonly examples: readonly [true];
            };
            readonly leave_id: {
                readonly type: "integer";
                readonly description: "leave identifier associated to the document, refers to /timeoff/leaves endpoint.";
                readonly examples: readonly [1];
            };
            readonly file: {
                readonly type: "string";
                readonly description: "file to upload, the binary file.";
                readonly format: "binary";
                readonly examples: readonly ["document.pdf"];
            };
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "employee identifier associated to the document.";
                readonly examples: readonly [1];
            };
            readonly author_id: {
                readonly type: "integer";
                readonly description: "access identifier of the author, refers to /employees/employees endpoint.";
                readonly examples: readonly [1];
            };
            readonly company_id: {
                readonly type: "integer";
                readonly description: "company identifier, refers to /api/me endpoint.";
                readonly examples: readonly [1];
            };
            readonly signee_ids: {
                readonly type: "array";
                readonly description: "list of user access identifiers associated to the document, refers to /employees/employees endpoint.";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3];
            };
            readonly request_esignature: {
                readonly type: "boolean";
                readonly description: "flag to indicate if the document requires an electronic signature.";
                readonly examples: readonly [true];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["created_at", "filename", "id", "public", "space", "updated_at"];
            readonly properties: {
                readonly author_id: {
                    readonly type: "integer";
                    readonly description: "access identifier of the author, refers to /employees/employees endpoint.";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "company identifier, refers to /api/me endpoint.";
                    readonly examples: readonly [1];
                };
                readonly content_type: {
                    readonly type: "string";
                    readonly description: "document content type.";
                    readonly examples: readonly ["application/pdf"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "creation date of the document.";
                    readonly examples: readonly ["2020-01-01T00:00:00Z"];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "employee identifier associated to the document.";
                    readonly examples: readonly [1];
                };
                readonly extension: {
                    readonly type: "string";
                    readonly description: "document extension.";
                    readonly examples: readonly ["pdf"];
                };
                readonly file_size: {
                    readonly type: "integer";
                    readonly description: "document file size in bytes.";
                    readonly examples: readonly [1024];
                };
                readonly file: {
                    readonly type: "string";
                    readonly description: "url of the document for download it.";
                    readonly examples: readonly ["/documents/60"];
                };
                readonly filename: {
                    readonly type: "string";
                    readonly description: "name of the document.";
                    readonly examples: readonly ["document.pdf"];
                };
                readonly folder_id: {
                    readonly type: "integer";
                    readonly description: "folder identifier, references to documents/folders endpoint.";
                    readonly examples: readonly [1];
                };
                readonly id: {
                    readonly type: "integer";
                    readonly description: "document identifier.";
                    readonly examples: readonly [1];
                };
                readonly is_company_document: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the document is a company document.";
                    readonly examples: readonly [true];
                };
                readonly is_management_document: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the document is a management document.";
                    readonly examples: readonly [true];
                };
                readonly is_pending_assignment: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the document is pending assignment.";
                    readonly examples: readonly [true];
                };
                readonly leave_id: {
                    readonly type: "integer";
                    readonly description: "leave identifier associated to the document, refers to /timeoff/leaves endpoint.";
                    readonly examples: readonly [1];
                };
                readonly public: {
                    readonly type: "boolean";
                    readonly description: "flag to indicate if the document is public.";
                    readonly examples: readonly [true];
                };
                readonly signature_status: {
                    readonly type: "string";
                    readonly description: "document signature status.\n\n`pending` `partially_signed` `declined` `completed` `bounced_email` `cancelled` `error`";
                    readonly enum: readonly ["pending", "partially_signed", "declined", "completed", "bounced_email", "cancelled", "error"];
                    readonly examples: readonly ["pending"];
                };
                readonly signees: {
                    readonly type: "array";
                    readonly description: "list of signee access identifiers associated to the document, refers to /employees/employees endpoint.";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly space: {
                    readonly type: "string";
                    readonly description: "document space.";
                    readonly examples: readonly ["company_public"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "last update date of the document.";
                    readonly examples: readonly ["2020-01-01T00:00:00Z"];
                };
                readonly deleted_at: {
                    readonly type: "string";
                    readonly description: "deletion date of the document.";
                    readonly examples: readonly ["2020-01-01T00:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesDocumentsDocumentsMoveToTrashBin: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["document_ids"];
        readonly properties: {
            readonly document_ids: {
                readonly type: "array";
                readonly description: "list of document identifiers.";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["created_at", "filename", "id", "public", "space", "updated_at"];
                readonly properties: {
                    readonly author_id: {
                        readonly type: "integer";
                        readonly description: "access identifier of the author, refers to /employees/employees endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "company identifier, refers to /api/me endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly content_type: {
                        readonly type: "string";
                        readonly description: "document content type.";
                        readonly examples: readonly ["application/pdf"];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "creation date of the document.";
                        readonly examples: readonly ["2020-01-01T00:00:00Z"];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "employee identifier associated to the document.";
                        readonly examples: readonly [1];
                    };
                    readonly extension: {
                        readonly type: "string";
                        readonly description: "document extension.";
                        readonly examples: readonly ["pdf"];
                    };
                    readonly file_size: {
                        readonly type: "integer";
                        readonly description: "document file size in bytes.";
                        readonly examples: readonly [1024];
                    };
                    readonly file: {
                        readonly type: "string";
                        readonly description: "url of the document for download it.";
                        readonly examples: readonly ["/documents/60"];
                    };
                    readonly filename: {
                        readonly type: "string";
                        readonly description: "name of the document.";
                        readonly examples: readonly ["document.pdf"];
                    };
                    readonly folder_id: {
                        readonly type: "integer";
                        readonly description: "folder identifier, references to documents/folders endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "document identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly is_company_document: {
                        readonly type: "boolean";
                        readonly description: "flag that indicates if the document is a company document.";
                        readonly examples: readonly [true];
                    };
                    readonly is_management_document: {
                        readonly type: "boolean";
                        readonly description: "flag that indicates if the document is a management document.";
                        readonly examples: readonly [true];
                    };
                    readonly is_pending_assignment: {
                        readonly type: "boolean";
                        readonly description: "flag that indicates if the document is pending assignment.";
                        readonly examples: readonly [true];
                    };
                    readonly leave_id: {
                        readonly type: "integer";
                        readonly description: "leave identifier associated to the document, refers to /timeoff/leaves endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly public: {
                        readonly type: "boolean";
                        readonly description: "flag to indicate if the document is public.";
                        readonly examples: readonly [true];
                    };
                    readonly signature_status: {
                        readonly type: "string";
                        readonly description: "document signature status.\n\n`pending` `partially_signed` `declined` `completed` `bounced_email` `cancelled` `error`";
                        readonly enum: readonly ["pending", "partially_signed", "declined", "completed", "bounced_email", "cancelled", "error"];
                        readonly examples: readonly ["pending"];
                    };
                    readonly signees: {
                        readonly type: "array";
                        readonly description: "list of signee access identifiers associated to the document, refers to /employees/employees endpoint.";
                        readonly items: {
                            readonly type: "integer";
                        };
                    };
                    readonly space: {
                        readonly type: "string";
                        readonly description: "document space.";
                        readonly examples: readonly ["company_public"];
                    };
                    readonly updated_at: {
                        readonly type: "string";
                        readonly description: "last update date of the document.";
                        readonly examples: readonly ["2020-01-01T00:00:00Z"];
                    };
                    readonly deleted_at: {
                        readonly type: "string";
                        readonly description: "deletion date of the document.";
                        readonly examples: readonly ["2020-01-01T00:00:00Z"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesDocumentsDocumentsRestoreFromTrashBin: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["document_ids"];
        readonly properties: {
            readonly document_ids: {
                readonly type: "array";
                readonly description: "list of document identifiers.";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["created_at", "filename", "id", "public", "space", "updated_at"];
                readonly properties: {
                    readonly author_id: {
                        readonly type: "integer";
                        readonly description: "access identifier of the author, refers to /employees/employees endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "company identifier, refers to /api/me endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly content_type: {
                        readonly type: "string";
                        readonly description: "document content type.";
                        readonly examples: readonly ["application/pdf"];
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly description: "creation date of the document.";
                        readonly examples: readonly ["2020-01-01T00:00:00Z"];
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                        readonly description: "employee identifier associated to the document.";
                        readonly examples: readonly [1];
                    };
                    readonly extension: {
                        readonly type: "string";
                        readonly description: "document extension.";
                        readonly examples: readonly ["pdf"];
                    };
                    readonly file_size: {
                        readonly type: "integer";
                        readonly description: "document file size in bytes.";
                        readonly examples: readonly [1024];
                    };
                    readonly file: {
                        readonly type: "string";
                        readonly description: "url of the document for download it.";
                        readonly examples: readonly ["/documents/60"];
                    };
                    readonly filename: {
                        readonly type: "string";
                        readonly description: "name of the document.";
                        readonly examples: readonly ["document.pdf"];
                    };
                    readonly folder_id: {
                        readonly type: "integer";
                        readonly description: "folder identifier, references to documents/folders endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "document identifier.";
                        readonly examples: readonly [1];
                    };
                    readonly is_company_document: {
                        readonly type: "boolean";
                        readonly description: "flag that indicates if the document is a company document.";
                        readonly examples: readonly [true];
                    };
                    readonly is_management_document: {
                        readonly type: "boolean";
                        readonly description: "flag that indicates if the document is a management document.";
                        readonly examples: readonly [true];
                    };
                    readonly is_pending_assignment: {
                        readonly type: "boolean";
                        readonly description: "flag that indicates if the document is pending assignment.";
                        readonly examples: readonly [true];
                    };
                    readonly leave_id: {
                        readonly type: "integer";
                        readonly description: "leave identifier associated to the document, refers to /timeoff/leaves endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly public: {
                        readonly type: "boolean";
                        readonly description: "flag to indicate if the document is public.";
                        readonly examples: readonly [true];
                    };
                    readonly signature_status: {
                        readonly type: "string";
                        readonly description: "document signature status.\n\n`pending` `partially_signed` `declined` `completed` `bounced_email` `cancelled` `error`";
                        readonly enum: readonly ["pending", "partially_signed", "declined", "completed", "bounced_email", "cancelled", "error"];
                        readonly examples: readonly ["pending"];
                    };
                    readonly signees: {
                        readonly type: "array";
                        readonly description: "list of signee access identifiers associated to the document, refers to /employees/employees endpoint.";
                        readonly items: {
                            readonly type: "integer";
                        };
                    };
                    readonly space: {
                        readonly type: "string";
                        readonly description: "document space.";
                        readonly examples: readonly ["company_public"];
                    };
                    readonly updated_at: {
                        readonly type: "string";
                        readonly description: "last update date of the document.";
                        readonly examples: readonly ["2020-01-01T00:00:00Z"];
                    };
                    readonly deleted_at: {
                        readonly type: "string";
                        readonly description: "deletion date of the document.";
                        readonly examples: readonly ["2020-01-01T00:00:00Z"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesDocumentsFolders: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["company_id", "name", "space"];
        readonly properties: {
            readonly company_id: {
                readonly type: "integer";
                readonly description: "Company ID";
                readonly examples: readonly [1];
            };
            readonly name: {
                readonly type: "string";
                readonly description: "Folder name";
                readonly examples: readonly ["Payslips"];
            };
            readonly space: {
                readonly type: "string";
                readonly description: "The space of the folder is related to the type of documents that will be stored in it. You should always use \"employee_my_documents\"";
                readonly examples: readonly ["employee_my_documents"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["active", "id", "name"];
            readonly properties: {
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "Whether the folder is active or not";
                    readonly examples: readonly [true];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company ID of the folder";
                    readonly examples: readonly [1];
                };
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Folder ID";
                    readonly examples: readonly [10];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Folder name";
                    readonly examples: readonly ["Payslips"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesEmployeesEmployeesCreateWithContract: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["company_id", "first_name", "last_name", "email"];
        readonly properties: {
            readonly company_id: {
                readonly type: "integer";
                readonly description: "company id of the employee, you can get it in companies/legal_entities endpoint.";
                readonly examples: readonly [1];
            };
            readonly first_name: {
                readonly type: "string";
                readonly description: "name of the employee.";
                readonly examples: readonly ["Ana"];
            };
            readonly last_name: {
                readonly type: "string";
                readonly description: "last name of the employee.";
                readonly examples: readonly ["Blanco Perez"];
            };
            readonly email: {
                readonly type: "string";
                readonly description: "personal email of the employee.";
                readonly examples: readonly ["ana@factorial.com"];
            };
            readonly contract_effective_on: {
                readonly type: "string";
                readonly description: "the day the specific contract starts, in case of hiring the same than contract_starts_on.";
                readonly examples: readonly ["2024-10-06"];
            };
            readonly contract_starts_on: {
                readonly type: "string";
                readonly description: "the day the employee is hired.";
                readonly examples: readonly ["2024-10-06"];
            };
            readonly gender: {
                readonly type: "string";
                readonly description: "gender of the employee (male | female).";
                readonly examples: readonly ["female"];
            };
            readonly identifier: {
                readonly type: "string";
                readonly description: "national identifier number.";
                readonly examples: readonly ["QKG587532Y"];
            };
            readonly identifier_type: {
                readonly type: "string";
                readonly description: "type of identifier (ex passport).";
                readonly examples: readonly ["passport"];
            };
            readonly birthday_on: {
                readonly type: "string";
                readonly description: "birthday of the employee.";
                readonly examples: readonly ["1990-06-06"];
            };
            readonly nationality: {
                readonly type: "string";
                readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                readonly examples: readonly ["ES"];
            };
            readonly address_line1: {
                readonly type: "string";
                readonly description: "address of the employee.";
                readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
            };
            readonly address_line_2: {
                readonly type: "string";
                readonly description: "address of the employee.";
                readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
            };
            readonly postal_code: {
                readonly type: "string";
                readonly description: "postal code of the employee.";
                readonly examples: readonly [27004];
            };
            readonly city: {
                readonly type: "string";
                readonly description: "city of the employee.";
                readonly examples: readonly ["Santander"];
            };
            readonly state: {
                readonly type: "string";
                readonly description: "state/province/region of the employee.";
                readonly examples: readonly ["Cataluña"];
            };
            readonly country: {
                readonly type: "string";
                readonly description: "country code of the employee (Spain ES, United Kingdom GB).";
                readonly examples: readonly ["ES"];
            };
            readonly bank_number: {
                readonly type: "string";
                readonly description: "bank account number of the employee.";
                readonly examples: readonly ["ES6220809324751871912999"];
            };
            readonly swift_bic: {
                readonly type: "string";
                readonly description: "code to identify banks and financial institutions globally.";
                readonly examples: readonly ["CAGLES2M510"];
            };
            readonly manager_id: {
                readonly type: "integer";
                readonly description: "id of manager, you can get the manager_id from employees endpoint.";
                readonly examples: readonly [1];
            };
            readonly timeoff_manager_id: {
                readonly type: "integer";
                readonly description: "id of manager, you can get the manager_id from employees endpoint.";
                readonly examples: readonly [1];
            };
            readonly legal_entity_id: {
                readonly type: "integer";
                readonly description: "legal entity of the employee, references to companies/legal_entities.";
                readonly examples: readonly [1];
            };
            readonly company_identifier: {
                readonly type: "string";
                readonly description: "identity number or string used inside a company to internally identify the employee.";
                readonly examples: readonly ["bb9d281e"];
            };
            readonly team_id: {
                readonly type: "integer";
                readonly description: "team id of the employee.";
                readonly examples: readonly [1];
            };
            readonly location_id: {
                readonly type: "integer";
                readonly description: "location id of the employee, references to locations/locations.";
                readonly examples: readonly [1];
            };
            readonly social_security_number: {
                readonly type: "string";
                readonly description: "social security number of the employee.";
                readonly examples: readonly [238038194000];
            };
            readonly has_trial_period: {
                readonly type: "boolean";
                readonly description: "does the employee have a trial period?";
                readonly examples: readonly [true];
            };
            readonly trial_period_ends_on: {
                readonly type: "string";
                readonly description: "when the trial period ends.";
                readonly examples: readonly ["2024-10-06"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "access_id", "first_name", "last_name", "full_name", "company_id", "created_at", "updated_at", "is_terminating"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "id of the employee.";
                    readonly examples: readonly [1];
                };
                readonly access_id: {
                    readonly type: "integer";
                    readonly description: "access_id associated to the employee.";
                    readonly examples: readonly [1];
                };
                readonly first_name: {
                    readonly type: "string";
                    readonly description: "name of the employee.";
                    readonly examples: readonly ["Ana"];
                };
                readonly last_name: {
                    readonly type: "string";
                    readonly description: "last name of the employee.";
                    readonly examples: readonly ["Blanco Perez"];
                };
                readonly full_name: {
                    readonly type: "string";
                    readonly description: "full name of the employee.";
                    readonly examples: readonly ["Ana Blanco Perez"];
                };
                readonly preferred_name: {
                    readonly type: "string";
                    readonly description: "nickname of the employee or a name that defines the employee better.";
                    readonly examples: readonly ["Anita"];
                };
                readonly birth_name: {
                    readonly type: "string";
                    readonly description: "Birthname of the employee.";
                    readonly examples: readonly ["Anna"];
                };
                readonly gender: {
                    readonly type: "string";
                    readonly description: "gender of the employee (male | female).";
                    readonly examples: readonly ["female"];
                };
                readonly identifier: {
                    readonly type: "string";
                    readonly description: "national identifier number.";
                    readonly examples: readonly ["QKG587532Y"];
                };
                readonly identifier_type: {
                    readonly type: "string";
                    readonly description: "type of identifier (ex passport).";
                    readonly examples: readonly ["passport"];
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "personal email of the employee.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly login_email: {
                    readonly type: "string";
                    readonly description: "email associated to the session.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly birthday_on: {
                    readonly type: "string";
                    readonly description: "birthday of the employee.";
                    readonly examples: readonly ["1990-06-06"];
                };
                readonly nationality: {
                    readonly type: "string";
                    readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly address_line_1: {
                    readonly type: "string";
                    readonly description: "address of the employee.";
                    readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                };
                readonly address_line_2: {
                    readonly type: "string";
                    readonly description: "secondary address of the employee.";
                    readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                };
                readonly postal_code: {
                    readonly type: "string";
                    readonly description: "postal code of the employee.";
                    readonly examples: readonly [27004];
                };
                readonly city: {
                    readonly type: "string";
                    readonly description: "city of the employee.";
                    readonly examples: readonly ["Santander"];
                };
                readonly state: {
                    readonly type: "string";
                    readonly description: "state/province/region of the employee.";
                    readonly examples: readonly ["Cantabria"];
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly bank_number: {
                    readonly type: "string";
                    readonly description: "bank account number of the employee.";
                    readonly examples: readonly ["ES6220809324751871912999"];
                };
                readonly swift_bic: {
                    readonly type: "string";
                    readonly description: "code to identify banks and financial institutions globally.";
                    readonly examples: readonly ["CAGLES2M510"];
                };
                readonly bank_number_format: {
                    readonly type: "string";
                    readonly description: "bank number format.\n\n`iban` `sort_code_and_account_number` `routing_number_and_account_number` `clabe` `other` `bank_name_and_account_number`";
                    readonly enum: readonly ["iban", "sort_code_and_account_number", "routing_number_and_account_number", "clabe", "other", "bank_name_and_account_number"];
                    readonly examples: readonly ["iban"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "id of the company to which the employee belongs (not editable).";
                    readonly examples: readonly [1];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "legal entity of the employee, references to companies/legal_entities.";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "creation date of the employee.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "date of last modification of the employee";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly social_security_number: {
                    readonly type: "string";
                    readonly description: "social security number of the employee.";
                    readonly examples: readonly [238038194000];
                };
                readonly is_terminating: {
                    readonly type: "boolean";
                    readonly description: "is the employee being terminated?";
                };
                readonly terminated_on: {
                    readonly type: "string";
                    readonly description: "termination date of the employee.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly termination_reason: {
                    readonly type: "string";
                    readonly description: "A reason for the termination.";
                    readonly examples: readonly ["The employee has left the company"];
                };
                readonly termination_observations: {
                    readonly type: "string";
                    readonly description: "observations about the termination.";
                    readonly examples: readonly ["Ana has been working on this project before she left"];
                };
                readonly manager_id: {
                    readonly type: "integer";
                    readonly description: "manager id of the employee, you can get the manager id from employees endpoint.";
                    readonly examples: readonly [1];
                };
                readonly timeoff_manager_id: {
                    readonly type: "integer";
                    readonly description: "Timeoff manager id of the employee.";
                    readonly examples: readonly [1];
                };
                readonly phone_number: {
                    readonly type: "string";
                    readonly description: "phone number of the employee.";
                    readonly examples: readonly [657483987];
                };
                readonly company_identifier: {
                    readonly type: "string";
                    readonly description: "identity number or string used inside a company to internally identify the employee.";
                    readonly examples: readonly ["bb9d281e"];
                };
                readonly age_number: {
                    readonly type: "integer";
                    readonly description: "age of the employee.";
                    readonly examples: readonly [30];
                };
                readonly contact_name: {
                    readonly type: "string";
                    readonly description: "name of the employee contact.";
                    readonly examples: readonly ["Laura Delgado"];
                };
                readonly contact_number: {
                    readonly type: "string";
                    readonly description: "phone number of the employee contact .";
                    readonly examples: readonly [647384950];
                };
                readonly personal_email: {
                    readonly type: "string";
                    readonly description: "personal email of the employee.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly pronouns: {
                    readonly type: "string";
                    readonly description: "pronouns that an employee uses to define themselves.";
                    readonly examples: readonly ["She/Her"];
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "status of the employee, true when active, false when terminated.";
                    readonly examples: readonly [true];
                };
                readonly disability_percentage_cents: {
                    readonly type: "integer";
                    readonly description: "officially certified level of disability granted by public administration for individuals with physical or mental impairments, expressed in cents";
                    readonly examples: readonly [1200];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesEmployeesEmployeesInvite: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "company_id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "id of the unconfirmed employee";
                readonly examples: readonly [1];
            };
            readonly company_id: {
                readonly type: "integer";
                readonly description: "id of the company";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "access_id", "first_name", "last_name", "full_name", "company_id", "created_at", "updated_at", "is_terminating"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "id of the employee.";
                    readonly examples: readonly [1];
                };
                readonly access_id: {
                    readonly type: "integer";
                    readonly description: "access_id associated to the employee.";
                    readonly examples: readonly [1];
                };
                readonly first_name: {
                    readonly type: "string";
                    readonly description: "name of the employee.";
                    readonly examples: readonly ["Ana"];
                };
                readonly last_name: {
                    readonly type: "string";
                    readonly description: "last name of the employee.";
                    readonly examples: readonly ["Blanco Perez"];
                };
                readonly full_name: {
                    readonly type: "string";
                    readonly description: "full name of the employee.";
                    readonly examples: readonly ["Ana Blanco Perez"];
                };
                readonly preferred_name: {
                    readonly type: "string";
                    readonly description: "nickname of the employee or a name that defines the employee better.";
                    readonly examples: readonly ["Anita"];
                };
                readonly birth_name: {
                    readonly type: "string";
                    readonly description: "Birthname of the employee.";
                    readonly examples: readonly ["Anna"];
                };
                readonly gender: {
                    readonly type: "string";
                    readonly description: "gender of the employee (male | female).";
                    readonly examples: readonly ["female"];
                };
                readonly identifier: {
                    readonly type: "string";
                    readonly description: "national identifier number.";
                    readonly examples: readonly ["QKG587532Y"];
                };
                readonly identifier_type: {
                    readonly type: "string";
                    readonly description: "type of identifier (ex passport).";
                    readonly examples: readonly ["passport"];
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "personal email of the employee.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly login_email: {
                    readonly type: "string";
                    readonly description: "email associated to the session.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly birthday_on: {
                    readonly type: "string";
                    readonly description: "birthday of the employee.";
                    readonly examples: readonly ["1990-06-06"];
                };
                readonly nationality: {
                    readonly type: "string";
                    readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly address_line_1: {
                    readonly type: "string";
                    readonly description: "address of the employee.";
                    readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                };
                readonly address_line_2: {
                    readonly type: "string";
                    readonly description: "secondary address of the employee.";
                    readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                };
                readonly postal_code: {
                    readonly type: "string";
                    readonly description: "postal code of the employee.";
                    readonly examples: readonly [27004];
                };
                readonly city: {
                    readonly type: "string";
                    readonly description: "city of the employee.";
                    readonly examples: readonly ["Santander"];
                };
                readonly state: {
                    readonly type: "string";
                    readonly description: "state/province/region of the employee.";
                    readonly examples: readonly ["Cantabria"];
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly bank_number: {
                    readonly type: "string";
                    readonly description: "bank account number of the employee.";
                    readonly examples: readonly ["ES6220809324751871912999"];
                };
                readonly swift_bic: {
                    readonly type: "string";
                    readonly description: "code to identify banks and financial institutions globally.";
                    readonly examples: readonly ["CAGLES2M510"];
                };
                readonly bank_number_format: {
                    readonly type: "string";
                    readonly description: "bank number format.\n\n`iban` `sort_code_and_account_number` `routing_number_and_account_number` `clabe` `other` `bank_name_and_account_number`";
                    readonly enum: readonly ["iban", "sort_code_and_account_number", "routing_number_and_account_number", "clabe", "other", "bank_name_and_account_number"];
                    readonly examples: readonly ["iban"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "id of the company to which the employee belongs (not editable).";
                    readonly examples: readonly [1];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "legal entity of the employee, references to companies/legal_entities.";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "creation date of the employee.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "date of last modification of the employee";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly social_security_number: {
                    readonly type: "string";
                    readonly description: "social security number of the employee.";
                    readonly examples: readonly [238038194000];
                };
                readonly is_terminating: {
                    readonly type: "boolean";
                    readonly description: "is the employee being terminated?";
                };
                readonly terminated_on: {
                    readonly type: "string";
                    readonly description: "termination date of the employee.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly termination_reason: {
                    readonly type: "string";
                    readonly description: "A reason for the termination.";
                    readonly examples: readonly ["The employee has left the company"];
                };
                readonly termination_observations: {
                    readonly type: "string";
                    readonly description: "observations about the termination.";
                    readonly examples: readonly ["Ana has been working on this project before she left"];
                };
                readonly manager_id: {
                    readonly type: "integer";
                    readonly description: "manager id of the employee, you can get the manager id from employees endpoint.";
                    readonly examples: readonly [1];
                };
                readonly timeoff_manager_id: {
                    readonly type: "integer";
                    readonly description: "Timeoff manager id of the employee.";
                    readonly examples: readonly [1];
                };
                readonly phone_number: {
                    readonly type: "string";
                    readonly description: "phone number of the employee.";
                    readonly examples: readonly [657483987];
                };
                readonly company_identifier: {
                    readonly type: "string";
                    readonly description: "identity number or string used inside a company to internally identify the employee.";
                    readonly examples: readonly ["bb9d281e"];
                };
                readonly age_number: {
                    readonly type: "integer";
                    readonly description: "age of the employee.";
                    readonly examples: readonly [30];
                };
                readonly contact_name: {
                    readonly type: "string";
                    readonly description: "name of the employee contact.";
                    readonly examples: readonly ["Laura Delgado"];
                };
                readonly contact_number: {
                    readonly type: "string";
                    readonly description: "phone number of the employee contact .";
                    readonly examples: readonly [647384950];
                };
                readonly personal_email: {
                    readonly type: "string";
                    readonly description: "personal email of the employee.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly pronouns: {
                    readonly type: "string";
                    readonly description: "pronouns that an employee uses to define themselves.";
                    readonly examples: readonly ["She/Her"];
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "status of the employee, true when active, false when terminated.";
                    readonly examples: readonly [true];
                };
                readonly disability_percentage_cents: {
                    readonly type: "integer";
                    readonly description: "officially certified level of disability granted by public administration for individuals with physical or mental impairments, expressed in cents";
                    readonly examples: readonly [1200];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesEmployeesEmployeesTerminate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "terminated_on"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "id of the employee.";
                readonly examples: readonly [1];
            };
            readonly terminated_on: {
                readonly type: "string";
                readonly description: "when the employee will be terminated.";
                readonly examples: readonly ["2024-10-06"];
            };
            readonly termination_reason: {
                readonly type: "string";
                readonly description: "A reason for the termination.";
                readonly examples: readonly ["The employee has left the company"];
            };
            readonly termination_assigned_manager_id: {
                readonly type: "integer";
                readonly description: "id of manager that terminates the employee, you can get the manager_id from employees endpoint.";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "access_id", "first_name", "last_name", "full_name", "company_id", "created_at", "updated_at", "is_terminating"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "id of the employee.";
                    readonly examples: readonly [1];
                };
                readonly access_id: {
                    readonly type: "integer";
                    readonly description: "access_id associated to the employee.";
                    readonly examples: readonly [1];
                };
                readonly first_name: {
                    readonly type: "string";
                    readonly description: "name of the employee.";
                    readonly examples: readonly ["Ana"];
                };
                readonly last_name: {
                    readonly type: "string";
                    readonly description: "last name of the employee.";
                    readonly examples: readonly ["Blanco Perez"];
                };
                readonly full_name: {
                    readonly type: "string";
                    readonly description: "full name of the employee.";
                    readonly examples: readonly ["Ana Blanco Perez"];
                };
                readonly preferred_name: {
                    readonly type: "string";
                    readonly description: "nickname of the employee or a name that defines the employee better.";
                    readonly examples: readonly ["Anita"];
                };
                readonly birth_name: {
                    readonly type: "string";
                    readonly description: "Birthname of the employee.";
                    readonly examples: readonly ["Anna"];
                };
                readonly gender: {
                    readonly type: "string";
                    readonly description: "gender of the employee (male | female).";
                    readonly examples: readonly ["female"];
                };
                readonly identifier: {
                    readonly type: "string";
                    readonly description: "national identifier number.";
                    readonly examples: readonly ["QKG587532Y"];
                };
                readonly identifier_type: {
                    readonly type: "string";
                    readonly description: "type of identifier (ex passport).";
                    readonly examples: readonly ["passport"];
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "personal email of the employee.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly login_email: {
                    readonly type: "string";
                    readonly description: "email associated to the session.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly birthday_on: {
                    readonly type: "string";
                    readonly description: "birthday of the employee.";
                    readonly examples: readonly ["1990-06-06"];
                };
                readonly nationality: {
                    readonly type: "string";
                    readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly address_line_1: {
                    readonly type: "string";
                    readonly description: "address of the employee.";
                    readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                };
                readonly address_line_2: {
                    readonly type: "string";
                    readonly description: "secondary address of the employee.";
                    readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                };
                readonly postal_code: {
                    readonly type: "string";
                    readonly description: "postal code of the employee.";
                    readonly examples: readonly [27004];
                };
                readonly city: {
                    readonly type: "string";
                    readonly description: "city of the employee.";
                    readonly examples: readonly ["Santander"];
                };
                readonly state: {
                    readonly type: "string";
                    readonly description: "state/province/region of the employee.";
                    readonly examples: readonly ["Cantabria"];
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly bank_number: {
                    readonly type: "string";
                    readonly description: "bank account number of the employee.";
                    readonly examples: readonly ["ES6220809324751871912999"];
                };
                readonly swift_bic: {
                    readonly type: "string";
                    readonly description: "code to identify banks and financial institutions globally.";
                    readonly examples: readonly ["CAGLES2M510"];
                };
                readonly bank_number_format: {
                    readonly type: "string";
                    readonly description: "bank number format.\n\n`iban` `sort_code_and_account_number` `routing_number_and_account_number` `clabe` `other` `bank_name_and_account_number`";
                    readonly enum: readonly ["iban", "sort_code_and_account_number", "routing_number_and_account_number", "clabe", "other", "bank_name_and_account_number"];
                    readonly examples: readonly ["iban"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "id of the company to which the employee belongs (not editable).";
                    readonly examples: readonly [1];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "legal entity of the employee, references to companies/legal_entities.";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "creation date of the employee.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "date of last modification of the employee";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly social_security_number: {
                    readonly type: "string";
                    readonly description: "social security number of the employee.";
                    readonly examples: readonly [238038194000];
                };
                readonly is_terminating: {
                    readonly type: "boolean";
                    readonly description: "is the employee being terminated?";
                };
                readonly terminated_on: {
                    readonly type: "string";
                    readonly description: "termination date of the employee.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly termination_reason: {
                    readonly type: "string";
                    readonly description: "A reason for the termination.";
                    readonly examples: readonly ["The employee has left the company"];
                };
                readonly termination_observations: {
                    readonly type: "string";
                    readonly description: "observations about the termination.";
                    readonly examples: readonly ["Ana has been working on this project before she left"];
                };
                readonly manager_id: {
                    readonly type: "integer";
                    readonly description: "manager id of the employee, you can get the manager id from employees endpoint.";
                    readonly examples: readonly [1];
                };
                readonly timeoff_manager_id: {
                    readonly type: "integer";
                    readonly description: "Timeoff manager id of the employee.";
                    readonly examples: readonly [1];
                };
                readonly phone_number: {
                    readonly type: "string";
                    readonly description: "phone number of the employee.";
                    readonly examples: readonly [657483987];
                };
                readonly company_identifier: {
                    readonly type: "string";
                    readonly description: "identity number or string used inside a company to internally identify the employee.";
                    readonly examples: readonly ["bb9d281e"];
                };
                readonly age_number: {
                    readonly type: "integer";
                    readonly description: "age of the employee.";
                    readonly examples: readonly [30];
                };
                readonly contact_name: {
                    readonly type: "string";
                    readonly description: "name of the employee contact.";
                    readonly examples: readonly ["Laura Delgado"];
                };
                readonly contact_number: {
                    readonly type: "string";
                    readonly description: "phone number of the employee contact .";
                    readonly examples: readonly [647384950];
                };
                readonly personal_email: {
                    readonly type: "string";
                    readonly description: "personal email of the employee.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly pronouns: {
                    readonly type: "string";
                    readonly description: "pronouns that an employee uses to define themselves.";
                    readonly examples: readonly ["She/Her"];
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "status of the employee, true when active, false when terminated.";
                    readonly examples: readonly [true];
                };
                readonly disability_percentage_cents: {
                    readonly type: "integer";
                    readonly description: "officially certified level of disability granted by public administration for individuals with physical or mental impairments, expressed in cents";
                    readonly examples: readonly [1200];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesEmployeesEmployeesUnterminate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "id of the employee.";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "access_id", "first_name", "last_name", "full_name", "company_id", "created_at", "updated_at", "is_terminating"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "id of the employee.";
                    readonly examples: readonly [1];
                };
                readonly access_id: {
                    readonly type: "integer";
                    readonly description: "access_id associated to the employee.";
                    readonly examples: readonly [1];
                };
                readonly first_name: {
                    readonly type: "string";
                    readonly description: "name of the employee.";
                    readonly examples: readonly ["Ana"];
                };
                readonly last_name: {
                    readonly type: "string";
                    readonly description: "last name of the employee.";
                    readonly examples: readonly ["Blanco Perez"];
                };
                readonly full_name: {
                    readonly type: "string";
                    readonly description: "full name of the employee.";
                    readonly examples: readonly ["Ana Blanco Perez"];
                };
                readonly preferred_name: {
                    readonly type: "string";
                    readonly description: "nickname of the employee or a name that defines the employee better.";
                    readonly examples: readonly ["Anita"];
                };
                readonly birth_name: {
                    readonly type: "string";
                    readonly description: "Birthname of the employee.";
                    readonly examples: readonly ["Anna"];
                };
                readonly gender: {
                    readonly type: "string";
                    readonly description: "gender of the employee (male | female).";
                    readonly examples: readonly ["female"];
                };
                readonly identifier: {
                    readonly type: "string";
                    readonly description: "national identifier number.";
                    readonly examples: readonly ["QKG587532Y"];
                };
                readonly identifier_type: {
                    readonly type: "string";
                    readonly description: "type of identifier (ex passport).";
                    readonly examples: readonly ["passport"];
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "personal email of the employee.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly login_email: {
                    readonly type: "string";
                    readonly description: "email associated to the session.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly birthday_on: {
                    readonly type: "string";
                    readonly description: "birthday of the employee.";
                    readonly examples: readonly ["1990-06-06"];
                };
                readonly nationality: {
                    readonly type: "string";
                    readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly address_line_1: {
                    readonly type: "string";
                    readonly description: "address of the employee.";
                    readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                };
                readonly address_line_2: {
                    readonly type: "string";
                    readonly description: "secondary address of the employee.";
                    readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                };
                readonly postal_code: {
                    readonly type: "string";
                    readonly description: "postal code of the employee.";
                    readonly examples: readonly [27004];
                };
                readonly city: {
                    readonly type: "string";
                    readonly description: "city of the employee.";
                    readonly examples: readonly ["Santander"];
                };
                readonly state: {
                    readonly type: "string";
                    readonly description: "state/province/region of the employee.";
                    readonly examples: readonly ["Cantabria"];
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly bank_number: {
                    readonly type: "string";
                    readonly description: "bank account number of the employee.";
                    readonly examples: readonly ["ES6220809324751871912999"];
                };
                readonly swift_bic: {
                    readonly type: "string";
                    readonly description: "code to identify banks and financial institutions globally.";
                    readonly examples: readonly ["CAGLES2M510"];
                };
                readonly bank_number_format: {
                    readonly type: "string";
                    readonly description: "bank number format.\n\n`iban` `sort_code_and_account_number` `routing_number_and_account_number` `clabe` `other` `bank_name_and_account_number`";
                    readonly enum: readonly ["iban", "sort_code_and_account_number", "routing_number_and_account_number", "clabe", "other", "bank_name_and_account_number"];
                    readonly examples: readonly ["iban"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "id of the company to which the employee belongs (not editable).";
                    readonly examples: readonly [1];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "legal entity of the employee, references to companies/legal_entities.";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "creation date of the employee.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "date of last modification of the employee";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly social_security_number: {
                    readonly type: "string";
                    readonly description: "social security number of the employee.";
                    readonly examples: readonly [238038194000];
                };
                readonly is_terminating: {
                    readonly type: "boolean";
                    readonly description: "is the employee being terminated?";
                };
                readonly terminated_on: {
                    readonly type: "string";
                    readonly description: "termination date of the employee.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly termination_reason: {
                    readonly type: "string";
                    readonly description: "A reason for the termination.";
                    readonly examples: readonly ["The employee has left the company"];
                };
                readonly termination_observations: {
                    readonly type: "string";
                    readonly description: "observations about the termination.";
                    readonly examples: readonly ["Ana has been working on this project before she left"];
                };
                readonly manager_id: {
                    readonly type: "integer";
                    readonly description: "manager id of the employee, you can get the manager id from employees endpoint.";
                    readonly examples: readonly [1];
                };
                readonly timeoff_manager_id: {
                    readonly type: "integer";
                    readonly description: "Timeoff manager id of the employee.";
                    readonly examples: readonly [1];
                };
                readonly phone_number: {
                    readonly type: "string";
                    readonly description: "phone number of the employee.";
                    readonly examples: readonly [657483987];
                };
                readonly company_identifier: {
                    readonly type: "string";
                    readonly description: "identity number or string used inside a company to internally identify the employee.";
                    readonly examples: readonly ["bb9d281e"];
                };
                readonly age_number: {
                    readonly type: "integer";
                    readonly description: "age of the employee.";
                    readonly examples: readonly [30];
                };
                readonly contact_name: {
                    readonly type: "string";
                    readonly description: "name of the employee contact.";
                    readonly examples: readonly ["Laura Delgado"];
                };
                readonly contact_number: {
                    readonly type: "string";
                    readonly description: "phone number of the employee contact .";
                    readonly examples: readonly [647384950];
                };
                readonly personal_email: {
                    readonly type: "string";
                    readonly description: "personal email of the employee.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly pronouns: {
                    readonly type: "string";
                    readonly description: "pronouns that an employee uses to define themselves.";
                    readonly examples: readonly ["She/Her"];
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "status of the employee, true when active, false when terminated.";
                    readonly examples: readonly [true];
                };
                readonly disability_percentage_cents: {
                    readonly type: "integer";
                    readonly description: "officially certified level of disability granted by public administration for individuals with physical or mental impairments, expressed in cents";
                    readonly examples: readonly [1200];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesFinanceAccounts: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["number", "type"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Name of the ledger account";
                readonly examples: readonly ["Bank account"];
            };
            readonly number: {
                readonly type: "string";
                readonly description: "Number of the ledger account";
                readonly examples: readonly ["1000"];
            };
            readonly type: {
                readonly type: "string";
                readonly description: "Type of the ledger account";
                readonly enum: readonly ["equity", "non_current_asset", "current_asset", "bank", "non_current_liability", "current_liability", "expense", "income"];
                readonly examples: readonly ["bank"];
            };
            readonly legal_entity_id: {
                readonly type: "integer";
                readonly description: "Legal entity ID of the ledger account";
                readonly examples: readonly [1];
            };
            readonly external_id: {
                readonly type: "string";
                readonly description: "Id of the ledger account on the external system. This field is important to avoid having duplicated ledger accounts";
                readonly examples: readonly ["123"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "number", "disabled", "type"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier in factorial for the ledger account";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the ledger account";
                    readonly examples: readonly ["Bank account"];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "Legal entity ID of the ledger account";
                    readonly examples: readonly [1];
                };
                readonly number: {
                    readonly type: "string";
                    readonly description: "Number of the ledger account";
                    readonly examples: readonly ["1000"];
                };
                readonly disabled: {
                    readonly type: "boolean";
                    readonly description: "Whether the ledger account is disabled";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the ledger account\n\n`equity` `non_current_asset` `current_asset` `bank` `non_current_liability` `current_liability` `expense` `income`";
                    readonly enum: readonly ["equity", "non_current_asset", "current_asset", "bank", "non_current_liability", "current_liability", "expense", "income"];
                    readonly examples: readonly ["bank"];
                };
                readonly external_id: {
                    readonly type: "string";
                    readonly description: "Id of the ledger account on the external system";
                    readonly examples: readonly ["123"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesFinanceCostCenterMembershipsBulkCreateUpdate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["employee_id", "memberships", "company_id"];
        readonly properties: {
            readonly employee_id: {
                readonly type: "integer";
            };
            readonly memberships: {
                readonly type: "array";
                readonly items: {};
            };
            readonly company_id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "employee_id", "cost_center_id", "start_date", "percentage"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly cost_center_id: {
                        readonly type: "integer";
                    };
                    readonly start_date: {
                        readonly type: "string";
                    };
                    readonly end_date: {
                        readonly type: "string";
                    };
                    readonly percentage: {
                        readonly type: "number";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesFinanceCostCenters: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "company_id"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly company_id: {
                readonly type: "integer";
            };
            readonly legal_entity_id: {
                readonly type: "integer";
            };
            readonly code: {
                readonly type: "string";
            };
            readonly description: {
                readonly type: "string";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id", "active_employees_count", "historical_employees_count", "status"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                };
                readonly code: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly active_employees_count: {
                    readonly type: "integer";
                };
                readonly historical_employees_count: {
                    readonly type: "integer";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly deactivation_date: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesFinanceCostCentersEdit: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "company_id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly name: {
                readonly type: "string";
            };
            readonly code: {
                readonly type: "string";
            };
            readonly description: {
                readonly type: "string";
            };
            readonly company_id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id", "active_employees_count", "historical_employees_count", "status"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                };
                readonly code: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly active_employees_count: {
                    readonly type: "integer";
                };
                readonly historical_employees_count: {
                    readonly type: "integer";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly deactivation_date: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesLocationsLocations: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "country", "timezone", "company_id"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly country: {
                readonly type: "string";
            };
            readonly main: {
                readonly type: "boolean";
            };
            readonly city: {
                readonly type: "string";
            };
            readonly state: {
                readonly type: "string";
            };
            readonly phone_number: {
                readonly type: "string";
            };
            readonly postal_code: {
                readonly type: "string";
            };
            readonly address_line_one: {
                readonly type: "string";
            };
            readonly address_line_two: {
                readonly type: "string";
            };
            readonly latitude: {
                readonly type: "number";
            };
            readonly longitude: {
                readonly type: "number";
            };
            readonly timezone: {
                readonly type: "string";
            };
            readonly radius: {
                readonly type: "number";
            };
            readonly company_id: {
                readonly type: "integer";
            };
            readonly siret: {
                readonly type: "string";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "name", "main"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly timezone: {
                    readonly type: "string";
                };
                readonly country: {
                    readonly type: "string";
                };
                readonly state: {
                    readonly type: "string";
                };
                readonly city: {
                    readonly type: "string";
                };
                readonly address_line_1: {
                    readonly type: "string";
                };
                readonly address_line_2: {
                    readonly type: "string";
                };
                readonly postal_code: {
                    readonly type: "string";
                };
                readonly phone_number: {
                    readonly type: "string";
                };
                readonly main: {
                    readonly type: "boolean";
                };
                readonly latitude: {
                    readonly type: "number";
                };
                readonly longitude: {
                    readonly type: "number";
                };
                readonly radius: {
                    readonly type: "number";
                };
                readonly siret: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesLocationsWorkAreas: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "location_id"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly location_id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "location_id", "name"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly location_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly archived_at: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesLocationsWorkAreasArchive: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "location_id", "name"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly location_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly archived_at: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesLocationsWorkAreasUnarchive: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "location_id", "name"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly location_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly archived_at: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPayrollEmployeesIdentifiers: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["employee_id", "country"];
        readonly properties: {
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "identifier of the employee";
                readonly examples: readonly [1];
            };
            readonly social_security_number: {
                readonly type: "string";
                readonly description: "social security number of the employee";
                readonly examples: readonly [123456788];
            };
            readonly tax_id: {
                readonly type: "string";
                readonly description: "tax id of the employee";
                readonly examples: readonly [123456789];
            };
            readonly country: {
                readonly type: "string";
                readonly description: "country code of the employee pt | it | de";
                readonly enum: readonly ["pt", "de", "it"];
                readonly examples: readonly ["it"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "country"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "payroll employee identifier";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "identifier of the employee";
                    readonly examples: readonly [1];
                };
                readonly social_security_number: {
                    readonly type: "string";
                    readonly description: "social security number of the employee";
                    readonly examples: readonly [123456788];
                };
                readonly tax_id: {
                    readonly type: "string";
                    readonly description: "tax id of the employee";
                    readonly examples: readonly [123456789];
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "country code of the employee pt | it | de\n\n`pt` `de` `it`";
                    readonly enum: readonly ["pt", "de", "it"];
                    readonly examples: readonly ["it"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPayrollFamilySituations: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["employee_id"];
        readonly properties: {
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "Employee id.";
                readonly examples: readonly [10];
            };
            readonly civil_status: {
                readonly type: "string";
                readonly description: "Civil status of the employee.";
                readonly enum: readonly ["single", "cohabitating", "divorced", "married", "civil_partnership", "separated", "widow", "not_applicable", "unknown"];
                readonly examples: readonly ["married"];
            };
            readonly number_of_dependants: {
                readonly type: "integer";
                readonly description: "Number of dependants of the employee.";
                readonly examples: readonly [3];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "ID of the family situation.";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee id of the family situation.";
                    readonly examples: readonly [5];
                };
                readonly civil_status: {
                    readonly type: "string";
                    readonly description: "Civil status of the employee.\n\n`single` `cohabitating` `divorced` `married` `unknown` `civil_partnership` `separated` `widow` `not_applicable`";
                    readonly enum: readonly ["single", "cohabitating", "divorced", "married", "unknown", "civil_partnership", "separated", "widow", "not_applicable"];
                    readonly examples: readonly ["married"];
                };
                readonly number_of_dependants: {
                    readonly type: "integer";
                    readonly description: "Number of dependants of the employee.";
                    readonly examples: readonly [2];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPayrollIntegrationsBaseCodes: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["code", "codeable_id", "codeable_type", "integration"];
        readonly properties: {
            readonly code: {
                readonly type: "string";
                readonly description: "Code Value";
                readonly examples: readonly ["COD-51"];
            };
            readonly codeable_id: {
                readonly type: "integer";
                readonly description: "Related object ID. Used together with codeable_type";
                readonly examples: readonly [1];
            };
            readonly codeable_type: {
                readonly type: "string";
                readonly description: "Related object type. Used together with codeable_id";
                readonly examples: readonly ["Employee | Company | LegalEntity | Location | TimeoffLeaveType"];
            };
            readonly integration: {
                readonly type: "string";
                readonly description: "Integration name";
                readonly enum: readonly ["a3innuva", "a3nom", "paierh", "silae", "silae_api", "datev", "datev_api", "datev_lug_api", "zucchetti"];
                readonly examples: readonly ["a3innuva"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "code", "codeable_id", "codeable_type", "integration"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Code identifier";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company ID where the code belongs to";
                    readonly examples: readonly [2];
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Code value";
                    readonly examples: readonly ["COD-51"];
                };
                readonly codeable_id: {
                    readonly type: "integer";
                    readonly description: "Related object ID. Used together with codeable_type";
                    readonly examples: readonly [5];
                };
                readonly codeable_type: {
                    readonly type: "string";
                    readonly description: "Related object type. Used together with codeable_id";
                    readonly examples: readonly ["Employee | Company | LegalEntity | Location | TimeoffLeaveType"];
                };
                readonly integration: {
                    readonly type: "string";
                    readonly description: "Integration name\n\n`a3innuva` `a3nom` `paierh` `silae` `silae_api` `datev` `datev_api` `datev_lug_api` `zucchetti`";
                    readonly enum: readonly ["a3innuva", "a3nom", "paierh", "silae", "silae_api", "datev", "datev_api", "datev_lug_api", "zucchetti"];
                    readonly examples: readonly ["a3innuva"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPayrollPolicyPeriodsChangeStatus: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "status", "notify_employee", "employee_ids"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly status: {
                readonly type: "string";
                readonly enum: readonly ["preparation", "supplements_definition", "under_review", "payroll_calculation", "paid"];
            };
            readonly notify_employee: {
                readonly type: "boolean";
            };
            readonly employee_ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "starts_on", "policy_id", "company_id", "ends_on", "period"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Policy period id";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Policy name with start and end date";
                    readonly examples: readonly ["Policy name example 20 aug - 13 sep"];
                };
                readonly starts_on: {
                    readonly type: "string";
                    readonly description: "The start date of the policy period";
                    readonly examples: readonly ["2020-01-01"];
                };
                readonly policy_id: {
                    readonly type: "integer";
                    readonly description: "The id of the policy associated with the policy period";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "The id of the company";
                    readonly examples: readonly [1];
                };
                readonly ends_on: {
                    readonly type: "string";
                    readonly description: "The start date of the policy period";
                    readonly examples: readonly ["2020-01-01"];
                };
                readonly period: {
                    readonly type: "string";
                    readonly description: "Period for the policy";
                    readonly examples: readonly ["20 aug - 13 sep 2021"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Policy period status";
                    readonly examples: readonly ["preparation"];
                };
                readonly policy_name: {
                    readonly type: "string";
                    readonly description: "Policy name";
                    readonly examples: readonly ["Policy name example"];
                };
                readonly calculation_started_at: {
                    readonly type: "string";
                    readonly description: "The date and time the calculation started";
                    readonly examples: readonly ["2020-01-01"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPayrollSupplements: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["amount_in_cents", "employee_id", "effective_on", "contracts_taxonomy_id"];
        readonly properties: {
            readonly amount_in_cents: {
                readonly type: "integer";
                readonly description: "Supplement amount in cents";
                readonly examples: readonly ["50000"];
            };
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "The employee id of the suplement";
                readonly examples: readonly [1];
            };
            readonly effective_on: {
                readonly type: "string";
                readonly description: "Supplement effective on date following the format YYYY-MM-DD";
                readonly examples: readonly ["2024-01-01"];
            };
            readonly contracts_taxonomy_id: {
                readonly type: "integer";
                readonly description: "Supplement contract taxonomy id";
                readonly examples: readonly [2];
            };
            readonly contracts_compensation_id: {
                readonly type: "integer";
                readonly description: "Supplement contract compensation id";
                readonly examples: readonly [1];
            };
            readonly payroll_policy_period_id: {
                readonly type: "integer";
                readonly description: "Supplement payroll policy period id";
                readonly examples: readonly [1];
            };
            readonly unit: {
                readonly type: "string";
                readonly description: "Supplement unit";
                readonly examples: readonly ["usd"];
            };
            readonly worked_days: {
                readonly type: "integer";
                readonly description: "Supplement worked days";
                readonly examples: readonly [5];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "company_id", "unit"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "The identifier of the supplement";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "The identifier of the employee associated with the supplement";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "The identifier of the company associated with the supplement";
                    readonly examples: readonly [1];
                };
                readonly contracts_compensation_id: {
                    readonly type: "integer";
                    readonly description: "The contract compensation identifier associated with the supplement";
                    readonly examples: readonly [1];
                };
                readonly contracts_taxonomy_id: {
                    readonly type: "integer";
                    readonly description: "The taxonomy identifier associated with the supplement";
                    readonly examples: readonly [1];
                };
                readonly amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The amount of the supplement in cents";
                    readonly examples: readonly [10000];
                };
                readonly unit: {
                    readonly type: "string";
                    readonly description: "The unit of the supplement\n\n`money` `units` `time`";
                    readonly enum: readonly ["money", "units", "time"];
                    readonly examples: readonly ["hours"];
                };
                readonly effective_on: {
                    readonly type: "string";
                    readonly description: "The date on which the supplement becomes effective";
                    readonly examples: readonly ["2024-01-01"];
                };
                readonly created_at: {
                    readonly type: "boolean";
                    readonly description: "The created at date when the supplement was created";
                    readonly examples: readonly ["2024-01-01T12:00:00Z"];
                };
                readonly updated_at: {
                    readonly type: "boolean";
                    readonly description: "The last updated at date when the supplement was last updated";
                    readonly examples: readonly ["2024-01-05T12:00:00Z"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The description of the supplement";
                    readonly examples: readonly ["Supplement for additional work hours"];
                };
                readonly payroll_policy_period_id: {
                    readonly type: "integer";
                    readonly description: "The payroll policy period identifier associated with the supplement";
                    readonly examples: readonly [23456];
                };
                readonly employee_observations: {
                    readonly type: "array";
                    readonly description: "Observations on the employee made by the admin or manager";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["Worked extra shifts", "Bonus for holiday work"];
                };
                readonly raw_minutes_in_cents: {
                    readonly type: "integer";
                    readonly description: "The raw value of minutes in cents associated with the supplement";
                    readonly examples: readonly [5000];
                };
                readonly minutes_in_cents: {
                    readonly type: "integer";
                    readonly description: "The value of minutes in cents after adjustments";
                    readonly examples: readonly [4800];
                };
                readonly equivalent_minutes_in_cents: {
                    readonly type: "integer";
                    readonly description: "The equivalent value of minutes in cents for payroll processing";
                    readonly examples: readonly [4600];
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "The currency used for the supplement, typically in ISO 4217 format";
                    readonly examples: readonly ["USD"];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "The legal entity identifier associated with the supplement";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceAgreementsBulkInitiate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["process_id"];
        readonly properties: {
            readonly process_id: {
                readonly type: "integer";
                readonly description: "Review process ID";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "process_id", "target_id", "status", "locked"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Action plan ID";
                        readonly examples: readonly ["1"];
                    };
                    readonly process_id: {
                        readonly type: "integer";
                        readonly description: "Review process ID";
                        readonly examples: readonly [1];
                    };
                    readonly target_id: {
                        readonly type: "string";
                        readonly description: "Review process target ID";
                        readonly examples: readonly ["1-3"];
                    };
                    readonly signer_id: {
                        readonly type: "integer";
                        readonly description: "Manager access ID who signed the action plan";
                        readonly examples: readonly [5];
                    };
                    readonly reviewer_id: {
                        readonly type: "integer";
                        readonly description: "Manager employee ID";
                        readonly examples: readonly [3];
                    };
                    readonly reviewer_access_id: {
                        readonly type: "integer";
                        readonly description: "Manager access ID";
                        readonly examples: readonly [6];
                    };
                    readonly manager_signed_at: {
                        readonly type: "string";
                        readonly description: "Date when the manager signed the action plan";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                    readonly target_signed_at: {
                        readonly type: "string";
                        readonly description: "Date when the employee signed the action plan";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                    readonly agreement_signed_at: {
                        readonly type: "string";
                        readonly description: "Date when the action plan was last signed";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                    readonly last_modified_at: {
                        readonly type: "string";
                        readonly description: "Date when the action plan was last modified";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "Action plan status\n\n`pending` `signed`";
                        readonly enum: readonly ["pending", "signed"];
                        readonly examples: readonly ["signed"];
                    };
                    readonly locked: {
                        readonly type: "boolean";
                        readonly description: "When the action plan cannot be edited anymore. Locked when both manager and employee signed it.";
                        readonly examples: readonly [true];
                    };
                    readonly conclusions: {
                        readonly type: "object";
                        readonly description: "Conclusions of the action plan";
                        readonly additionalProperties: true;
                    };
                    readonly manager_questionnaire: {
                        readonly type: "object";
                        readonly description: "List of questions, answers and their respective comments grouped by sections.";
                        readonly additionalProperties: true;
                    };
                    readonly self_questionnaire: {
                        readonly type: "object";
                        readonly description: "List of questions, answers and their respective comments grouped by sections.";
                        readonly additionalProperties: true;
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceAgreementsInitiate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["process_id", "target_id"];
        readonly properties: {
            readonly process_id: {
                readonly type: "integer";
                readonly description: "Review process ID";
                readonly examples: readonly [1];
            };
            readonly target_id: {
                readonly type: "string";
                readonly description: "Review process target ID";
                readonly examples: readonly ["1-3"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "process_id", "target_id", "status", "locked"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Action plan ID";
                    readonly examples: readonly ["1"];
                };
                readonly process_id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly target_id: {
                    readonly type: "string";
                    readonly description: "Review process target ID";
                    readonly examples: readonly ["1-3"];
                };
                readonly signer_id: {
                    readonly type: "integer";
                    readonly description: "Manager access ID who signed the action plan";
                    readonly examples: readonly [5];
                };
                readonly reviewer_id: {
                    readonly type: "integer";
                    readonly description: "Manager employee ID";
                    readonly examples: readonly [3];
                };
                readonly reviewer_access_id: {
                    readonly type: "integer";
                    readonly description: "Manager access ID";
                    readonly examples: readonly [6];
                };
                readonly manager_signed_at: {
                    readonly type: "string";
                    readonly description: "Date when the manager signed the action plan";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly target_signed_at: {
                    readonly type: "string";
                    readonly description: "Date when the employee signed the action plan";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly agreement_signed_at: {
                    readonly type: "string";
                    readonly description: "Date when the action plan was last signed";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly last_modified_at: {
                    readonly type: "string";
                    readonly description: "Date when the action plan was last modified";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Action plan status\n\n`pending` `signed`";
                    readonly enum: readonly ["pending", "signed"];
                    readonly examples: readonly ["signed"];
                };
                readonly locked: {
                    readonly type: "boolean";
                    readonly description: "When the action plan cannot be edited anymore. Locked when both manager and employee signed it.";
                    readonly examples: readonly [true];
                };
                readonly conclusions: {
                    readonly type: "object";
                    readonly description: "Conclusions of the action plan";
                    readonly additionalProperties: true;
                };
                readonly manager_questionnaire: {
                    readonly type: "object";
                    readonly description: "List of questions, answers and their respective comments grouped by sections.";
                    readonly additionalProperties: true;
                };
                readonly self_questionnaire: {
                    readonly type: "object";
                    readonly description: "List of questions, answers and their respective comments grouped by sections.";
                    readonly additionalProperties: true;
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewEvaluationsReplaceReviewer: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "new_reviewer_access_id"];
        readonly properties: {
            readonly id: {
                readonly type: "string";
                readonly description: "Evaluation ID";
                readonly examples: readonly [1];
            };
            readonly new_reviewer_access_id: {
                readonly type: "string";
                readonly description: "New reviewer access ID";
                readonly examples: readonly [5];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "published", "status", "review_process_target_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Evaluation ID";
                    readonly examples: readonly [1];
                };
                readonly performance_review_process_id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly target_access_id: {
                    readonly type: "integer";
                    readonly description: "Participant access ID";
                    readonly examples: readonly [1];
                };
                readonly reviewer_access_id: {
                    readonly type: "integer";
                    readonly description: "Reviewer access ID";
                    readonly examples: readonly [1];
                };
                readonly evaluation_type: {
                    readonly type: "string";
                    readonly description: "Evaluation type\n\n`self` `manager` `direct_reports` `peers`";
                    readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                    readonly examples: readonly ["manager"];
                };
                readonly published: {
                    readonly type: "boolean";
                    readonly description: "Whether the evaluation is published";
                    readonly examples: readonly [true];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Evaluation status\n\n`pending` `published`";
                    readonly enum: readonly ["pending", "published"];
                    readonly examples: readonly ["published"];
                };
                readonly review_process_target_id: {
                    readonly type: "string";
                };
                readonly published_at: {
                    readonly type: "string";
                    readonly description: "Date when the evaluation was published";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewOwnersBulkCreate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["review_process_id", "owner_access_ids"];
        readonly properties: {
            readonly review_process_id: {
                readonly type: "integer";
                readonly description: "Review process ID";
                readonly examples: readonly [1];
            };
            readonly owner_access_ids: {
                readonly type: "array";
                readonly description: "List of access IDs to be added as owners";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "access_id", "performance_review_process_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Review owner ID";
                        readonly examples: readonly [1];
                    };
                    readonly access_id: {
                        readonly type: "integer";
                        readonly description: "Review owner access ID";
                        readonly examples: readonly [2];
                    };
                    readonly performance_review_process_id: {
                        readonly type: "integer";
                        readonly description: "Review process ID";
                        readonly examples: readonly [1];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewProcessTargetsAddPeers: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "peer_access_ids"];
        readonly properties: {
            readonly id: {
                readonly type: "string";
                readonly description: "Review process target ID";
                readonly examples: readonly ["1-3"];
            };
            readonly peer_access_ids: {
                readonly type: "array";
                readonly description: "List of access IDs to be added as peers for the participant";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "access_id", "performance_review_process_id", "materialized_process_target_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Review process target ID";
                    readonly examples: readonly ["1-3"];
                };
                readonly access_id: {
                    readonly type: "integer";
                    readonly description: "Participant access ID";
                    readonly examples: readonly [3];
                };
                readonly performance_review_process_id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly materialized_process_target_id: {
                    readonly type: "integer";
                    readonly examples: readonly [5];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewProcessTargetsBulkCreate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["performance_review_process_id", "targets_access_ids"];
        readonly properties: {
            readonly performance_review_process_id: {
                readonly type: "integer";
                readonly description: "Review process ID";
                readonly examples: readonly [1];
            };
            readonly targets_access_ids: {
                readonly type: "array";
                readonly description: "List of access IDs to be added as participants";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "access_id", "performance_review_process_id", "materialized_process_target_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Review process target ID";
                        readonly examples: readonly ["1-3"];
                    };
                    readonly access_id: {
                        readonly type: "integer";
                        readonly description: "Participant access ID";
                        readonly examples: readonly [3];
                    };
                    readonly performance_review_process_id: {
                        readonly type: "integer";
                        readonly description: "Review process ID";
                        readonly examples: readonly [1];
                    };
                    readonly materialized_process_target_id: {
                        readonly type: "integer";
                        readonly examples: readonly [5];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewProcessTargetsRemovePeerEvaluations: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "evaluation_ids"];
        readonly properties: {
            readonly id: {
                readonly type: "string";
            };
            readonly evaluation_ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "access_id", "performance_review_process_id", "materialized_process_target_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Review process target ID";
                    readonly examples: readonly ["1-3"];
                };
                readonly access_id: {
                    readonly type: "integer";
                    readonly description: "Participant access ID";
                    readonly examples: readonly [3];
                };
                readonly performance_review_process_id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly materialized_process_target_id: {
                    readonly type: "integer";
                    readonly examples: readonly [5];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewProcesses: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["author_access_id"];
        readonly properties: {
            readonly author_access_id: {
                readonly type: "integer";
                readonly description: "Access identifier of the author of the review process";
                readonly examples: readonly [1];
            };
            readonly name: {
                readonly type: "string";
                readonly description: "Name of the review process";
                readonly examples: readonly ["Performance Review - Q1 2024"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "A brief description of the review process";
                readonly examples: readonly ["The performance review for the first quarter of 2024 has started!"];
            };
            readonly reviewer_strategies: {
                readonly type: "array";
                readonly description: "Review types that will be assigned to the review process. It'll be used to create the evaluations when the process starts";
                readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                readonly items: {
                    readonly type: "string";
                };
                readonly examples: readonly ["self", "manager"];
            };
            readonly target_strategy: {
                readonly type: "string";
                readonly description: "Condition that defines the employees that will be evaluated (participants). Calculated when the review process starts";
                readonly enum: readonly ["all_employees", "by_locations", "by_teams", "manual_selection"];
                readonly examples: readonly ["all_employees"];
            };
            readonly arguments: {
                readonly type: "array";
                readonly description: "IDs of target strategy groups selected";
                readonly items: {
                    readonly type: "integer";
                };
            };
            readonly ends_at: {
                readonly type: "string";
                readonly description: "Date when the review process should end";
                readonly examples: readonly ["2024-04-01T00:00:00Z"];
            };
            readonly agreements_enabled: {
                readonly type: "boolean";
                readonly description: "Whether the action plans are enabled or not. This will allow initializing and signing action plans for self and manager evaluations";
                readonly examples: readonly [true];
            };
            readonly employee_score_enabled: {
                readonly type: "boolean";
                readonly description: "Whether the review process should generate employee scores or not. This will add a mandatory question at the end of \"Self\" and \"Manager\" questionnaires to evaluate the employee's performance and generate the score.";
                readonly examples: readonly [true];
            };
            readonly cycle_id: {
                readonly type: "string";
                readonly description: "Performance cycle ID";
                readonly examples: readonly ["5"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "status", "start_validation_errors", "archived", "agreements_configuration", "employee_score_configuration"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Review process name";
                    readonly examples: readonly ["Performance Review - Q1 2024"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A brief description of the review process";
                    readonly examples: readonly ["The performance review for the first quarter of 2024 has started!"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Review process status\n\n`draft` `scheduled` `active` `finished`";
                    readonly enum: readonly ["draft", "scheduled", "active", "finished"];
                    readonly examples: readonly ["draft"];
                };
                readonly target_strategy: {
                    readonly type: "object";
                    readonly description: "Condition that defines the employees that will be evaluated (participants). Calculated when the review process starts";
                    readonly examples: readonly ["all_employees"];
                    readonly additionalProperties: true;
                };
                readonly reviewer_strategies: {
                    readonly type: "array";
                    readonly description: "Review types that will be assigned to the review process. It'll be used to create the evaluations when the process starts\n\n`self` `manager` `direct_reports` `peers`";
                    readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["self", "manager"];
                };
                readonly starts_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should start";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly ends_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should end";
                    readonly examples: readonly ["2024-04-01T00:00:00Z"];
                };
                readonly start_validation_errors: {
                    readonly type: "array";
                    readonly description: "Missing or invalid information to be able to start the review process\n\n`missing_deadline` `invalid_deadline` `missing_title` `missing_target_strategy` `missing_target_strategy_members` `missing_reviewer_strategy` `missing_questions` `missing_potential_reviewers`";
                    readonly enum: readonly ["missing_deadline", "invalid_deadline", "missing_title", "missing_target_strategy", "missing_target_strategy_members", "missing_reviewer_strategy", "missing_questions", "missing_potential_reviewers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["invalid_deadline", "missing_questions"];
                };
                readonly archived: {
                    readonly type: "boolean";
                    readonly description: "Whether the review process is archived or not";
                };
                readonly agreements_configuration: {
                    readonly type: "object";
                    readonly description: "Configuration of the action plans feature";
                    readonly additionalProperties: true;
                };
                readonly employee_score_configuration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly last_bulk_reminder: {
                    readonly type: "string";
                    readonly description: "Date when the last bulk reminder was sent";
                    readonly examples: readonly ["2024-03-01T00:00:00Z"];
                };
                readonly cycle_id: {
                    readonly type: "string";
                    readonly description: "Performance cycle ID";
                    readonly examples: readonly ["5"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewProcessesDuplicate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "author_access_id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Review process ID to duplicate";
                readonly examples: readonly [1];
            };
            readonly author_access_id: {
                readonly type: "integer";
                readonly description: "Access ID to be set as author of the new review process";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "status", "start_validation_errors", "archived", "agreements_configuration", "employee_score_configuration"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Review process name";
                    readonly examples: readonly ["Performance Review - Q1 2024"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A brief description of the review process";
                    readonly examples: readonly ["The performance review for the first quarter of 2024 has started!"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Review process status\n\n`draft` `scheduled` `active` `finished`";
                    readonly enum: readonly ["draft", "scheduled", "active", "finished"];
                    readonly examples: readonly ["draft"];
                };
                readonly target_strategy: {
                    readonly type: "object";
                    readonly description: "Condition that defines the employees that will be evaluated (participants). Calculated when the review process starts";
                    readonly examples: readonly ["all_employees"];
                    readonly additionalProperties: true;
                };
                readonly reviewer_strategies: {
                    readonly type: "array";
                    readonly description: "Review types that will be assigned to the review process. It'll be used to create the evaluations when the process starts\n\n`self` `manager` `direct_reports` `peers`";
                    readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["self", "manager"];
                };
                readonly starts_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should start";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly ends_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should end";
                    readonly examples: readonly ["2024-04-01T00:00:00Z"];
                };
                readonly start_validation_errors: {
                    readonly type: "array";
                    readonly description: "Missing or invalid information to be able to start the review process\n\n`missing_deadline` `invalid_deadline` `missing_title` `missing_target_strategy` `missing_target_strategy_members` `missing_reviewer_strategy` `missing_questions` `missing_potential_reviewers`";
                    readonly enum: readonly ["missing_deadline", "invalid_deadline", "missing_title", "missing_target_strategy", "missing_target_strategy_members", "missing_reviewer_strategy", "missing_questions", "missing_potential_reviewers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["invalid_deadline", "missing_questions"];
                };
                readonly archived: {
                    readonly type: "boolean";
                    readonly description: "Whether the review process is archived or not";
                };
                readonly agreements_configuration: {
                    readonly type: "object";
                    readonly description: "Configuration of the action plans feature";
                    readonly additionalProperties: true;
                };
                readonly employee_score_configuration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly last_bulk_reminder: {
                    readonly type: "string";
                    readonly description: "Date when the last bulk reminder was sent";
                    readonly examples: readonly ["2024-03-01T00:00:00Z"];
                };
                readonly cycle_id: {
                    readonly type: "string";
                    readonly description: "Performance cycle ID";
                    readonly examples: readonly ["5"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewProcessesRemindInBulk: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Review process ID";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "status", "start_validation_errors", "archived", "agreements_configuration", "employee_score_configuration"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Review process name";
                    readonly examples: readonly ["Performance Review - Q1 2024"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A brief description of the review process";
                    readonly examples: readonly ["The performance review for the first quarter of 2024 has started!"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Review process status\n\n`draft` `scheduled` `active` `finished`";
                    readonly enum: readonly ["draft", "scheduled", "active", "finished"];
                    readonly examples: readonly ["draft"];
                };
                readonly target_strategy: {
                    readonly type: "object";
                    readonly description: "Condition that defines the employees that will be evaluated (participants). Calculated when the review process starts";
                    readonly examples: readonly ["all_employees"];
                    readonly additionalProperties: true;
                };
                readonly reviewer_strategies: {
                    readonly type: "array";
                    readonly description: "Review types that will be assigned to the review process. It'll be used to create the evaluations when the process starts\n\n`self` `manager` `direct_reports` `peers`";
                    readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["self", "manager"];
                };
                readonly starts_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should start";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly ends_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should end";
                    readonly examples: readonly ["2024-04-01T00:00:00Z"];
                };
                readonly start_validation_errors: {
                    readonly type: "array";
                    readonly description: "Missing or invalid information to be able to start the review process\n\n`missing_deadline` `invalid_deadline` `missing_title` `missing_target_strategy` `missing_target_strategy_members` `missing_reviewer_strategy` `missing_questions` `missing_potential_reviewers`";
                    readonly enum: readonly ["missing_deadline", "invalid_deadline", "missing_title", "missing_target_strategy", "missing_target_strategy_members", "missing_reviewer_strategy", "missing_questions", "missing_potential_reviewers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["invalid_deadline", "missing_questions"];
                };
                readonly archived: {
                    readonly type: "boolean";
                    readonly description: "Whether the review process is archived or not";
                };
                readonly agreements_configuration: {
                    readonly type: "object";
                    readonly description: "Configuration of the action plans feature";
                    readonly additionalProperties: true;
                };
                readonly employee_score_configuration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly last_bulk_reminder: {
                    readonly type: "string";
                    readonly description: "Date when the last bulk reminder was sent";
                    readonly examples: readonly ["2024-03-01T00:00:00Z"];
                };
                readonly cycle_id: {
                    readonly type: "string";
                    readonly description: "Performance cycle ID";
                    readonly examples: readonly ["5"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewProcessesReopen: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "ends_at"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Review process ID";
                readonly examples: readonly [1];
            };
            readonly ends_at: {
                readonly type: "string";
                readonly description: "New deadline of the review process";
                readonly examples: readonly ["2024-04-01T00:00:00Z"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "status", "start_validation_errors", "archived", "agreements_configuration", "employee_score_configuration"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Review process name";
                    readonly examples: readonly ["Performance Review - Q1 2024"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A brief description of the review process";
                    readonly examples: readonly ["The performance review for the first quarter of 2024 has started!"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Review process status\n\n`draft` `scheduled` `active` `finished`";
                    readonly enum: readonly ["draft", "scheduled", "active", "finished"];
                    readonly examples: readonly ["draft"];
                };
                readonly target_strategy: {
                    readonly type: "object";
                    readonly description: "Condition that defines the employees that will be evaluated (participants). Calculated when the review process starts";
                    readonly examples: readonly ["all_employees"];
                    readonly additionalProperties: true;
                };
                readonly reviewer_strategies: {
                    readonly type: "array";
                    readonly description: "Review types that will be assigned to the review process. It'll be used to create the evaluations when the process starts\n\n`self` `manager` `direct_reports` `peers`";
                    readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["self", "manager"];
                };
                readonly starts_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should start";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly ends_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should end";
                    readonly examples: readonly ["2024-04-01T00:00:00Z"];
                };
                readonly start_validation_errors: {
                    readonly type: "array";
                    readonly description: "Missing or invalid information to be able to start the review process\n\n`missing_deadline` `invalid_deadline` `missing_title` `missing_target_strategy` `missing_target_strategy_members` `missing_reviewer_strategy` `missing_questions` `missing_potential_reviewers`";
                    readonly enum: readonly ["missing_deadline", "invalid_deadline", "missing_title", "missing_target_strategy", "missing_target_strategy_members", "missing_reviewer_strategy", "missing_questions", "missing_potential_reviewers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["invalid_deadline", "missing_questions"];
                };
                readonly archived: {
                    readonly type: "boolean";
                    readonly description: "Whether the review process is archived or not";
                };
                readonly agreements_configuration: {
                    readonly type: "object";
                    readonly description: "Configuration of the action plans feature";
                    readonly additionalProperties: true;
                };
                readonly employee_score_configuration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly last_bulk_reminder: {
                    readonly type: "string";
                    readonly description: "Date when the last bulk reminder was sent";
                    readonly examples: readonly ["2024-03-01T00:00:00Z"];
                };
                readonly cycle_id: {
                    readonly type: "string";
                    readonly description: "Performance cycle ID";
                    readonly examples: readonly ["5"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewProcessesStart: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Review process ID";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "status", "start_validation_errors", "archived", "agreements_configuration", "employee_score_configuration"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Review process name";
                    readonly examples: readonly ["Performance Review - Q1 2024"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A brief description of the review process";
                    readonly examples: readonly ["The performance review for the first quarter of 2024 has started!"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Review process status\n\n`draft` `scheduled` `active` `finished`";
                    readonly enum: readonly ["draft", "scheduled", "active", "finished"];
                    readonly examples: readonly ["draft"];
                };
                readonly target_strategy: {
                    readonly type: "object";
                    readonly description: "Condition that defines the employees that will be evaluated (participants). Calculated when the review process starts";
                    readonly examples: readonly ["all_employees"];
                    readonly additionalProperties: true;
                };
                readonly reviewer_strategies: {
                    readonly type: "array";
                    readonly description: "Review types that will be assigned to the review process. It'll be used to create the evaluations when the process starts\n\n`self` `manager` `direct_reports` `peers`";
                    readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["self", "manager"];
                };
                readonly starts_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should start";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly ends_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should end";
                    readonly examples: readonly ["2024-04-01T00:00:00Z"];
                };
                readonly start_validation_errors: {
                    readonly type: "array";
                    readonly description: "Missing or invalid information to be able to start the review process\n\n`missing_deadline` `invalid_deadline` `missing_title` `missing_target_strategy` `missing_target_strategy_members` `missing_reviewer_strategy` `missing_questions` `missing_potential_reviewers`";
                    readonly enum: readonly ["missing_deadline", "invalid_deadline", "missing_title", "missing_target_strategy", "missing_target_strategy_members", "missing_reviewer_strategy", "missing_questions", "missing_potential_reviewers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["invalid_deadline", "missing_questions"];
                };
                readonly archived: {
                    readonly type: "boolean";
                    readonly description: "Whether the review process is archived or not";
                };
                readonly agreements_configuration: {
                    readonly type: "object";
                    readonly description: "Configuration of the action plans feature";
                    readonly additionalProperties: true;
                };
                readonly employee_score_configuration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly last_bulk_reminder: {
                    readonly type: "string";
                    readonly description: "Date when the last bulk reminder was sent";
                    readonly examples: readonly ["2024-03-01T00:00:00Z"];
                };
                readonly cycle_id: {
                    readonly type: "string";
                    readonly description: "Performance cycle ID";
                    readonly examples: readonly ["5"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewProcessesStop: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Review process ID";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "status", "start_validation_errors", "archived", "agreements_configuration", "employee_score_configuration"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Review process name";
                    readonly examples: readonly ["Performance Review - Q1 2024"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A brief description of the review process";
                    readonly examples: readonly ["The performance review for the first quarter of 2024 has started!"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Review process status\n\n`draft` `scheduled` `active` `finished`";
                    readonly enum: readonly ["draft", "scheduled", "active", "finished"];
                    readonly examples: readonly ["draft"];
                };
                readonly target_strategy: {
                    readonly type: "object";
                    readonly description: "Condition that defines the employees that will be evaluated (participants). Calculated when the review process starts";
                    readonly examples: readonly ["all_employees"];
                    readonly additionalProperties: true;
                };
                readonly reviewer_strategies: {
                    readonly type: "array";
                    readonly description: "Review types that will be assigned to the review process. It'll be used to create the evaluations when the process starts\n\n`self` `manager` `direct_reports` `peers`";
                    readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["self", "manager"];
                };
                readonly starts_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should start";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly ends_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should end";
                    readonly examples: readonly ["2024-04-01T00:00:00Z"];
                };
                readonly start_validation_errors: {
                    readonly type: "array";
                    readonly description: "Missing or invalid information to be able to start the review process\n\n`missing_deadline` `invalid_deadline` `missing_title` `missing_target_strategy` `missing_target_strategy_members` `missing_reviewer_strategy` `missing_questions` `missing_potential_reviewers`";
                    readonly enum: readonly ["missing_deadline", "invalid_deadline", "missing_title", "missing_target_strategy", "missing_target_strategy_members", "missing_reviewer_strategy", "missing_questions", "missing_potential_reviewers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["invalid_deadline", "missing_questions"];
                };
                readonly archived: {
                    readonly type: "boolean";
                    readonly description: "Whether the review process is archived or not";
                };
                readonly agreements_configuration: {
                    readonly type: "object";
                    readonly description: "Configuration of the action plans feature";
                    readonly additionalProperties: true;
                };
                readonly employee_score_configuration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly last_bulk_reminder: {
                    readonly type: "string";
                    readonly description: "Date when the last bulk reminder was sent";
                    readonly examples: readonly ["2024-03-01T00:00:00Z"];
                };
                readonly cycle_id: {
                    readonly type: "string";
                    readonly description: "Performance cycle ID";
                    readonly examples: readonly ["5"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewProcessesToggleArchive: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Review process ID";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "status", "start_validation_errors", "archived", "agreements_configuration", "employee_score_configuration"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Review process name";
                    readonly examples: readonly ["Performance Review - Q1 2024"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A brief description of the review process";
                    readonly examples: readonly ["The performance review for the first quarter of 2024 has started!"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Review process status\n\n`draft` `scheduled` `active` `finished`";
                    readonly enum: readonly ["draft", "scheduled", "active", "finished"];
                    readonly examples: readonly ["draft"];
                };
                readonly target_strategy: {
                    readonly type: "object";
                    readonly description: "Condition that defines the employees that will be evaluated (participants). Calculated when the review process starts";
                    readonly examples: readonly ["all_employees"];
                    readonly additionalProperties: true;
                };
                readonly reviewer_strategies: {
                    readonly type: "array";
                    readonly description: "Review types that will be assigned to the review process. It'll be used to create the evaluations when the process starts\n\n`self` `manager` `direct_reports` `peers`";
                    readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["self", "manager"];
                };
                readonly starts_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should start";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly ends_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should end";
                    readonly examples: readonly ["2024-04-01T00:00:00Z"];
                };
                readonly start_validation_errors: {
                    readonly type: "array";
                    readonly description: "Missing or invalid information to be able to start the review process\n\n`missing_deadline` `invalid_deadline` `missing_title` `missing_target_strategy` `missing_target_strategy_members` `missing_reviewer_strategy` `missing_questions` `missing_potential_reviewers`";
                    readonly enum: readonly ["missing_deadline", "invalid_deadline", "missing_title", "missing_target_strategy", "missing_target_strategy_members", "missing_reviewer_strategy", "missing_questions", "missing_potential_reviewers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["invalid_deadline", "missing_questions"];
                };
                readonly archived: {
                    readonly type: "boolean";
                    readonly description: "Whether the review process is archived or not";
                };
                readonly agreements_configuration: {
                    readonly type: "object";
                    readonly description: "Configuration of the action plans feature";
                    readonly additionalProperties: true;
                };
                readonly employee_score_configuration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly last_bulk_reminder: {
                    readonly type: "string";
                    readonly description: "Date when the last bulk reminder was sent";
                    readonly examples: readonly ["2024-03-01T00:00:00Z"];
                };
                readonly cycle_id: {
                    readonly type: "string";
                    readonly description: "Performance cycle ID";
                    readonly examples: readonly ["5"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewProcessesUpdateAgreementsConfiguration: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "enabled"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Review process ID";
                readonly examples: readonly [1];
            };
            readonly enabled: {
                readonly type: "boolean";
                readonly description: "Flag to enable or disable action plans in a review process";
                readonly examples: readonly [true];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "status", "start_validation_errors", "archived", "agreements_configuration", "employee_score_configuration"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Review process name";
                    readonly examples: readonly ["Performance Review - Q1 2024"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A brief description of the review process";
                    readonly examples: readonly ["The performance review for the first quarter of 2024 has started!"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Review process status\n\n`draft` `scheduled` `active` `finished`";
                    readonly enum: readonly ["draft", "scheduled", "active", "finished"];
                    readonly examples: readonly ["draft"];
                };
                readonly target_strategy: {
                    readonly type: "object";
                    readonly description: "Condition that defines the employees that will be evaluated (participants). Calculated when the review process starts";
                    readonly examples: readonly ["all_employees"];
                    readonly additionalProperties: true;
                };
                readonly reviewer_strategies: {
                    readonly type: "array";
                    readonly description: "Review types that will be assigned to the review process. It'll be used to create the evaluations when the process starts\n\n`self` `manager` `direct_reports` `peers`";
                    readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["self", "manager"];
                };
                readonly starts_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should start";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly ends_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should end";
                    readonly examples: readonly ["2024-04-01T00:00:00Z"];
                };
                readonly start_validation_errors: {
                    readonly type: "array";
                    readonly description: "Missing or invalid information to be able to start the review process\n\n`missing_deadline` `invalid_deadline` `missing_title` `missing_target_strategy` `missing_target_strategy_members` `missing_reviewer_strategy` `missing_questions` `missing_potential_reviewers`";
                    readonly enum: readonly ["missing_deadline", "invalid_deadline", "missing_title", "missing_target_strategy", "missing_target_strategy_members", "missing_reviewer_strategy", "missing_questions", "missing_potential_reviewers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["invalid_deadline", "missing_questions"];
                };
                readonly archived: {
                    readonly type: "boolean";
                    readonly description: "Whether the review process is archived or not";
                };
                readonly agreements_configuration: {
                    readonly type: "object";
                    readonly description: "Configuration of the action plans feature";
                    readonly additionalProperties: true;
                };
                readonly employee_score_configuration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly last_bulk_reminder: {
                    readonly type: "string";
                    readonly description: "Date when the last bulk reminder was sent";
                    readonly examples: readonly ["2024-03-01T00:00:00Z"];
                };
                readonly cycle_id: {
                    readonly type: "string";
                    readonly description: "Performance cycle ID";
                    readonly examples: readonly ["5"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewProcessesUpdateBasicInfo: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Review process ID";
                readonly examples: readonly [1];
            };
            readonly name: {
                readonly type: "string";
                readonly description: "New name of the review process";
                readonly examples: readonly ["Performance Review - Q2 2024"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "New description of the review process";
                readonly examples: readonly ["The performance review for the first quarter of 2024 has started!"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "status", "start_validation_errors", "archived", "agreements_configuration", "employee_score_configuration"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Review process name";
                    readonly examples: readonly ["Performance Review - Q1 2024"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A brief description of the review process";
                    readonly examples: readonly ["The performance review for the first quarter of 2024 has started!"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Review process status\n\n`draft` `scheduled` `active` `finished`";
                    readonly enum: readonly ["draft", "scheduled", "active", "finished"];
                    readonly examples: readonly ["draft"];
                };
                readonly target_strategy: {
                    readonly type: "object";
                    readonly description: "Condition that defines the employees that will be evaluated (participants). Calculated when the review process starts";
                    readonly examples: readonly ["all_employees"];
                    readonly additionalProperties: true;
                };
                readonly reviewer_strategies: {
                    readonly type: "array";
                    readonly description: "Review types that will be assigned to the review process. It'll be used to create the evaluations when the process starts\n\n`self` `manager` `direct_reports` `peers`";
                    readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["self", "manager"];
                };
                readonly starts_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should start";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly ends_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should end";
                    readonly examples: readonly ["2024-04-01T00:00:00Z"];
                };
                readonly start_validation_errors: {
                    readonly type: "array";
                    readonly description: "Missing or invalid information to be able to start the review process\n\n`missing_deadline` `invalid_deadline` `missing_title` `missing_target_strategy` `missing_target_strategy_members` `missing_reviewer_strategy` `missing_questions` `missing_potential_reviewers`";
                    readonly enum: readonly ["missing_deadline", "invalid_deadline", "missing_title", "missing_target_strategy", "missing_target_strategy_members", "missing_reviewer_strategy", "missing_questions", "missing_potential_reviewers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["invalid_deadline", "missing_questions"];
                };
                readonly archived: {
                    readonly type: "boolean";
                    readonly description: "Whether the review process is archived or not";
                };
                readonly agreements_configuration: {
                    readonly type: "object";
                    readonly description: "Configuration of the action plans feature";
                    readonly additionalProperties: true;
                };
                readonly employee_score_configuration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly last_bulk_reminder: {
                    readonly type: "string";
                    readonly description: "Date when the last bulk reminder was sent";
                    readonly examples: readonly ["2024-03-01T00:00:00Z"];
                };
                readonly cycle_id: {
                    readonly type: "string";
                    readonly description: "Performance cycle ID";
                    readonly examples: readonly ["5"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewProcessesUpdateDeadline: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "ends_at"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Review process ID";
                readonly examples: readonly [1];
            };
            readonly ends_at: {
                readonly type: "string";
                readonly description: "New deadline of the review process";
                readonly examples: readonly ["2024-04-01T00:00:00Z"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "status", "start_validation_errors", "archived", "agreements_configuration", "employee_score_configuration"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Review process name";
                    readonly examples: readonly ["Performance Review - Q1 2024"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A brief description of the review process";
                    readonly examples: readonly ["The performance review for the first quarter of 2024 has started!"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Review process status\n\n`draft` `scheduled` `active` `finished`";
                    readonly enum: readonly ["draft", "scheduled", "active", "finished"];
                    readonly examples: readonly ["draft"];
                };
                readonly target_strategy: {
                    readonly type: "object";
                    readonly description: "Condition that defines the employees that will be evaluated (participants). Calculated when the review process starts";
                    readonly examples: readonly ["all_employees"];
                    readonly additionalProperties: true;
                };
                readonly reviewer_strategies: {
                    readonly type: "array";
                    readonly description: "Review types that will be assigned to the review process. It'll be used to create the evaluations when the process starts\n\n`self` `manager` `direct_reports` `peers`";
                    readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["self", "manager"];
                };
                readonly starts_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should start";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly ends_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should end";
                    readonly examples: readonly ["2024-04-01T00:00:00Z"];
                };
                readonly start_validation_errors: {
                    readonly type: "array";
                    readonly description: "Missing or invalid information to be able to start the review process\n\n`missing_deadline` `invalid_deadline` `missing_title` `missing_target_strategy` `missing_target_strategy_members` `missing_reviewer_strategy` `missing_questions` `missing_potential_reviewers`";
                    readonly enum: readonly ["missing_deadline", "invalid_deadline", "missing_title", "missing_target_strategy", "missing_target_strategy_members", "missing_reviewer_strategy", "missing_questions", "missing_potential_reviewers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["invalid_deadline", "missing_questions"];
                };
                readonly archived: {
                    readonly type: "boolean";
                    readonly description: "Whether the review process is archived or not";
                };
                readonly agreements_configuration: {
                    readonly type: "object";
                    readonly description: "Configuration of the action plans feature";
                    readonly additionalProperties: true;
                };
                readonly employee_score_configuration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly last_bulk_reminder: {
                    readonly type: "string";
                    readonly description: "Date when the last bulk reminder was sent";
                    readonly examples: readonly ["2024-03-01T00:00:00Z"];
                };
                readonly cycle_id: {
                    readonly type: "string";
                    readonly description: "Performance cycle ID";
                    readonly examples: readonly ["5"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewProcessesUpdateReviewerStrategies: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "reviewer_strategies"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Review process ID";
                readonly examples: readonly [1];
            };
            readonly reviewer_strategies: {
                readonly type: "array";
                readonly description: "New review types to be applied";
                readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                readonly items: {
                    readonly type: "string";
                };
                readonly examples: readonly ["self", "manager"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "status", "start_validation_errors", "archived", "agreements_configuration", "employee_score_configuration"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Review process name";
                    readonly examples: readonly ["Performance Review - Q1 2024"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A brief description of the review process";
                    readonly examples: readonly ["The performance review for the first quarter of 2024 has started!"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Review process status\n\n`draft` `scheduled` `active` `finished`";
                    readonly enum: readonly ["draft", "scheduled", "active", "finished"];
                    readonly examples: readonly ["draft"];
                };
                readonly target_strategy: {
                    readonly type: "object";
                    readonly description: "Condition that defines the employees that will be evaluated (participants). Calculated when the review process starts";
                    readonly examples: readonly ["all_employees"];
                    readonly additionalProperties: true;
                };
                readonly reviewer_strategies: {
                    readonly type: "array";
                    readonly description: "Review types that will be assigned to the review process. It'll be used to create the evaluations when the process starts\n\n`self` `manager` `direct_reports` `peers`";
                    readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["self", "manager"];
                };
                readonly starts_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should start";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly ends_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should end";
                    readonly examples: readonly ["2024-04-01T00:00:00Z"];
                };
                readonly start_validation_errors: {
                    readonly type: "array";
                    readonly description: "Missing or invalid information to be able to start the review process\n\n`missing_deadline` `invalid_deadline` `missing_title` `missing_target_strategy` `missing_target_strategy_members` `missing_reviewer_strategy` `missing_questions` `missing_potential_reviewers`";
                    readonly enum: readonly ["missing_deadline", "invalid_deadline", "missing_title", "missing_target_strategy", "missing_target_strategy_members", "missing_reviewer_strategy", "missing_questions", "missing_potential_reviewers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["invalid_deadline", "missing_questions"];
                };
                readonly archived: {
                    readonly type: "boolean";
                    readonly description: "Whether the review process is archived or not";
                };
                readonly agreements_configuration: {
                    readonly type: "object";
                    readonly description: "Configuration of the action plans feature";
                    readonly additionalProperties: true;
                };
                readonly employee_score_configuration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly last_bulk_reminder: {
                    readonly type: "string";
                    readonly description: "Date when the last bulk reminder was sent";
                    readonly examples: readonly ["2024-03-01T00:00:00Z"];
                };
                readonly cycle_id: {
                    readonly type: "string";
                    readonly description: "Performance cycle ID";
                    readonly examples: readonly ["5"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewProcessesUpdateSchedule: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "starts_at"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Review process ID";
                readonly examples: readonly [1];
            };
            readonly starts_at: {
                readonly type: "string";
                readonly description: "Date when the review process should start";
                readonly examples: readonly ["2024-01-01T00:00:00Z"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "status", "start_validation_errors", "archived", "agreements_configuration", "employee_score_configuration"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Review process name";
                    readonly examples: readonly ["Performance Review - Q1 2024"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A brief description of the review process";
                    readonly examples: readonly ["The performance review for the first quarter of 2024 has started!"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Review process status\n\n`draft` `scheduled` `active` `finished`";
                    readonly enum: readonly ["draft", "scheduled", "active", "finished"];
                    readonly examples: readonly ["draft"];
                };
                readonly target_strategy: {
                    readonly type: "object";
                    readonly description: "Condition that defines the employees that will be evaluated (participants). Calculated when the review process starts";
                    readonly examples: readonly ["all_employees"];
                    readonly additionalProperties: true;
                };
                readonly reviewer_strategies: {
                    readonly type: "array";
                    readonly description: "Review types that will be assigned to the review process. It'll be used to create the evaluations when the process starts\n\n`self` `manager` `direct_reports` `peers`";
                    readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["self", "manager"];
                };
                readonly starts_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should start";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly ends_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should end";
                    readonly examples: readonly ["2024-04-01T00:00:00Z"];
                };
                readonly start_validation_errors: {
                    readonly type: "array";
                    readonly description: "Missing or invalid information to be able to start the review process\n\n`missing_deadline` `invalid_deadline` `missing_title` `missing_target_strategy` `missing_target_strategy_members` `missing_reviewer_strategy` `missing_questions` `missing_potential_reviewers`";
                    readonly enum: readonly ["missing_deadline", "invalid_deadline", "missing_title", "missing_target_strategy", "missing_target_strategy_members", "missing_reviewer_strategy", "missing_questions", "missing_potential_reviewers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["invalid_deadline", "missing_questions"];
                };
                readonly archived: {
                    readonly type: "boolean";
                    readonly description: "Whether the review process is archived or not";
                };
                readonly agreements_configuration: {
                    readonly type: "object";
                    readonly description: "Configuration of the action plans feature";
                    readonly additionalProperties: true;
                };
                readonly employee_score_configuration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly last_bulk_reminder: {
                    readonly type: "string";
                    readonly description: "Date when the last bulk reminder was sent";
                    readonly examples: readonly ["2024-03-01T00:00:00Z"];
                };
                readonly cycle_id: {
                    readonly type: "string";
                    readonly description: "Performance cycle ID";
                    readonly examples: readonly ["5"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewProcessesUpdateTargetStrategy: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Review process ID";
                readonly examples: readonly [1];
            };
            readonly target_strategy: {
                readonly type: "string";
                readonly description: "Condition that defines the employees that will be evaluated (participants)";
                readonly enum: readonly ["all_employees", "by_locations", "by_teams", "manual_selection"];
                readonly examples: readonly ["all_employees"];
            };
            readonly arguments: {
                readonly type: "array";
                readonly description: "IDs of target strategy groups selected";
                readonly items: {
                    readonly type: "integer";
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "status", "start_validation_errors", "archived", "agreements_configuration", "employee_score_configuration"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Review process name";
                    readonly examples: readonly ["Performance Review - Q1 2024"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A brief description of the review process";
                    readonly examples: readonly ["The performance review for the first quarter of 2024 has started!"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Review process status\n\n`draft` `scheduled` `active` `finished`";
                    readonly enum: readonly ["draft", "scheduled", "active", "finished"];
                    readonly examples: readonly ["draft"];
                };
                readonly target_strategy: {
                    readonly type: "object";
                    readonly description: "Condition that defines the employees that will be evaluated (participants). Calculated when the review process starts";
                    readonly examples: readonly ["all_employees"];
                    readonly additionalProperties: true;
                };
                readonly reviewer_strategies: {
                    readonly type: "array";
                    readonly description: "Review types that will be assigned to the review process. It'll be used to create the evaluations when the process starts\n\n`self` `manager` `direct_reports` `peers`";
                    readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["self", "manager"];
                };
                readonly starts_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should start";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly ends_at: {
                    readonly type: "string";
                    readonly description: "Date when the review process should end";
                    readonly examples: readonly ["2024-04-01T00:00:00Z"];
                };
                readonly start_validation_errors: {
                    readonly type: "array";
                    readonly description: "Missing or invalid information to be able to start the review process\n\n`missing_deadline` `invalid_deadline` `missing_title` `missing_target_strategy` `missing_target_strategy_members` `missing_reviewer_strategy` `missing_questions` `missing_potential_reviewers`";
                    readonly enum: readonly ["missing_deadline", "invalid_deadline", "missing_title", "missing_target_strategy", "missing_target_strategy_members", "missing_reviewer_strategy", "missing_questions", "missing_potential_reviewers"];
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["invalid_deadline", "missing_questions"];
                };
                readonly archived: {
                    readonly type: "boolean";
                    readonly description: "Whether the review process is archived or not";
                };
                readonly agreements_configuration: {
                    readonly type: "object";
                    readonly description: "Configuration of the action plans feature";
                    readonly additionalProperties: true;
                };
                readonly employee_score_configuration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly last_bulk_reminder: {
                    readonly type: "string";
                    readonly description: "Date when the last bulk reminder was sent";
                    readonly examples: readonly ["2024-03-01T00:00:00Z"];
                };
                readonly cycle_id: {
                    readonly type: "string";
                    readonly description: "Performance cycle ID";
                    readonly examples: readonly ["5"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewQuestionnaireByStrategiesUpdateDefaultRatingScale: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["performance_review_process_id", "default_rating_scale"];
        readonly properties: {
            readonly performance_review_process_id: {
                readonly type: "integer";
                readonly description: "Review process ID";
                readonly examples: readonly [1];
            };
            readonly default_rating_scale: {
                readonly type: "array";
                readonly description: "###### **What should each range object look like?**\n\n  - `value`: Range value (0 to 10)\n  - `text`: Range description";
                readonly items: {};
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "performance_review_process_id", "default_rating_scale"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly performance_review_process_id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly default_rating_scale: {
                    readonly type: "array";
                    readonly description: "Scoring range used in rating questions";
                    readonly items: {};
                };
                readonly self_questionnaire: {
                    readonly type: "object";
                    readonly description: "Questionnaire for self evaluation";
                    readonly additionalProperties: true;
                };
                readonly manager_questionnaire: {
                    readonly type: "object";
                    readonly description: "Questionnaire for manager evaluation";
                    readonly additionalProperties: true;
                };
                readonly direct_report_questionnaire: {
                    readonly type: "object";
                    readonly description: "Questionnaire for direct report evaluation";
                    readonly additionalProperties: true;
                };
                readonly peers_questionnaire: {
                    readonly type: "object";
                    readonly description: "Questionnaire for peers evaluation";
                    readonly additionalProperties: true;
                };
                readonly employee_score_self_questionnaire: {
                    readonly type: "object";
                    readonly description: "Questionnaire included in the end of self evaluation to evaluate the employee performance";
                    readonly additionalProperties: true;
                };
                readonly employee_score_manager_questionnaire: {
                    readonly type: "object";
                    readonly description: "Questionnaire included in the end of manager evaluation to evaluate the employee performance";
                    readonly additionalProperties: true;
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPerformanceReviewQuestionnaireByStrategiesUpdateQuestionnaireForStrategy: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["performance_review_process_id", "strategy", "questionnaire_content"];
        readonly properties: {
            readonly performance_review_process_id: {
                readonly type: "integer";
                readonly description: "Review process ID";
                readonly examples: readonly [1];
            };
            readonly strategy: {
                readonly type: "string";
                readonly description: "Reviewer strategy to update the questionnaire for";
                readonly enum: readonly ["self", "manager", "direct_reports", "peers"];
                readonly examples: readonly ["manager"];
            };
            readonly questionnaire_content: {
                readonly type: "array";
                readonly description: "List of grouped questions to be evaluated by the reviewer.\n###### **What should each group object look like?**\n\n  - `uuid`: Unique identifier for the group\n  - `type`: Group type (`section` or `question`). If it's `section`, the questions will be grouped under a section with a given title\n  - `section_title`: Title of the section (optional)\n  - `questions`: List of questions\n\n###### **What should each question object look like?**\n\n  - `uuid`: Unique identifier for the question\n  - `mandatory`: Whether the question is mandatory or not\n  - `with_comment`: Whether the reviewer can add a comment or not\n  - `title`: Question\n  - `answer_type`: Answer type (`text`, `rating`, `number` or `multiple_choice`)\n  - `max_choices`: Maximum number of choices. If `1`, it'll be a single choice question\n  - `choice_options`: List of options for single and multiple choice questions";
                readonly items: {};
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "performance_review_process_id", "default_rating_scale"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly performance_review_process_id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly default_rating_scale: {
                    readonly type: "array";
                    readonly description: "Scoring range used in rating questions";
                    readonly items: {};
                };
                readonly self_questionnaire: {
                    readonly type: "object";
                    readonly description: "Questionnaire for self evaluation";
                    readonly additionalProperties: true;
                };
                readonly manager_questionnaire: {
                    readonly type: "object";
                    readonly description: "Questionnaire for manager evaluation";
                    readonly additionalProperties: true;
                };
                readonly direct_report_questionnaire: {
                    readonly type: "object";
                    readonly description: "Questionnaire for direct report evaluation";
                    readonly additionalProperties: true;
                };
                readonly peers_questionnaire: {
                    readonly type: "object";
                    readonly description: "Questionnaire for peers evaluation";
                    readonly additionalProperties: true;
                };
                readonly employee_score_self_questionnaire: {
                    readonly type: "object";
                    readonly description: "Questionnaire included in the end of self evaluation to evaluate the employee performance";
                    readonly additionalProperties: true;
                };
                readonly employee_score_manager_questionnaire: {
                    readonly type: "object";
                    readonly description: "Questionnaire included in the end of manager evaluation to evaluate the employee performance";
                    readonly additionalProperties: true;
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPostsComments: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["post_id", "text"];
        readonly properties: {
            readonly post_id: {
                readonly type: "integer";
                readonly description: "identifier of the post";
                readonly examples: readonly [1];
            };
            readonly text: {
                readonly type: "string";
                readonly description: "Text of the comment";
                readonly examples: readonly ["How is the week going Ana?"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "post_id", "author_id", "text", "created_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the comment";
                    readonly examples: readonly [1];
                };
                readonly post_id: {
                    readonly type: "integer";
                    readonly description: "identifier of the post";
                    readonly examples: readonly [1];
                };
                readonly author_id: {
                    readonly type: "integer";
                    readonly description: "author identifier refers to the employee access, you can get the employee from the employee endpoint";
                    readonly examples: readonly [1];
                };
                readonly text: {
                    readonly type: "string";
                    readonly description: "text of the comment";
                    readonly examples: readonly ["How is the week going Ana?"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "date of the comment";
                    readonly examples: readonly ["2024-07-17T00:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPostsGroups: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["title", "description", "company_id"];
        readonly properties: {
            readonly title: {
                readonly type: "string";
                readonly description: "title of the group.";
                readonly examples: readonly ["Company announcements"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "description of the group.";
                readonly examples: readonly ["The place to find all company announcements."];
            };
            readonly company_id: {
                readonly type: "integer";
                readonly description: "Identifier of the company, this value can be retrieved from core/me endpoint";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "title"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the group.";
                    readonly examples: readonly [1];
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "title of the group.";
                    readonly examples: readonly ["Company announcements"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "description of the group.";
                    readonly examples: readonly ["The place to find all company announcements."];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPostsGroupsArchive: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "identifier of the group.";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "title"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the group.";
                    readonly examples: readonly [1];
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "title of the group.";
                    readonly examples: readonly ["Company announcements"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "description of the group.";
                    readonly examples: readonly ["The place to find all company announcements."];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesPostsPosts: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["title", "description", "post_group_id"];
        readonly properties: {
            readonly title: {
                readonly type: "string";
                readonly description: "title of the post";
                readonly examples: readonly ["Are you ready for the perfomance review?"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "description of the post";
                readonly examples: readonly ["As you know today we start the performance review process."];
            };
            readonly post_group_id: {
                readonly type: "integer";
                readonly description: "group identifier of the post, references to posts/groups endpoint";
                readonly examples: readonly [1];
            };
            readonly allow_comments_and_reactions: {
                readonly type: "boolean";
                readonly description: "allow comments and reactions on the post";
                readonly examples: readonly [true];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "allow_comments_and_reactions", "published_at", "created_at", "updated_at", "visits_count", "comments_count"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifiers of the post";
                    readonly examples: readonly [1];
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "title of the post";
                    readonly examples: readonly ["Are you ready for the perfomance review?"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "description of the post";
                    readonly examples: readonly ["As you know today we start the performance review process."];
                };
                readonly allow_comments_and_reactions: {
                    readonly type: "boolean";
                    readonly description: "allow comments and reactions on the post";
                    readonly examples: readonly [true];
                };
                readonly published_at: {
                    readonly type: "string";
                    readonly description: "date when the post has been published";
                    readonly examples: readonly ["2024-07-17T00:00:00Z"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "date when the post has been created";
                    readonly examples: readonly ["2024-07-17T00:00:00Z"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "date when the post has been updated";
                    readonly examples: readonly ["2024-07-17T00:00:00Z"];
                };
                readonly visits_count: {
                    readonly type: "integer";
                    readonly description: "number of visits of the post";
                    readonly examples: readonly [10];
                };
                readonly cover_image_url: {
                    readonly type: "string";
                    readonly description: "url of the cover image";
                    readonly examples: readonly ["https://example.com/image.jpg"];
                };
                readonly posts_group_id: {
                    readonly type: "integer";
                    readonly description: "group identifier of the post, references to posts/groups endpoint";
                    readonly examples: readonly [1];
                };
                readonly comments_count: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementFlexibleTimeRecordComments: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["content", "flexible_time_record_id"];
        readonly properties: {
            readonly content: {
                readonly type: "string";
            };
            readonly flexible_time_record_id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "content", "flexible_time_record_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly content: {
                    readonly type: "string";
                };
                readonly flexible_time_record_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementFlexibleTimeRecordCommentsDeleteByFlexibleTimeRecord: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["flexible_time_record_id"];
        readonly properties: {
            readonly flexible_time_record_id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "content", "flexible_time_record_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly content: {
                    readonly type: "string";
                };
                readonly flexible_time_record_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementFlexibleTimeRecordCommentsUpdateByFlexibleTimeRecord: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["flexible_time_record_id", "content"];
        readonly properties: {
            readonly flexible_time_record_id: {
                readonly type: "integer";
            };
            readonly content: {
                readonly type: "string";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "content", "flexible_time_record_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly content: {
                    readonly type: "string";
                };
                readonly flexible_time_record_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementFlexibleTimeRecords: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["project_worker_id", "date", "imputed_minutes"];
        readonly properties: {
            readonly project_worker_id: {
                readonly type: "integer";
            };
            readonly date: {
                readonly type: "string";
            };
            readonly imputed_minutes: {
                readonly type: "integer";
            };
            readonly subproject_id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "date", "imputed_minutes", "project_worker_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly date: {
                    readonly type: "string";
                };
                readonly imputed_minutes: {
                    readonly type: "integer";
                };
                readonly project_worker_id: {
                    readonly type: "integer";
                };
                readonly subproject_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementProjectTasks: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "project_id", "status"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly content: {
                readonly type: "string";
            };
            readonly starts_on: {
                readonly type: "string";
            };
            readonly follow_up: {
                readonly type: "boolean";
            };
            readonly due_on: {
                readonly type: "string";
            };
            readonly assignee_ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
            readonly project_id: {
                readonly type: "integer";
            };
            readonly subproject_id: {
                readonly type: "integer";
            };
            readonly files: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly format: "binary";
                };
            };
            readonly status: {
                readonly type: "string";
                readonly enum: readonly ["todo", "in_progress", "done", "discarded"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "project_id", "task_id", "follow_up"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly project_id: {
                    readonly type: "integer";
                };
                readonly subproject_id: {
                    readonly type: "integer";
                };
                readonly task_id: {
                    readonly type: "integer";
                };
                readonly follow_up: {
                    readonly type: "boolean";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementProjectTasksBulkDestroy: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["ids"];
        readonly properties: {
            readonly ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "project_id", "task_id", "follow_up"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly project_id: {
                        readonly type: "integer";
                    };
                    readonly subproject_id: {
                        readonly type: "integer";
                    };
                    readonly task_id: {
                        readonly type: "integer";
                    };
                    readonly follow_up: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementProjectTasksBulkDuplicate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["ids"];
        readonly properties: {
            readonly project_id: {
                readonly type: "integer";
            };
            readonly ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "project_id", "task_id", "follow_up"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly project_id: {
                        readonly type: "integer";
                    };
                    readonly subproject_id: {
                        readonly type: "integer";
                    };
                    readonly task_id: {
                        readonly type: "integer";
                    };
                    readonly follow_up: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementProjectWorkers: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["project_id", "employee_id"];
        readonly properties: {
            readonly project_id: {
                readonly type: "integer";
                readonly description: "The id of the project to assign the employee project worker.";
                readonly examples: readonly [314];
            };
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "The id of the employee to be assigned to the project.";
                readonly examples: readonly [678];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "project_id", "employee_id", "assigned"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly project_id: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly assigned: {
                    readonly type: "boolean";
                };
                readonly inputed_minutes: {
                    readonly type: "integer";
                };
                readonly labor_cost_cents: {
                    readonly type: "integer";
                };
                readonly spending_cost_cents: {
                    readonly type: "integer";
                };
                readonly full_name: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementProjectWorkersBulkAssign: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["employee_ids"];
        readonly properties: {
            readonly project_id: {
                readonly type: "integer";
                readonly description: "**DEPRECATED** in favor of `project_ids`. Please use `project_ids` instead";
                readonly examples: readonly [314];
            };
            readonly project_ids: {
                readonly type: "array";
                readonly description: "Set of project_ids to assign to the employees specified in the next param.";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3];
            };
            readonly employee_ids: {
                readonly type: "array";
                readonly description: "Set of a employee_ids that must be **assigned** after execution.";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "project_id", "employee_id", "assigned"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly project_id: {
                        readonly type: "integer";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly assigned: {
                        readonly type: "boolean";
                    };
                    readonly inputed_minutes: {
                        readonly type: "integer";
                    };
                    readonly labor_cost_cents: {
                        readonly type: "integer";
                    };
                    readonly spending_cost_cents: {
                        readonly type: "integer";
                    };
                    readonly full_name: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementProjectWorkersBulkCreate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["project_id", "employee_ids"];
        readonly properties: {
            readonly project_id: {
                readonly type: "integer";
                readonly description: "The id of the project to assign the given employees.";
                readonly examples: readonly [314];
            };
            readonly employee_ids: {
                readonly type: "array";
                readonly description: "The id of the employee to be assigned to the projects.";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [678, 679];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "project_id", "employee_id", "assigned"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly project_id: {
                        readonly type: "integer";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly assigned: {
                        readonly type: "boolean";
                    };
                    readonly inputed_minutes: {
                        readonly type: "integer";
                    };
                    readonly labor_cost_cents: {
                        readonly type: "integer";
                    };
                    readonly spending_cost_cents: {
                        readonly type: "integer";
                    };
                    readonly full_name: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementProjectWorkersUnassign: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "The id of the project worker to be unassigned.";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "project_id", "employee_id", "assigned"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly project_id: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly assigned: {
                    readonly type: "boolean";
                };
                readonly inputed_minutes: {
                    readonly type: "integer";
                };
                readonly labor_cost_cents: {
                    readonly type: "integer";
                };
                readonly spending_cost_cents: {
                    readonly type: "integer";
                };
                readonly full_name: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementProjects: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly code: {
                readonly type: "string";
            };
            readonly start_date: {
                readonly type: "string";
            };
            readonly due_date: {
                readonly type: "string";
            };
            readonly status: {
                readonly type: "string";
            };
            readonly employees_assignment: {
                readonly type: "string";
            };
            readonly project_admins: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
            readonly project_managers: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
            readonly is_billable: {
                readonly type: "boolean";
            };
            readonly fixed_cost_cents: {
                readonly type: "integer";
            };
            readonly budget_allocation: {
                readonly type: "integer";
            };
            readonly legal_entity_id: {
                readonly type: "integer";
            };
            readonly budget_allocation_cents: {
                readonly type: "integer";
            };
            readonly fee_amount_cents: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "status", "employees_assignment", "is_billable", "legal_entity_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly code: {
                    readonly type: "string";
                };
                readonly start_date: {
                    readonly type: "string";
                };
                readonly due_date: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["active", "closed", "processing"];
                    readonly description: "`active` `closed` `processing`";
                };
                readonly employees_assignment: {
                    readonly type: "string";
                    readonly enum: readonly ["manual", "company"];
                    readonly description: "`manual` `company`";
                };
                readonly inputed_minutes: {
                    readonly type: "integer";
                };
                readonly is_billable: {
                    readonly type: "boolean";
                };
                readonly fixed_cost_cents: {
                    readonly type: "integer";
                };
                readonly labor_cost_cents: {
                    readonly type: "integer";
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                };
                readonly spending_cost_cents: {
                    readonly type: "integer";
                };
                readonly client_id: {
                    readonly type: "integer";
                    readonly description: "The client id of the project";
                    readonly examples: readonly [123];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementProjectsActivate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "status", "employees_assignment", "is_billable", "legal_entity_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly code: {
                    readonly type: "string";
                };
                readonly start_date: {
                    readonly type: "string";
                };
                readonly due_date: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["active", "closed", "processing"];
                    readonly description: "`active` `closed` `processing`";
                };
                readonly employees_assignment: {
                    readonly type: "string";
                    readonly enum: readonly ["manual", "company"];
                    readonly description: "`manual` `company`";
                };
                readonly inputed_minutes: {
                    readonly type: "integer";
                };
                readonly is_billable: {
                    readonly type: "boolean";
                };
                readonly fixed_cost_cents: {
                    readonly type: "integer";
                };
                readonly labor_cost_cents: {
                    readonly type: "integer";
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                };
                readonly spending_cost_cents: {
                    readonly type: "integer";
                };
                readonly client_id: {
                    readonly type: "integer";
                    readonly description: "The client id of the project";
                    readonly examples: readonly [123];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementProjectsChangeAssignment: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "employees_assignment"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly employees_assignment: {
                readonly type: "string";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "status", "employees_assignment", "is_billable", "legal_entity_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly code: {
                    readonly type: "string";
                };
                readonly start_date: {
                    readonly type: "string";
                };
                readonly due_date: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["active", "closed", "processing"];
                    readonly description: "`active` `closed` `processing`";
                };
                readonly employees_assignment: {
                    readonly type: "string";
                    readonly enum: readonly ["manual", "company"];
                    readonly description: "`manual` `company`";
                };
                readonly inputed_minutes: {
                    readonly type: "integer";
                };
                readonly is_billable: {
                    readonly type: "boolean";
                };
                readonly fixed_cost_cents: {
                    readonly type: "integer";
                };
                readonly labor_cost_cents: {
                    readonly type: "integer";
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                };
                readonly spending_cost_cents: {
                    readonly type: "integer";
                };
                readonly client_id: {
                    readonly type: "integer";
                    readonly description: "The client id of the project";
                    readonly examples: readonly [123];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementProjectsClose: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "status", "employees_assignment", "is_billable", "legal_entity_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly code: {
                    readonly type: "string";
                };
                readonly start_date: {
                    readonly type: "string";
                };
                readonly due_date: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["active", "closed", "processing"];
                    readonly description: "`active` `closed` `processing`";
                };
                readonly employees_assignment: {
                    readonly type: "string";
                    readonly enum: readonly ["manual", "company"];
                    readonly description: "`manual` `company`";
                };
                readonly inputed_minutes: {
                    readonly type: "integer";
                };
                readonly is_billable: {
                    readonly type: "boolean";
                };
                readonly fixed_cost_cents: {
                    readonly type: "integer";
                };
                readonly labor_cost_cents: {
                    readonly type: "integer";
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                };
                readonly spending_cost_cents: {
                    readonly type: "integer";
                };
                readonly client_id: {
                    readonly type: "integer";
                    readonly description: "The client id of the project";
                    readonly examples: readonly [123];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementProjectsSoftDelete: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "status", "employees_assignment", "is_billable", "legal_entity_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly code: {
                    readonly type: "string";
                };
                readonly start_date: {
                    readonly type: "string";
                };
                readonly due_date: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["active", "closed", "processing"];
                    readonly description: "`active` `closed` `processing`";
                };
                readonly employees_assignment: {
                    readonly type: "string";
                    readonly enum: readonly ["manual", "company"];
                    readonly description: "`manual` `company`";
                };
                readonly inputed_minutes: {
                    readonly type: "integer";
                };
                readonly is_billable: {
                    readonly type: "boolean";
                };
                readonly fixed_cost_cents: {
                    readonly type: "integer";
                };
                readonly labor_cost_cents: {
                    readonly type: "integer";
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                };
                readonly spending_cost_cents: {
                    readonly type: "integer";
                };
                readonly client_id: {
                    readonly type: "integer";
                    readonly description: "The client id of the project";
                    readonly examples: readonly [123];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementSubprojects: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "project_id"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly project_id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["name", "project_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly project_id: {
                    readonly type: "integer";
                };
                readonly inputed_minutes: {
                    readonly type: "integer";
                };
                readonly labor_cost_cents: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementSubprojectsRename: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "name"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly name: {
                readonly type: "string";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["name", "project_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly project_id: {
                    readonly type: "integer";
                };
                readonly inputed_minutes: {
                    readonly type: "integer";
                };
                readonly labor_cost_cents: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementTimeRecords: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["project_worker_id", "attendance_shift_id"];
        readonly properties: {
            readonly project_worker_id: {
                readonly type: "integer";
            };
            readonly attendance_shift_id: {
                readonly type: "integer";
            };
            readonly subproject_id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "project_worker_id", "attendance_shift_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly project_worker_id: {
                    readonly type: "integer";
                };
                readonly attendance_shift_id: {
                    readonly type: "integer";
                };
                readonly subproject_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementTimeRecordsBulkDelete: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["date", "project_worker_id"];
        readonly properties: {
            readonly date: {
                readonly type: "string";
            };
            readonly project_worker_id: {
                readonly type: "integer";
            };
            readonly subproject_id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "project_worker_id", "attendance_shift_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly project_worker_id: {
                        readonly type: "integer";
                    };
                    readonly attendance_shift_id: {
                        readonly type: "integer";
                    };
                    readonly subproject_id: {
                        readonly type: "integer";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementTimeRecordsBulkProcess: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["items"];
        readonly properties: {
            readonly items: {
                readonly type: "array";
                readonly items: {};
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "project_worker_id", "attendance_shift_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly project_worker_id: {
                        readonly type: "integer";
                    };
                    readonly attendance_shift_id: {
                        readonly type: "integer";
                    };
                    readonly subproject_id: {
                        readonly type: "integer";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesProjectManagementTimeRecordsUpdateProjectWorker: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "project_worker_id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly project_worker_id: {
                readonly type: "integer";
            };
            readonly subproject_id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "project_worker_id", "attendance_shift_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly project_worker_id: {
                    readonly type: "integer";
                };
                readonly attendance_shift_id: {
                    readonly type: "integer";
                };
                readonly subproject_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesShiftManagementShifts: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["start_at", "end_at", "employee_id", "company_id"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly start_at: {
                readonly type: "string";
                readonly description: "Start date of the shift";
                readonly examples: readonly ["2020-09-07T06:00:00.000+00:00"];
            };
            readonly end_at: {
                readonly type: "string";
                readonly description: "End date of the shift";
                readonly examples: readonly ["2020-09-07T15:00:00.000+00:00"];
            };
            readonly notes: {
                readonly type: "string";
                readonly description: "Shift notes";
                readonly examples: readonly ["This is a shift note"];
            };
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "Employee identifier";
                readonly examples: readonly [389];
            };
            readonly location_id: {
                readonly type: "integer";
                readonly description: "Location identifier";
                readonly examples: readonly [5];
            };
            readonly work_area_id: {
                readonly type: "integer";
                readonly description: "Location work area identifier";
                readonly examples: readonly [12];
            };
            readonly company_id: {
                readonly type: "integer";
                readonly description: "Company identifier";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "state", "employee_id", "start_at", "end_at", "timezone", "local_start_at", "local_end_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Shift identifier";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the shift";
                    readonly examples: readonly ["Morning shift"];
                };
                readonly state: {
                    readonly type: "string";
                    readonly examples: readonly ["published, draft"];
                };
                readonly location_id: {
                    readonly type: "integer";
                    readonly description: "Shift location identifier";
                    readonly examples: readonly [3];
                };
                readonly locations_work_area_id: {
                    readonly type: "integer";
                    readonly description: "Shift work area identifier";
                    readonly examples: readonly [5];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee identifier";
                    readonly examples: readonly [45];
                };
                readonly start_at: {
                    readonly type: "string";
                    readonly description: "Start date of the shift";
                    readonly examples: readonly ["2020-09-07T06:00:00.000+00:00"];
                };
                readonly end_at: {
                    readonly type: "string";
                    readonly description: "End date of the shift";
                    readonly examples: readonly ["2020-09-07T15:00:00.000+00:00"];
                };
                readonly notes: {
                    readonly type: "string";
                    readonly description: "Shift notes";
                    readonly examples: readonly ["This is a shift note"];
                };
                readonly extra_hours: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate if the shift has extra hours";
                };
                readonly default_shift_title: {
                    readonly type: "string";
                    readonly description: "Default shift title";
                };
                readonly timezone: {
                    readonly type: "string";
                    readonly description: "Shift timezone";
                    readonly examples: readonly ["Europe/Madrid"];
                };
                readonly local_start_at: {
                    readonly type: "string";
                    readonly description: "Local start date of the shift";
                    readonly examples: readonly ["2020-09-07T07:00:00.000+00:00"];
                };
                readonly local_end_at: {
                    readonly type: "string";
                    readonly description: "Local end date of the shift";
                    readonly examples: readonly ["2020-09-07T15:00:00.000+00:00"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesShiftManagementShiftsBulkDelete: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["author_id"];
        readonly properties: {
            readonly ids: {
                readonly type: "array";
                readonly description: "List of shift identifiers";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3];
            };
            readonly start_at: {
                readonly type: "string";
                readonly description: "Start date for the shift list";
                readonly examples: readonly ["2020-01-01T15:00:00.000+00:00"];
            };
            readonly end_at: {
                readonly type: "string";
                readonly description: "End date for the shift list";
                readonly examples: readonly ["2020-01-31T15:00:00.000+00:00"];
            };
            readonly employee_ids: {
                readonly type: "array";
                readonly description: "Lsit of the employee identifiers";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3];
            };
            readonly author_id: {
                readonly type: "integer";
                readonly description: "Access identifier of the author fo the bulk delete action";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "state", "employee_id", "start_at", "end_at", "timezone", "local_start_at", "local_end_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Shift identifier";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the shift";
                    readonly examples: readonly ["Morning shift"];
                };
                readonly state: {
                    readonly type: "string";
                    readonly examples: readonly ["published, draft"];
                };
                readonly location_id: {
                    readonly type: "integer";
                    readonly description: "Shift location identifier";
                    readonly examples: readonly [3];
                };
                readonly locations_work_area_id: {
                    readonly type: "integer";
                    readonly description: "Shift work area identifier";
                    readonly examples: readonly [5];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee identifier";
                    readonly examples: readonly [45];
                };
                readonly start_at: {
                    readonly type: "string";
                    readonly description: "Start date of the shift";
                    readonly examples: readonly ["2020-09-07T06:00:00.000+00:00"];
                };
                readonly end_at: {
                    readonly type: "string";
                    readonly description: "End date of the shift";
                    readonly examples: readonly ["2020-09-07T15:00:00.000+00:00"];
                };
                readonly notes: {
                    readonly type: "string";
                    readonly description: "Shift notes";
                    readonly examples: readonly ["This is a shift note"];
                };
                readonly extra_hours: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate if the shift has extra hours";
                };
                readonly default_shift_title: {
                    readonly type: "string";
                    readonly description: "Default shift title";
                };
                readonly timezone: {
                    readonly type: "string";
                    readonly description: "Shift timezone";
                    readonly examples: readonly ["Europe/Madrid"];
                };
                readonly local_start_at: {
                    readonly type: "string";
                    readonly description: "Local start date of the shift";
                    readonly examples: readonly ["2020-09-07T07:00:00.000+00:00"];
                };
                readonly local_end_at: {
                    readonly type: "string";
                    readonly description: "Local end date of the shift";
                    readonly examples: readonly ["2020-09-07T15:00:00.000+00:00"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTasksTaskFiles: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["task_id", "file"];
        readonly properties: {
            readonly task_id: {
                readonly type: "integer";
                readonly description: "identifier of the task";
                readonly examples: readonly [1];
            };
            readonly file: {
                readonly type: "string";
                readonly description: "file to attach to the task";
                readonly format: "binary";
                readonly examples: readonly ["expenses.png"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "task_id", "filename", "path", "created_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the file.";
                    readonly examples: readonly [1];
                };
                readonly task_id: {
                    readonly type: "integer";
                    readonly description: "identifier of the task.";
                    readonly examples: readonly [1];
                };
                readonly filename: {
                    readonly type: "string";
                    readonly description: "name of the file.";
                    readonly examples: readonly ["expenses.png"];
                };
                readonly content_type: {
                    readonly type: "string";
                    readonly description: "content type of the file.";
                    readonly examples: readonly ["image/png"];
                };
                readonly path: {
                    readonly type: "string";
                    readonly description: "path of the file, for downloading the file you need to concat api_url/path.";
                    readonly examples: readonly ["/tasks/tasks_files/405"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "creation date of the file.";
                    readonly examples: readonly ["2024-10-06"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTasksTasks: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "status"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "name of the task.";
                readonly examples: readonly ["My task"];
            };
            readonly content: {
                readonly type: "string";
                readonly description: "description of the task";
                readonly examples: readonly ["Complete your performance review before Friday"];
            };
            readonly due_on: {
                readonly type: "string";
                readonly description: "expiration date of the task.";
                readonly examples: readonly ["2024-06-06"];
            };
            readonly assignee_ids: {
                readonly type: "array";
                readonly description: "Employees assigned to the task, assignee_id references to employee_id.";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3];
            };
            readonly status: {
                readonly type: "string";
                readonly description: "status of the task (todo | in_progress | done | discarded).";
                readonly enum: readonly ["todo", "in_progress", "done", "discarded"];
                readonly examples: readonly ["todo"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id", "assignee_ids", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the task";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the task";
                    readonly examples: readonly ["Upload payroll files"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the author of the task";
                    readonly examples: readonly [1];
                };
                readonly content: {
                    readonly type: "string";
                    readonly description: "Content of the task";
                    readonly examples: readonly ["Do it as soon as possible"];
                };
                readonly due_on: {
                    readonly type: "string";
                    readonly description: "Due on date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly assignee_ids: {
                    readonly type: "array";
                    readonly description: "Employees assigned to the task, assignee_id references to employee_id";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                };
                readonly author_employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee id of the author of the task";
                    readonly examples: readonly [1];
                };
                readonly completed_at: {
                    readonly type: "string";
                    readonly description: "Completed at date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly completed_by_id: {
                    readonly type: "integer";
                    readonly description: "Completed by identifier";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "Updated at date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the task\n\n`todo` `in_progress` `done` `discarded`";
                    readonly enum: readonly ["todo", "in_progress", "done", "discarded"];
                    readonly examples: readonly ["done"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTasksTasksBulkChangeStatus: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["ids", "status"];
        readonly properties: {
            readonly ids: {
                readonly type: "array";
                readonly description: "a list of task ids.";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3];
            };
            readonly status: {
                readonly type: "string";
                readonly description: "status of the task (todo | in_progress | done | discarded).";
                readonly enum: readonly ["todo", "in_progress", "done", "discarded"];
                readonly examples: readonly ["todo"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "name", "company_id", "assignee_ids", "created_at", "updated_at"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Identifier of the task";
                        readonly examples: readonly [1];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Name of the task";
                        readonly examples: readonly ["Upload payroll files"];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "Company identifier of the author of the task";
                        readonly examples: readonly [1];
                    };
                    readonly content: {
                        readonly type: "string";
                        readonly description: "Content of the task";
                        readonly examples: readonly ["Do it as soon as possible"];
                    };
                    readonly due_on: {
                        readonly type: "string";
                        readonly description: "Due on date of the task";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                    readonly assignee_ids: {
                        readonly type: "array";
                        readonly description: "Employees assigned to the task, assignee_id references to employee_id";
                        readonly items: {
                            readonly type: "integer";
                        };
                        readonly examples: readonly [1, 2, 3];
                    };
                    readonly author_employee_id: {
                        readonly type: "integer";
                        readonly description: "Employee id of the author of the task";
                        readonly examples: readonly [1];
                    };
                    readonly completed_at: {
                        readonly type: "string";
                        readonly description: "Completed at date of the task";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                    readonly completed_by_id: {
                        readonly type: "integer";
                        readonly description: "Completed by identifier";
                        readonly examples: readonly [1];
                    };
                    readonly created_at: {
                        readonly type: "string";
                    };
                    readonly updated_at: {
                        readonly type: "string";
                        readonly description: "Updated at date of the task";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "Status of the task\n\n`todo` `in_progress` `done` `discarded`";
                        readonly enum: readonly ["todo", "in_progress", "done", "discarded"];
                        readonly examples: readonly ["done"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTasksTasksBulkDelete: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["ids"];
        readonly properties: {
            readonly ids: {
                readonly type: "array";
                readonly description: "a list of task ids.";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "name", "company_id", "assignee_ids", "created_at", "updated_at"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Identifier of the task";
                        readonly examples: readonly [1];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Name of the task";
                        readonly examples: readonly ["Upload payroll files"];
                    };
                    readonly company_id: {
                        readonly type: "integer";
                        readonly description: "Company identifier of the author of the task";
                        readonly examples: readonly [1];
                    };
                    readonly content: {
                        readonly type: "string";
                        readonly description: "Content of the task";
                        readonly examples: readonly ["Do it as soon as possible"];
                    };
                    readonly due_on: {
                        readonly type: "string";
                        readonly description: "Due on date of the task";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                    readonly assignee_ids: {
                        readonly type: "array";
                        readonly description: "Employees assigned to the task, assignee_id references to employee_id";
                        readonly items: {
                            readonly type: "integer";
                        };
                        readonly examples: readonly [1, 2, 3];
                    };
                    readonly author_employee_id: {
                        readonly type: "integer";
                        readonly description: "Employee id of the author of the task";
                        readonly examples: readonly [1];
                    };
                    readonly completed_at: {
                        readonly type: "string";
                        readonly description: "Completed at date of the task";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                    readonly completed_by_id: {
                        readonly type: "integer";
                        readonly description: "Completed by identifier";
                        readonly examples: readonly [1];
                    };
                    readonly created_at: {
                        readonly type: "string";
                    };
                    readonly updated_at: {
                        readonly type: "string";
                        readonly description: "Updated at date of the task";
                        readonly examples: readonly ["2024-01-01T00:00:00Z"];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "Status of the task\n\n`todo` `in_progress` `done` `discarded`";
                        readonly enum: readonly ["todo", "in_progress", "done", "discarded"];
                        readonly examples: readonly ["done"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTasksTasksCopy: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "id of the task.";
                readonly examples: readonly [1];
            };
            readonly name: {
                readonly type: "string";
                readonly description: "name of the task";
                readonly examples: readonly ["My task"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id", "assignee_ids", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the task";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the task";
                    readonly examples: readonly ["Upload payroll files"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the author of the task";
                    readonly examples: readonly [1];
                };
                readonly content: {
                    readonly type: "string";
                    readonly description: "Content of the task";
                    readonly examples: readonly ["Do it as soon as possible"];
                };
                readonly due_on: {
                    readonly type: "string";
                    readonly description: "Due on date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly assignee_ids: {
                    readonly type: "array";
                    readonly description: "Employees assigned to the task, assignee_id references to employee_id";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                };
                readonly author_employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee id of the author of the task";
                    readonly examples: readonly [1];
                };
                readonly completed_at: {
                    readonly type: "string";
                    readonly description: "Completed at date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly completed_by_id: {
                    readonly type: "integer";
                    readonly description: "Completed by identifier";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "Updated at date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the task\n\n`todo` `in_progress` `done` `discarded`";
                    readonly enum: readonly ["todo", "in_progress", "done", "discarded"];
                    readonly examples: readonly ["done"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTasksTasksCreateComment: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["content", "author_id", "resource_id", "company_id"];
        readonly properties: {
            readonly content: {
                readonly type: "string";
            };
            readonly author_id: {
                readonly type: "integer";
            };
            readonly resource_id: {
                readonly type: "integer";
            };
            readonly company_id: {
                readonly type: "integer";
            };
            readonly mentioned_access_ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id", "assignee_ids", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the task";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the task";
                    readonly examples: readonly ["Upload payroll files"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the author of the task";
                    readonly examples: readonly [1];
                };
                readonly content: {
                    readonly type: "string";
                    readonly description: "Content of the task";
                    readonly examples: readonly ["Do it as soon as possible"];
                };
                readonly due_on: {
                    readonly type: "string";
                    readonly description: "Due on date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly assignee_ids: {
                    readonly type: "array";
                    readonly description: "Employees assigned to the task, assignee_id references to employee_id";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                };
                readonly author_employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee id of the author of the task";
                    readonly examples: readonly [1];
                };
                readonly completed_at: {
                    readonly type: "string";
                    readonly description: "Completed at date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly completed_by_id: {
                    readonly type: "integer";
                    readonly description: "Completed by identifier";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "Updated at date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the task\n\n`todo` `in_progress` `done` `discarded`";
                    readonly enum: readonly ["todo", "in_progress", "done", "discarded"];
                    readonly examples: readonly ["done"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTasksTasksResolve: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "done"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "id of the task.";
                readonly examples: readonly [1];
            };
            readonly done: {
                readonly type: "boolean";
                readonly description: "A boolean for setting the new status of the task, done given true and to-do given false.";
                readonly examples: readonly [true];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id", "assignee_ids", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the task";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the task";
                    readonly examples: readonly ["Upload payroll files"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the author of the task";
                    readonly examples: readonly [1];
                };
                readonly content: {
                    readonly type: "string";
                    readonly description: "Content of the task";
                    readonly examples: readonly ["Do it as soon as possible"];
                };
                readonly due_on: {
                    readonly type: "string";
                    readonly description: "Due on date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly assignee_ids: {
                    readonly type: "array";
                    readonly description: "Employees assigned to the task, assignee_id references to employee_id";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                };
                readonly author_employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee id of the author of the task";
                    readonly examples: readonly [1];
                };
                readonly completed_at: {
                    readonly type: "string";
                    readonly description: "Completed at date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly completed_by_id: {
                    readonly type: "integer";
                    readonly description: "Completed by identifier";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "Updated at date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the task\n\n`todo` `in_progress` `done` `discarded`";
                    readonly enum: readonly ["todo", "in_progress", "done", "discarded"];
                    readonly examples: readonly ["done"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTeamsMemberships: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["team_id", "employee_id"];
        readonly properties: {
            readonly team_id: {
                readonly type: "integer";
                readonly description: "Team id.";
                readonly examples: readonly [1];
            };
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "Employee id.";
                readonly examples: readonly [5];
            };
            readonly lead: {
                readonly type: "boolean";
                readonly description: "Makes the employee a lead of the team.";
                readonly examples: readonly [true];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "team_id", "lead"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Membership ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company ID of the membership";
                    readonly examples: readonly [5];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee ID of the membership";
                    readonly examples: readonly [12];
                };
                readonly team_id: {
                    readonly type: "integer";
                    readonly description: "Team ID of the membership";
                    readonly examples: readonly [4];
                };
                readonly lead: {
                    readonly type: "boolean";
                    readonly description: "Whether the employee is a lead of the team or not";
                    readonly examples: readonly [true];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTeamsTeams: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Name of the team.";
                readonly examples: readonly ["Management"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Description of the team";
                readonly examples: readonly ["Management team description"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly avatar: {
                    readonly type: "string";
                };
                readonly employee_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly lead_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly company_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTimePlanningPlanningVersions: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["effective_at", "planning_tool", "employee_id", "company"];
        readonly properties: {
            readonly effective_at: {
                readonly type: "string";
            };
            readonly planning_tool: {
                readonly type: "string";
            };
            readonly number_of_rest_days_in_cents: {
                readonly type: "integer";
            };
            readonly employee_id: {
                readonly type: "integer";
            };
            readonly schedule_id: {
                readonly type: "integer";
            };
            readonly company: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
            readonly author: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["effective_at", "planning_tool", "employee_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly effective_at: {
                    readonly type: "string";
                };
                readonly planning_tool: {
                    readonly type: "string";
                };
                readonly number_of_rest_days_in_cents: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly work_schedule_schedule_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTimePlanningPlanningVersionsBulkCreate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["effective_at", "planning_tool", "employee_ids", "company"];
        readonly properties: {
            readonly effective_at: {
                readonly type: "string";
            };
            readonly planning_tool: {
                readonly type: "string";
            };
            readonly number_of_rest_days_in_cents: {
                readonly type: "integer";
            };
            readonly employee_ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
            readonly schedule_id: {
                readonly type: "integer";
            };
            readonly company: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
            readonly author: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["effective_at", "planning_tool", "employee_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly effective_at: {
                    readonly type: "string";
                };
                readonly planning_tool: {
                    readonly type: "string";
                };
                readonly number_of_rest_days_in_cents: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly work_schedule_schedule_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTimePlanningPlanningVersionsDeactivate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["effective_at", "planning_tool", "company"];
        readonly properties: {
            readonly effective_at: {
                readonly type: "string";
            };
            readonly planning_tool: {
                readonly type: "string";
            };
            readonly schedule_id: {
                readonly type: "integer";
            };
            readonly company: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
            readonly author: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["effective_at", "planning_tool", "employee_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly effective_at: {
                    readonly type: "string";
                };
                readonly planning_tool: {
                    readonly type: "string";
                };
                readonly number_of_rest_days_in_cents: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly work_schedule_schedule_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTimeSettingsBreakConfigurations: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "paid"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly paid: {
                readonly type: "boolean";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "paid", "archived"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly paid: {
                    readonly type: "boolean";
                };
                readonly archived: {
                    readonly type: "boolean";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTimeoffAllowanceIncidences: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["employee_id", "timeoff_allowance_id", "days_in_cents", "effective_on", "target_balance"];
        readonly properties: {
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "Employee Id";
                readonly examples: readonly [6];
            };
            readonly timeoff_allowance_id: {
                readonly type: "integer";
                readonly description: "Allowance Id";
                readonly examples: readonly [1];
            };
            readonly days_in_cents: {
                readonly type: "integer";
                readonly description: "How many units multiplied by 100 do you want to add/substract. Can be positive or negative";
                readonly examples: readonly [100];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "A free text field to add a description to the incidence";
                readonly examples: readonly ["Working on a bank holiday a different day"];
            };
            readonly effective_on: {
                readonly type: "string";
                readonly description: "When does the incidence take effect. This is related to the allowance cycle.";
                readonly examples: readonly ["2024-01-05"];
            };
            readonly target_balance: {
                readonly type: "string";
                readonly description: "Which counter does the incidence affect. Can be \"accrued\" or \"available\"";
                readonly enum: readonly ["available", "accrued"];
                readonly examples: readonly ["accrued"];
            };
            readonly _skip_notifications: {
                readonly type: "boolean";
                readonly description: "When set to true, it prevents notifications being sent to employee when this incidence is created";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "days_in_cents", "timeoff_allowance_id", "effective_on", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier of the allowance incidence";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee id of the affected employee";
                    readonly examples: readonly [1];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Optional comment regarding the incidence";
                    readonly examples: readonly ["Added because working on a holiday"];
                };
                readonly days_in_cents: {
                    readonly type: "integer";
                    readonly description: "How many units * 100 does the incidence add/substract. Can be positive or negative. Example is one unit";
                    readonly examples: readonly [100];
                };
                readonly timeoff_allowance_id: {
                    readonly type: "integer";
                    readonly description: "To what allowance does the incidence affect. It will dictate if its days or hours";
                    readonly examples: readonly [2];
                };
                readonly effective_on: {
                    readonly type: "string";
                    readonly description: "When does the incidence take effect; this is for time off cycles calculations.";
                    readonly examples: readonly ["2024-01-02"];
                };
                readonly target_balance: {
                    readonly type: "string";
                    readonly description: "Whether the incidence affects the Accrued or the Available counter.";
                    readonly examples: readonly ["accrued"];
                };
                readonly created_at: {
                    readonly type: "integer";
                    readonly description: "Unix timestamp when the DB record was created";
                    readonly examples: readonly [1723623354];
                };
                readonly updated_at: {
                    readonly type: "integer";
                    readonly description: "Unix timestamp when the DB record was last updated";
                    readonly examples: readonly [1723623354];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTimeoffAllowances: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["accrued_units_availability", "allowance_type", "available_days", "count_holiday_as_workable", "cycle_start", "days_type", "holiday_allowance_in_cents", "leave_type_ids", "name", "negative_counter_type", "proration_type", "pto_proratio_enabled", "rounding", "source_units", "tenure_periods", "timeoff_policy_id", "unlimited_accrued_hours", "unlimited_carry_over", "unlimited_carry_over_expiration", "unlimited_holidays"];
        readonly properties: {
            readonly accrued_denominator_in_cents: {
                readonly type: "integer";
                readonly description: "Only for Allowances based on worked time. It represents how many units you need to work to be granted allowance units";
                readonly examples: readonly [1000];
            };
            readonly accrued_factor_in_cents: {
                readonly type: "integer";
                readonly description: "Only for Allowances based on worked time. It represents how many units you are given per unit of time worked";
                readonly examples: readonly [10];
            };
            readonly accrued_units_availability: {
                readonly type: "string";
                readonly description: "When can the accrued units be spent.";
                readonly enum: readonly ["current_cycle", "next_cycle"];
                readonly examples: readonly ["current_cycle"];
            };
            readonly allowance_type: {
                readonly type: "string";
                readonly description: "Sets the allowance units. Can be \"days\" or \"hours\"";
                readonly enum: readonly ["days", "hours"];
                readonly examples: readonly ["days"];
            };
            readonly available_days: {
                readonly type: "string";
                readonly description: "Indicates how the allowance units are accrued. For example all_days means all allowance days are given on the first day of the cycle.";
                readonly enum: readonly ["all_days", "generated_days", "generated_days_monthly", "generated_days_monthly_first_day", "monthly_fifteenth", "mensiversary", "bimonthly_first_and_fifteenth", "bimonthly_fifteenth_and_last"];
                readonly examples: readonly ["all_days"];
            };
            readonly carry_over_units_in_cents: {
                readonly type: "integer";
                readonly description: "How many units can carry over between cycles multiplied by 100";
                readonly examples: readonly [1500];
            };
            readonly count_holiday_as_workable: {
                readonly type: "boolean";
                readonly description: "This setting flags if units taken during a bank holiday should be deducted or not from allowance.";
            };
            readonly cycle_length: {
                readonly type: "integer";
                readonly description: "How many months does each allowance cycle last";
                readonly examples: readonly [12];
            };
            readonly cycle_start: {
                readonly type: "string";
                readonly description: "When does the cycle start.";
                readonly enum: readonly ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec", "employee_hired_date"];
                readonly examples: readonly ["jan"];
            };
            readonly days_type: {
                readonly type: "string";
                readonly description: "Indicates if the allowance is based on working on calendar days.";
                readonly enum: readonly ["working_days", "natural_days", "natural_days_only_range", "french_calendar_days", "french_ouvres"];
                readonly examples: readonly ["working_days"];
            };
            readonly expire_in_months: {
                readonly type: "integer";
                readonly description: "When does the carryover expire in months.";
                readonly examples: readonly [6];
            };
            readonly frequency: {
                readonly type: "string";
                readonly description: "Defines duration of the allowance cycles. Can be \"yearly\", \"monthly_flexible\" or \"lifetime\"";
                readonly enum: readonly ["monthly_flexible", "yearly", "lifetime"];
                readonly examples: readonly ["yearly"];
            };
            readonly holiday_allowance_in_cents: {
                readonly type: "integer";
                readonly description: "Base amount of holiday allowance units multiplied by 100";
                readonly examples: readonly [2300];
            };
            readonly leave_type_ids: {
                readonly type: "array";
                readonly description: "An array of leave type ids associated with that allowance";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3, 4];
            };
            readonly maximum_amount_in_cents: {
                readonly type: "integer";
                readonly description: "Maximum the allowance can reach on accrued";
                readonly examples: readonly [2800];
            };
            readonly name: {
                readonly type: "string";
                readonly description: "Allowance name set by the user";
                readonly examples: readonly ["Holiday Allowance"];
            };
            readonly negative_counter_type: {
                readonly type: "string";
                readonly description: "Whether the allowance allows to request more days than available.";
                readonly enum: readonly ["negative_counter_disabled", "negative_counter_enabled"];
                readonly examples: readonly ["negative_counter_disabled"];
            };
            readonly position: {
                readonly type: "integer";
                readonly description: "Indicates the position in the allowance when rendering them in UI";
                readonly examples: readonly [0];
            };
            readonly proration_type: {
                readonly type: "string";
                readonly description: "Whether the allowance has proration enabled or not.";
                readonly enum: readonly ["proration_enabled", "proration_disabled"];
                readonly examples: readonly ["proration_enabled"];
            };
            readonly pto_proratio_enabled: {
                readonly type: "boolean";
                readonly description: "Whether the allowance days are prorated or not";
            };
            readonly range_type: {
                readonly type: "string";
                readonly description: "Configures how leaves duration is handled.";
                readonly enum: readonly ["exact_range", "extra_non_working_days_at_end"];
                readonly examples: readonly ["working_days"];
            };
            readonly rounding: {
                readonly type: "string";
                readonly description: "How the accrued units of the allowance are rounded. It depends if the allowance is set in hours or days.";
                readonly enum: readonly ["half_day", "decimals", "quarters", "round_up"];
                readonly examples: readonly ["half_day"];
            };
            readonly source_units: {
                readonly type: "string";
                readonly description: "This field configures the type of allowance (fixed balance, based on worked time)";
                readonly enum: readonly ["base_units", "overtime_units", "by_worked_time"];
                readonly examples: readonly ["base_units"];
            };
            readonly tenure_period_transition: {
                readonly type: "string";
                readonly description: "In case the allowance has tenure periods, when is this tenure applied.";
                readonly enum: readonly ["beginning_of_cycle", "end_of_cycle", "after_milestone"];
                readonly examples: readonly ["beginning_of_cycle"];
            };
            readonly tenure_periods_enabled: {
                readonly type: "boolean";
                readonly description: "Whether the allowance has tenure periods enabled or not.";
            };
            readonly tenure_periods: {
                readonly type: "array";
                readonly description: "The tenure periods associated with the allowance.";
                readonly items: {};
            };
            readonly timeoff_policy_id: {
                readonly type: "integer";
                readonly description: "The Id of the policy to which the allowance belongs to";
                readonly examples: readonly [1];
            };
            readonly unlimited_accrued_hours: {
                readonly type: "boolean";
                readonly description: "Flag to indicate if there is unlimited accrual.";
            };
            readonly unlimited_carry_over: {
                readonly type: "boolean";
                readonly description: "Flag to indicate if there is unlimited carry over.";
            };
            readonly unlimited_carry_over_expiration: {
                readonly type: "boolean";
                readonly description: "Boolean to flag if carryover does not expire";
            };
            readonly unlimited_holidays: {
                readonly type: "boolean";
                readonly description: "Flag to indicate that the allowance has unlimited available days";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "allowance_type", "available_days", "count_holiday_as_workable", "leave_type_ids", "name", "proration_type", "rounding", "tenure_periods", "timeoff_cycle", "timeoff_policy_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier of the allowance";
                    readonly examples: readonly [1];
                };
                readonly accrued_denominator_in_cents: {
                    readonly type: "integer";
                    readonly description: "Only for Allowances based on worked time. It represents how many units you need to work to be granted allowance units";
                    readonly examples: readonly [1000];
                };
                readonly accrued_factor_in_cents: {
                    readonly type: "integer";
                    readonly description: "Only for Allowances based on worked time. It represents how many units you are given per unit of time worked";
                    readonly examples: readonly [10];
                };
                readonly accrued_units_availability: {
                    readonly type: "string";
                    readonly description: "When can the acrrued units be spent.\n\n`current_cycle` `next_cycle`";
                    readonly enum: readonly ["current_cycle", "next_cycle"];
                    readonly examples: readonly ["current_cycle"];
                };
                readonly allowance_type: {
                    readonly type: "string";
                    readonly description: "Sets the allowance units. Can be \"days\" or \"hours\"\n\n`days` `hours`";
                    readonly enum: readonly ["days", "hours"];
                    readonly examples: readonly ["days"];
                };
                readonly available_days: {
                    readonly type: "string";
                    readonly description: "Indicates how the allowance units are accrued. For example all_days means all allowance days are given on the first day of the cycle.\n\n`all_days` `generated_days` `generated_days_monthly` `generated_days_monthly_first_day` `monthly_fifteenth` `mensiversary` `bimonthly_first_and_fifteenth` `bimonthly_fifteenth_and_last`";
                    readonly enum: readonly ["all_days", "generated_days", "generated_days_monthly", "generated_days_monthly_first_day", "monthly_fifteenth", "mensiversary", "bimonthly_first_and_fifteenth", "bimonthly_fifteenth_and_last"];
                    readonly examples: readonly ["all_days"];
                };
                readonly carry_over_days: {
                    readonly type: "integer";
                    readonly description: "How many units can carry over between cycles";
                    readonly examples: readonly [15];
                };
                readonly carry_over_units_in_cents: {
                    readonly type: "integer";
                    readonly description: "How many units can carry over between cycles multiplied by 100";
                    readonly examples: readonly [1500];
                };
                readonly count_holiday_as_workable: {
                    readonly type: "boolean";
                    readonly description: "This setting flags if units taken during a bank holiday should be deducted or not from allowance.";
                };
                readonly cycle_length: {
                    readonly type: "integer";
                    readonly description: "How many months does each allowance cycle last";
                    readonly examples: readonly [12];
                };
                readonly cycle_start: {
                    readonly type: "string";
                    readonly description: "When does the cycle start.";
                    readonly examples: readonly ["jan"];
                };
                readonly days_type: {
                    readonly type: "string";
                    readonly description: "Indicates if the allowance is based on working on calendar days.\n\n`working_days` `natural_days` `natural_days_only_range` `french_calendar_days` `french_ouvres`";
                    readonly enum: readonly ["working_days", "natural_days", "natural_days_only_range", "french_calendar_days", "french_ouvres"];
                    readonly examples: readonly ["working_days"];
                };
                readonly employee_carry_over_starting_year: {
                    readonly type: "integer";
                    readonly description: "When does the carryover start";
                    readonly examples: readonly [1];
                };
                readonly expire_in_months: {
                    readonly type: "integer";
                    readonly description: "When does the carryover expire in months.";
                    readonly examples: readonly [6];
                };
                readonly frequency: {
                    readonly type: "string";
                    readonly description: "Defines duration of the allowance cycles. Can be \"yearly\", \"monthly_flexible\" or \"lifetime\"\n\n`monthly_flexible` `yearly` `lifetime`";
                    readonly enum: readonly ["monthly_flexible", "yearly", "lifetime"];
                    readonly examples: readonly ["yearly"];
                };
                readonly holiday_allowance_in_cents: {
                    readonly type: "integer";
                    readonly description: "Base amount of holiday allowance units multiplied by 100";
                    readonly examples: readonly [2300];
                };
                readonly leave_type_ids: {
                    readonly type: "array";
                    readonly description: "An array of leave type ids associated with that allowance";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3, 4];
                };
                readonly maximum_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "Maximum the allowance can reach on accrued";
                    readonly examples: readonly [2800];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Allowance name set by the user";
                    readonly examples: readonly ["Holiday Allowance"];
                };
                readonly negative_counter_type: {
                    readonly type: "string";
                    readonly description: "Whether the allowance allows to request more days than available\n\n`negative_counter_disabled` `negative_counter_enabled`";
                    readonly enum: readonly ["negative_counter_disabled", "negative_counter_enabled"];
                    readonly examples: readonly ["negative_counter_disabled"];
                };
                readonly position: {
                    readonly type: "integer";
                    readonly description: "Indicates the position in the allowance when rendering them in UI";
                    readonly examples: readonly [0];
                };
                readonly proration_type: {
                    readonly type: "string";
                    readonly description: "Whether the allowance has proration enabled or not.\n\n`proration_enabled` `proration_disabled`";
                    readonly enum: readonly ["proration_enabled", "proration_disabled"];
                    readonly examples: readonly ["proration_enabled"];
                };
                readonly pto_proratio_enabled: {
                    readonly type: "boolean";
                    readonly description: "Whether the allowance days are prorrated or not";
                };
                readonly range_type: {
                    readonly type: "string";
                    readonly description: "Configures how leaves duration is handled.\n\n`exact_range` `extra_non_working_days_at_end`";
                    readonly enum: readonly ["exact_range", "extra_non_working_days_at_end"];
                    readonly examples: readonly ["working_days"];
                };
                readonly rounding: {
                    readonly type: "string";
                    readonly description: "How the accrued units of the allowance are rounded. It depends if the allowance is set in hours or days.\n\n`half_day` `decimals` `quarters` `round_up`";
                    readonly enum: readonly ["half_day", "decimals", "quarters", "round_up"];
                    readonly examples: readonly ["half_day"];
                };
                readonly send_notification: {
                    readonly type: "boolean";
                };
                readonly source_units: {
                    readonly type: "string";
                    readonly description: "This field configures the type of allowance (fixed balance, based on worked time)\n\n`base_units` `overtime_units` `by_worked_time`";
                    readonly enum: readonly ["base_units", "overtime_units", "by_worked_time"];
                    readonly examples: readonly ["base_units"];
                };
                readonly tenure_period_transition: {
                    readonly type: "string";
                    readonly description: "In case the allowance has tenure periods, when is this tenure applied.\n\n`beginning_of_cycle` `end_of_cycle` `after_milestone`";
                    readonly enum: readonly ["beginning_of_cycle", "end_of_cycle", "after_milestone"];
                    readonly examples: readonly ["beginning_of_cycle"];
                };
                readonly tenure_periods: {
                    readonly type: "array";
                    readonly description: "The tenure periods associated with the allowance.";
                    readonly items: {};
                };
                readonly tenure_periods_enabled: {
                    readonly type: "boolean";
                    readonly description: "Whether the allowance has tenure periods enabled or not.";
                };
                readonly timeoff_cycle: {
                    readonly type: "string";
                    readonly description: "Value to indicate how the allowance cycle is configured. Its an abbreviation of the first and last month.";
                    readonly examples: readonly ["jan_dec"];
                };
                readonly timeoff_policy_id: {
                    readonly type: "integer";
                    readonly description: "The Id of the policy to which the allowance belongs to";
                    readonly examples: readonly [1];
                };
                readonly unlimited_accrued_hours: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate if there is unlimited accrual.";
                };
                readonly unlimited_carry_over: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate if there is unlimited carry over.";
                };
                readonly unlimited_carry_over_expiration: {
                    readonly type: "boolean";
                    readonly description: "Boolean to flag if carryover does not expire";
                };
                readonly unlimited_holidays: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate that the allowance has unlimited available days";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTimeoffAllowancesDeleteWithAltAllowance: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "alt_allowance_id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly alt_allowance_id: {
                readonly type: "integer";
                readonly description: "Allowance id sent to migrate existing incidences from the deleted allowance to the alternative allowance";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "allowance_type", "available_days", "count_holiday_as_workable", "leave_type_ids", "name", "proration_type", "rounding", "tenure_periods", "timeoff_cycle", "timeoff_policy_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier of the allowance";
                    readonly examples: readonly [1];
                };
                readonly accrued_denominator_in_cents: {
                    readonly type: "integer";
                    readonly description: "Only for Allowances based on worked time. It represents how many units you need to work to be granted allowance units";
                    readonly examples: readonly [1000];
                };
                readonly accrued_factor_in_cents: {
                    readonly type: "integer";
                    readonly description: "Only for Allowances based on worked time. It represents how many units you are given per unit of time worked";
                    readonly examples: readonly [10];
                };
                readonly accrued_units_availability: {
                    readonly type: "string";
                    readonly description: "When can the acrrued units be spent.\n\n`current_cycle` `next_cycle`";
                    readonly enum: readonly ["current_cycle", "next_cycle"];
                    readonly examples: readonly ["current_cycle"];
                };
                readonly allowance_type: {
                    readonly type: "string";
                    readonly description: "Sets the allowance units. Can be \"days\" or \"hours\"\n\n`days` `hours`";
                    readonly enum: readonly ["days", "hours"];
                    readonly examples: readonly ["days"];
                };
                readonly available_days: {
                    readonly type: "string";
                    readonly description: "Indicates how the allowance units are accrued. For example all_days means all allowance days are given on the first day of the cycle.\n\n`all_days` `generated_days` `generated_days_monthly` `generated_days_monthly_first_day` `monthly_fifteenth` `mensiversary` `bimonthly_first_and_fifteenth` `bimonthly_fifteenth_and_last`";
                    readonly enum: readonly ["all_days", "generated_days", "generated_days_monthly", "generated_days_monthly_first_day", "monthly_fifteenth", "mensiversary", "bimonthly_first_and_fifteenth", "bimonthly_fifteenth_and_last"];
                    readonly examples: readonly ["all_days"];
                };
                readonly carry_over_days: {
                    readonly type: "integer";
                    readonly description: "How many units can carry over between cycles";
                    readonly examples: readonly [15];
                };
                readonly carry_over_units_in_cents: {
                    readonly type: "integer";
                    readonly description: "How many units can carry over between cycles multiplied by 100";
                    readonly examples: readonly [1500];
                };
                readonly count_holiday_as_workable: {
                    readonly type: "boolean";
                    readonly description: "This setting flags if units taken during a bank holiday should be deducted or not from allowance.";
                };
                readonly cycle_length: {
                    readonly type: "integer";
                    readonly description: "How many months does each allowance cycle last";
                    readonly examples: readonly [12];
                };
                readonly cycle_start: {
                    readonly type: "string";
                    readonly description: "When does the cycle start.";
                    readonly examples: readonly ["jan"];
                };
                readonly days_type: {
                    readonly type: "string";
                    readonly description: "Indicates if the allowance is based on working on calendar days.\n\n`working_days` `natural_days` `natural_days_only_range` `french_calendar_days` `french_ouvres`";
                    readonly enum: readonly ["working_days", "natural_days", "natural_days_only_range", "french_calendar_days", "french_ouvres"];
                    readonly examples: readonly ["working_days"];
                };
                readonly employee_carry_over_starting_year: {
                    readonly type: "integer";
                    readonly description: "When does the carryover start";
                    readonly examples: readonly [1];
                };
                readonly expire_in_months: {
                    readonly type: "integer";
                    readonly description: "When does the carryover expire in months.";
                    readonly examples: readonly [6];
                };
                readonly frequency: {
                    readonly type: "string";
                    readonly description: "Defines duration of the allowance cycles. Can be \"yearly\", \"monthly_flexible\" or \"lifetime\"\n\n`monthly_flexible` `yearly` `lifetime`";
                    readonly enum: readonly ["monthly_flexible", "yearly", "lifetime"];
                    readonly examples: readonly ["yearly"];
                };
                readonly holiday_allowance_in_cents: {
                    readonly type: "integer";
                    readonly description: "Base amount of holiday allowance units multiplied by 100";
                    readonly examples: readonly [2300];
                };
                readonly leave_type_ids: {
                    readonly type: "array";
                    readonly description: "An array of leave type ids associated with that allowance";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3, 4];
                };
                readonly maximum_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "Maximum the allowance can reach on accrued";
                    readonly examples: readonly [2800];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Allowance name set by the user";
                    readonly examples: readonly ["Holiday Allowance"];
                };
                readonly negative_counter_type: {
                    readonly type: "string";
                    readonly description: "Whether the allowance allows to request more days than available\n\n`negative_counter_disabled` `negative_counter_enabled`";
                    readonly enum: readonly ["negative_counter_disabled", "negative_counter_enabled"];
                    readonly examples: readonly ["negative_counter_disabled"];
                };
                readonly position: {
                    readonly type: "integer";
                    readonly description: "Indicates the position in the allowance when rendering them in UI";
                    readonly examples: readonly [0];
                };
                readonly proration_type: {
                    readonly type: "string";
                    readonly description: "Whether the allowance has proration enabled or not.\n\n`proration_enabled` `proration_disabled`";
                    readonly enum: readonly ["proration_enabled", "proration_disabled"];
                    readonly examples: readonly ["proration_enabled"];
                };
                readonly pto_proratio_enabled: {
                    readonly type: "boolean";
                    readonly description: "Whether the allowance days are prorrated or not";
                };
                readonly range_type: {
                    readonly type: "string";
                    readonly description: "Configures how leaves duration is handled.\n\n`exact_range` `extra_non_working_days_at_end`";
                    readonly enum: readonly ["exact_range", "extra_non_working_days_at_end"];
                    readonly examples: readonly ["working_days"];
                };
                readonly rounding: {
                    readonly type: "string";
                    readonly description: "How the accrued units of the allowance are rounded. It depends if the allowance is set in hours or days.\n\n`half_day` `decimals` `quarters` `round_up`";
                    readonly enum: readonly ["half_day", "decimals", "quarters", "round_up"];
                    readonly examples: readonly ["half_day"];
                };
                readonly send_notification: {
                    readonly type: "boolean";
                };
                readonly source_units: {
                    readonly type: "string";
                    readonly description: "This field configures the type of allowance (fixed balance, based on worked time)\n\n`base_units` `overtime_units` `by_worked_time`";
                    readonly enum: readonly ["base_units", "overtime_units", "by_worked_time"];
                    readonly examples: readonly ["base_units"];
                };
                readonly tenure_period_transition: {
                    readonly type: "string";
                    readonly description: "In case the allowance has tenure periods, when is this tenure applied.\n\n`beginning_of_cycle` `end_of_cycle` `after_milestone`";
                    readonly enum: readonly ["beginning_of_cycle", "end_of_cycle", "after_milestone"];
                    readonly examples: readonly ["beginning_of_cycle"];
                };
                readonly tenure_periods: {
                    readonly type: "array";
                    readonly description: "The tenure periods associated with the allowance.";
                    readonly items: {};
                };
                readonly tenure_periods_enabled: {
                    readonly type: "boolean";
                    readonly description: "Whether the allowance has tenure periods enabled or not.";
                };
                readonly timeoff_cycle: {
                    readonly type: "string";
                    readonly description: "Value to indicate how the allowance cycle is configured. Its an abbreviation of the first and last month.";
                    readonly examples: readonly ["jan_dec"];
                };
                readonly timeoff_policy_id: {
                    readonly type: "integer";
                    readonly description: "The Id of the policy to which the allowance belongs to";
                    readonly examples: readonly [1];
                };
                readonly unlimited_accrued_hours: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate if there is unlimited accrual.";
                };
                readonly unlimited_carry_over: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate if there is unlimited carry over.";
                };
                readonly unlimited_carry_over_expiration: {
                    readonly type: "boolean";
                    readonly description: "Boolean to flag if carryover does not expire";
                };
                readonly unlimited_holidays: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate that the allowance has unlimited available days";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTimeoffBlockedPeriods: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["company_id", "name", "leave_type_ids"];
        readonly properties: {
            readonly company_id: {
                readonly type: "integer";
                readonly description: "The company id";
                readonly examples: readonly [1];
            };
            readonly name: {
                readonly type: "string";
                readonly description: "Name of the blocked period.";
                readonly examples: readonly ["Onboarding period"];
            };
            readonly leave_type_ids: {
                readonly type: "array";
                readonly description: "An array of leave type identifiers for which employees can not request timeoff";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 4];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "name", "leave_type_ids", "time_periods", "strategy", "members"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier of the blocked period";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company id of the blocked period";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the blocked period.";
                    readonly examples: readonly ["Onboarding period"];
                };
                readonly leave_type_ids: {
                    readonly type: "array";
                    readonly description: "Leave types for which absence request has been blocked";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                };
                readonly time_periods: {
                    readonly type: "array";
                    readonly description: "The tenure periods associated with the allowance.";
                    readonly items: {};
                };
                readonly strategy: {
                    readonly type: "string";
                    readonly description: "Type of access group";
                    readonly examples: readonly ["everyone"];
                };
                readonly members: {
                    readonly type: "array";
                    readonly description: "Employees whose timeoff will be affected";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                };
                readonly location_ids: {
                    readonly type: "array";
                    readonly description: "Array of locations workplace identifiers where the employees are located";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                };
                readonly team_ids: {
                    readonly type: "array";
                    readonly description: "Array of team identifiers which the selected employees belong to";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTimeoffLeaveTypes: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["accrues", "approval_required", "identifier", "color", "name", "workable", "company_id", "details_required"];
        readonly properties: {
            readonly accrues: {
                readonly type: "boolean";
                readonly description: "Whether the leave type accrues over time";
                readonly examples: readonly [true];
            };
            readonly approval_required: {
                readonly type: "boolean";
                readonly description: "Whether approval is required for this leave type";
                readonly examples: readonly [true];
            };
            readonly identifier: {
                readonly type: "string";
                readonly description: "A unique identifier for the leave type";
                readonly examples: readonly ["custom"];
            };
            readonly attachment: {
                readonly type: "boolean";
                readonly description: "Whether an attachment is required for this leave type";
                readonly examples: readonly [true];
            };
            readonly color: {
                readonly type: "string";
                readonly description: "The color associated with this leave type";
                readonly examples: readonly ["red"];
            };
            readonly name: {
                readonly type: "string";
                readonly description: "The name of the leave type";
                readonly examples: readonly ["Sick Leave"];
            };
            readonly visibility: {
                readonly type: "boolean";
                readonly description: "Whether the leave type is visible to employees";
                readonly examples: readonly [true];
            };
            readonly workable: {
                readonly type: "boolean";
                readonly description: "Whether the leave type is workable (can be worked on during leave)";
            };
            readonly payable: {
                readonly type: "boolean";
                readonly description: "Whether the leave type is payable";
                readonly examples: readonly [true];
            };
            readonly is_attachment_mandatory: {
                readonly type: "boolean";
                readonly description: "Whether the attachment is mandatory";
            };
            readonly half_days_units_enabled: {
                readonly type: "boolean";
                readonly description: "Whether half-day units are enabled for this leave type";
                readonly examples: readonly [true];
            };
            readonly max_days_in_cents: {
                readonly type: "integer";
                readonly description: "Maximum days in cents that can be taken";
                readonly examples: readonly [5000];
            };
            readonly min_days_in_cents: {
                readonly type: "integer";
                readonly description: "Minimum days in cents that must be taken";
                readonly examples: readonly [1000];
            };
            readonly company_id: {
                readonly type: "integer";
                readonly description: "Identifier of the company associated with this leave type";
                readonly examples: readonly [1];
            };
            readonly editable: {
                readonly type: "boolean";
                readonly description: "Whether the leave type is editable";
                readonly examples: readonly [true];
            };
            readonly allow_endless: {
                readonly type: "boolean";
                readonly description: "Whether endless leave is allowed";
            };
            readonly restricted: {
                readonly type: "boolean";
                readonly description: "Whether the leave type is restricted";
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Description of the leave type";
                readonly examples: readonly ["Leave for sick days"];
            };
            readonly details_required: {
                readonly type: "boolean";
                readonly description: "Whether additional details are required for the leave type";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "identifier", "color", "attachment", "visibility", "workable", "company_id", "allowance_ids", "details_required"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the leave type";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the leave type";
                    readonly examples: readonly ["Annual Leave"];
                };
                readonly translated_name: {
                    readonly type: "string";
                    readonly description: "Translated name of the leave type, if available";
                    readonly examples: readonly ["Congé Annuel"];
                };
                readonly identifier: {
                    readonly type: "string";
                    readonly description: "Unique identifier of the leave type";
                    readonly examples: readonly ["annual_leave"];
                };
                readonly color: {
                    readonly type: "string";
                    readonly description: "The color associated with this leave type";
                    readonly examples: readonly ["red"];
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is active";
                    readonly examples: readonly [true];
                };
                readonly editable: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is editable";
                };
                readonly approval_required: {
                    readonly type: "boolean";
                    readonly description: "Whether approval is required for this leave type";
                    readonly examples: readonly [true];
                };
                readonly accrues: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type accrues over time";
                    readonly examples: readonly [true];
                };
                readonly attachment: {
                    readonly type: "boolean";
                    readonly description: "Whether an attachment is required for this leave type";
                    readonly examples: readonly [true];
                };
                readonly allow_endless: {
                    readonly type: "boolean";
                    readonly description: "Whether endless leave is allowed";
                };
                readonly restricted: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is restricted";
                };
                readonly visibility: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is visible to employees";
                    readonly examples: readonly [true];
                };
                readonly workable: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is workable";
                };
                readonly payable: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is payable";
                    readonly examples: readonly [true];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the company associated with this leave type";
                    readonly examples: readonly [1];
                };
                readonly is_attachment_mandatory: {
                    readonly type: "boolean";
                    readonly description: "Whether the attachment is mandatory";
                };
                readonly allowance_ids: {
                    readonly type: "array";
                    readonly description: "List of allowance identifiers associated with this leave type";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                };
                readonly half_days_units_enabled: {
                    readonly type: "boolean";
                    readonly description: "Whether half-day units are enabled for this leave type";
                    readonly examples: readonly [true];
                };
                readonly max_days_in_cents: {
                    readonly type: "integer";
                    readonly description: "Maximum days in cents that can be taken";
                    readonly examples: readonly [5000];
                };
                readonly min_days_in_cents: {
                    readonly type: "integer";
                    readonly description: "Minimum days in cents that must be taken";
                    readonly examples: readonly [1000];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Description of the leave type";
                    readonly examples: readonly ["This leave type is for annual holidays."];
                };
                readonly details_required: {
                    readonly type: "boolean";
                    readonly description: "Whether additional details are required for the leave type";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTimeoffLeaves: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["employee_id", "start_on"];
        readonly properties: {
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "The employee id of the leave";
                readonly examples: readonly [1];
            };
            readonly leave_type_id: {
                readonly type: "integer";
                readonly description: "The leave type id";
                readonly examples: readonly [1];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "The description of the leave";
                readonly examples: readonly ["Leaving in the morning for a medical appointment"];
            };
            readonly start_on: {
                readonly type: "string";
                readonly description: "The valid start date of the leave following the format YYYY-MM-DD";
                readonly examples: readonly ["2024-05-05"];
            };
            readonly finish_on: {
                readonly type: "string";
                readonly description: "The valid end date of the leave following the format YYYY-MM-DD";
                readonly examples: readonly ["2024-05-05"];
            };
            readonly half_day: {
                readonly type: "string";
                readonly description: "If the leave is in: [beggining_of_day, end_of_day]";
                readonly examples: readonly ["end_of_day"];
            };
            readonly start_time: {
                readonly type: "string";
                readonly description: "The start time of a leave";
                readonly examples: readonly ["14:00"];
            };
            readonly hours_amount_in_cents: {
                readonly type: "integer";
                readonly description: "The hours amount in cents of a leave";
                readonly examples: readonly ["400"];
            };
            readonly medical_leave_type: {
                readonly type: "integer";
                readonly description: "The medical leave type";
                readonly examples: readonly ["4"];
            };
            readonly effective_on: {
                readonly type: "string";
                readonly description: "The effective on date of a leave following the format YYYY-MM-DD";
                readonly examples: readonly ["2024-05-05"];
            };
            readonly medical_discharge_reason: {
                readonly type: "string";
                readonly description: "The medical discharge reason of a leave";
                readonly examples: readonly ["Illness"];
            };
            readonly colegiate_number: {
                readonly type: "integer";
                readonly description: "The colegiate number of a leave";
                readonly examples: readonly [150];
            };
            readonly has_previous_relapse: {
                readonly type: "boolean";
                readonly description: "If the leave has previous relapse";
            };
            readonly relapse_leave_id: {
                readonly type: "integer";
                readonly description: "The leave relapse id";
                readonly examples: readonly [1];
            };
            readonly relapse_on: {
                readonly type: "string";
                readonly description: "The leave relapse on date following the format YYYY-MM-DD";
                readonly examples: readonly ["2024-05-05"];
            };
            readonly accident_on: {
                readonly type: "string";
                readonly description: "The leave accident on date following the format YYYY-MM-DD";
                readonly examples: readonly ["2024-05-05"];
            };
            readonly paternity_birth_on: {
                readonly type: "string";
                readonly description: "The leave paternity birth on date following the format YYYY-MM-DD";
                readonly examples: readonly ["2024-05-05"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "employee_id", "start_on", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the Leave";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the employee of the leave";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee identifier of the leave";
                    readonly examples: readonly [1];
                };
                readonly start_on: {
                    readonly type: "string";
                    readonly description: "The start date of the leave";
                    readonly examples: readonly ["2023-09-01"];
                };
                readonly finish_on: {
                    readonly type: "string";
                    readonly description: "The end date of the leave";
                    readonly examples: readonly ["2023-09-10"];
                };
                readonly half_day: {
                    readonly type: "string";
                    readonly description: "Indicates if the leave is taken as a half-day";
                    readonly examples: readonly ["end_of_day"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A description of the leave";
                    readonly examples: readonly ["Annual family vacation"];
                };
                readonly reason: {
                    readonly type: "string";
                    readonly description: "The reason provided by the employee for taking the leave";
                    readonly examples: readonly ["Medical appointment"];
                };
                readonly leave_type_id: {
                    readonly type: "integer";
                    readonly description: "The identifier for the type of leave";
                    readonly examples: readonly [2];
                };
                readonly leave_type_name: {
                    readonly type: "string";
                    readonly description: "The name of the leave type";
                    readonly examples: readonly ["Vacation"];
                };
                readonly approved: {
                    readonly type: "boolean";
                    readonly description: "Indicates whether the leave has been approved";
                    readonly examples: readonly [true];
                };
                readonly employee_full_name: {
                    readonly type: "string";
                    readonly description: "The full name of the employee taking the leave";
                    readonly examples: readonly ["John Doe"];
                };
                readonly start_time: {
                    readonly type: "string";
                    readonly description: "The start time of the leave";
                    readonly examples: readonly ["09:00"];
                };
                readonly hours_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The total number of hours taken for the leave, represented in cents";
                    readonly examples: readonly [80000];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "The updated at date of the leave";
                    readonly examples: readonly ["2023-08-31T15:30:00Z"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "The created at date of the leave";
                    readonly examples: readonly ["2023-08-01T08:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTimeoffLeavesApprove: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Identifier of the Leave";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "employee_id", "start_on", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the Leave";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the employee of the leave";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee identifier of the leave";
                    readonly examples: readonly [1];
                };
                readonly start_on: {
                    readonly type: "string";
                    readonly description: "The start date of the leave";
                    readonly examples: readonly ["2023-09-01"];
                };
                readonly finish_on: {
                    readonly type: "string";
                    readonly description: "The end date of the leave";
                    readonly examples: readonly ["2023-09-10"];
                };
                readonly half_day: {
                    readonly type: "string";
                    readonly description: "Indicates if the leave is taken as a half-day";
                    readonly examples: readonly ["end_of_day"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A description of the leave";
                    readonly examples: readonly ["Annual family vacation"];
                };
                readonly reason: {
                    readonly type: "string";
                    readonly description: "The reason provided by the employee for taking the leave";
                    readonly examples: readonly ["Medical appointment"];
                };
                readonly leave_type_id: {
                    readonly type: "integer";
                    readonly description: "The identifier for the type of leave";
                    readonly examples: readonly [2];
                };
                readonly leave_type_name: {
                    readonly type: "string";
                    readonly description: "The name of the leave type";
                    readonly examples: readonly ["Vacation"];
                };
                readonly approved: {
                    readonly type: "boolean";
                    readonly description: "Indicates whether the leave has been approved";
                    readonly examples: readonly [true];
                };
                readonly employee_full_name: {
                    readonly type: "string";
                    readonly description: "The full name of the employee taking the leave";
                    readonly examples: readonly ["John Doe"];
                };
                readonly start_time: {
                    readonly type: "string";
                    readonly description: "The start time of the leave";
                    readonly examples: readonly ["09:00"];
                };
                readonly hours_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The total number of hours taken for the leave, represented in cents";
                    readonly examples: readonly [80000];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "The updated at date of the leave";
                    readonly examples: readonly ["2023-08-31T15:30:00Z"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "The created at date of the leave";
                    readonly examples: readonly ["2023-08-01T08:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTimeoffLeavesReject: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Identifier of the Leave";
                readonly examples: readonly [1];
            };
            readonly reason: {
                readonly type: "string";
                readonly description: "Reason for rejecting the leave";
                readonly examples: readonly ["Not enough notice"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "employee_id", "start_on", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the Leave";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the employee of the leave";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee identifier of the leave";
                    readonly examples: readonly [1];
                };
                readonly start_on: {
                    readonly type: "string";
                    readonly description: "The start date of the leave";
                    readonly examples: readonly ["2023-09-01"];
                };
                readonly finish_on: {
                    readonly type: "string";
                    readonly description: "The end date of the leave";
                    readonly examples: readonly ["2023-09-10"];
                };
                readonly half_day: {
                    readonly type: "string";
                    readonly description: "Indicates if the leave is taken as a half-day";
                    readonly examples: readonly ["end_of_day"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A description of the leave";
                    readonly examples: readonly ["Annual family vacation"];
                };
                readonly reason: {
                    readonly type: "string";
                    readonly description: "The reason provided by the employee for taking the leave";
                    readonly examples: readonly ["Medical appointment"];
                };
                readonly leave_type_id: {
                    readonly type: "integer";
                    readonly description: "The identifier for the type of leave";
                    readonly examples: readonly [2];
                };
                readonly leave_type_name: {
                    readonly type: "string";
                    readonly description: "The name of the leave type";
                    readonly examples: readonly ["Vacation"];
                };
                readonly approved: {
                    readonly type: "boolean";
                    readonly description: "Indicates whether the leave has been approved";
                    readonly examples: readonly [true];
                };
                readonly employee_full_name: {
                    readonly type: "string";
                    readonly description: "The full name of the employee taking the leave";
                    readonly examples: readonly ["John Doe"];
                };
                readonly start_time: {
                    readonly type: "string";
                    readonly description: "The start time of the leave";
                    readonly examples: readonly ["09:00"];
                };
                readonly hours_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The total number of hours taken for the leave, represented in cents";
                    readonly examples: readonly [80000];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "The updated at date of the leave";
                    readonly examples: readonly ["2023-08-31T15:30:00Z"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "The created at date of the leave";
                    readonly examples: readonly ["2023-08-01T08:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTimeoffPolicies: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "The name of the policy.";
                readonly examples: readonly ["Policy for remotes"];
            };
            readonly main: {
                readonly type: "boolean";
                readonly description: "If the policy is the main policy.";
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Policy description.";
                readonly examples: readonly ["This policy will apply only for remote employees"];
            };
            readonly company_id: {
                readonly type: "integer";
                readonly description: "Company ID.";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "The policy id.";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Policy name.";
                    readonly examples: readonly ["Policy for remotes"];
                };
                readonly main: {
                    readonly type: "boolean";
                    readonly description: "Is the main policy? It will return true if it's the main policy if not it will return false.";
                    readonly examples: readonly [true];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "The company id.";
                    readonly examples: readonly [1];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The policy description.";
                    readonly examples: readonly ["This policy will apply only for remote employees"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTrainingsCategories: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "company_id"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly company_id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTrainingsSessionAccessMembershipsBulkCreate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["session_id", "notify"];
        readonly properties: {
            readonly access_ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
            readonly employee_ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
            readonly session_id: {
                readonly type: "integer";
            };
            readonly notify: {
                readonly type: "boolean";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "access_id", "session_id", "session_attendance_status", "team_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly access_id: {
                        readonly type: "integer";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly session_id: {
                        readonly type: "integer";
                    };
                    readonly first_name: {
                        readonly type: "string";
                    };
                    readonly last_name: {
                        readonly type: "string";
                    };
                    readonly job_title: {
                        readonly type: "string";
                    };
                    readonly session_attendance_status: {
                        readonly type: "string";
                    };
                    readonly team_id: {
                        readonly type: "integer";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTrainingsSessionAccessMembershipsBulkDestroy: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["ids", "notify"];
        readonly properties: {
            readonly ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
            readonly notify: {
                readonly type: "boolean";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "access_id", "session_id", "session_attendance_status", "team_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly access_id: {
                        readonly type: "integer";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                    readonly session_id: {
                        readonly type: "integer";
                    };
                    readonly first_name: {
                        readonly type: "string";
                    };
                    readonly last_name: {
                        readonly type: "string";
                    };
                    readonly job_title: {
                        readonly type: "string";
                    };
                    readonly session_attendance_status: {
                        readonly type: "string";
                    };
                    readonly team_id: {
                        readonly type: "integer";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTrainingsSessionAttendancesBulkUpdate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["ids", "status"];
        readonly properties: {
            readonly ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
            readonly status: {
                readonly type: "string";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "status", "session_access_membership_id", "access_id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly status: {
                        readonly type: "string";
                    };
                    readonly session_access_membership_id: {
                        readonly type: "integer";
                    };
                    readonly access_id: {
                        readonly type: "integer";
                    };
                    readonly employee_id: {
                        readonly type: "integer";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTrainingsSessions: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "training_id"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly training_id: {
                readonly type: "integer";
            };
            readonly description: {
                readonly type: "string";
            };
            readonly training_class_id: {
                readonly type: "integer";
            };
            readonly starts_at: {
                readonly type: "string";
            };
            readonly ends_at: {
                readonly type: "string";
            };
            readonly due_date: {
                readonly type: "string";
            };
            readonly duration: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
            readonly modality: {
                readonly type: "string";
            };
            readonly link: {
                readonly type: "string";
            };
            readonly location: {
                readonly type: "string";
            };
            readonly subsidized: {
                readonly type: "boolean";
            };
            readonly recurrent: {
                readonly type: "boolean";
            };
            readonly reminders: {
                readonly type: "array";
                readonly items: {};
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "training_id", "subsidized", "session_attendances_status"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly training_id: {
                    readonly type: "integer";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly training_class_id: {
                    readonly type: "integer";
                };
                readonly starts_at: {
                    readonly type: "string";
                };
                readonly ends_at: {
                    readonly type: "string";
                };
                readonly due_date: {
                    readonly type: "string";
                };
                readonly duration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly modality: {
                    readonly type: "string";
                };
                readonly link: {
                    readonly type: "string";
                };
                readonly location: {
                    readonly type: "string";
                };
                readonly session_attendance_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly session_feedback_id: {
                    readonly type: "integer";
                };
                readonly subsidized: {
                    readonly type: "boolean";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly session_attendances_status: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTrainingsTrainingMembershipsBulkCreate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["training_id"];
        readonly properties: {
            readonly access_ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
            readonly employee_ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
            readonly training_id: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "access_id", "training_id", "status"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Unique identifier for the training membership.";
                        readonly examples: readonly [1];
                    };
                    readonly access_id: {
                        readonly type: "integer";
                        readonly description: "Access_id associated to the employee, refers to employees/employees endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly training_id: {
                        readonly type: "integer";
                        readonly description: "This field is used to filter those trainings memberships that belongs to this training.";
                        readonly examples: readonly [1];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "This field is used to filter those trainings memberships whose attendance status is the given.";
                        readonly examples: readonly ["notstarted"];
                    };
                    readonly training_due_date: {
                        readonly type: "string";
                        readonly description: "This field is used for those trainings with an expiry date.";
                        readonly examples: readonly ["2022-01-01"];
                    };
                    readonly training_completed_at: {
                        readonly type: "string";
                        readonly description: "This field is used to record the date a training was completed for trainings that have an expiry date.";
                        readonly examples: readonly ["2022-01-01"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTrainingsTrainingMembershipsBulkDestroy: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["ids"];
        readonly properties: {
            readonly ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "access_id", "training_id", "status"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "Unique identifier for the training membership.";
                        readonly examples: readonly [1];
                    };
                    readonly access_id: {
                        readonly type: "integer";
                        readonly description: "Access_id associated to the employee, refers to employees/employees endpoint.";
                        readonly examples: readonly [1];
                    };
                    readonly training_id: {
                        readonly type: "integer";
                        readonly description: "This field is used to filter those trainings memberships that belongs to this training.";
                        readonly examples: readonly [1];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "This field is used to filter those trainings memberships whose attendance status is the given.";
                        readonly examples: readonly ["notstarted"];
                    };
                    readonly training_due_date: {
                        readonly type: "string";
                        readonly description: "This field is used for those trainings with an expiry date.";
                        readonly examples: readonly ["2022-01-01"];
                    };
                    readonly training_completed_at: {
                        readonly type: "string";
                        readonly description: "This field is used to record the date a training was completed for trainings that have an expiry date.";
                        readonly examples: readonly ["2022-01-01"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTrainingsTrainings: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "description", "external", "year", "attachments"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Name of the training";
                readonly examples: readonly ["Communication Course"];
            };
            readonly code: {
                readonly type: "string";
                readonly description: "Code of the training";
                readonly examples: readonly ["COM-101"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Description of the training";
                readonly examples: readonly ["Intermediate-level communication course that focuses on building and enhancing language skills."];
            };
            readonly external_provider: {
                readonly type: "string";
                readonly description: "External provider of the training";
                readonly examples: readonly ["Coursera"];
            };
            readonly external: {
                readonly type: "boolean";
                readonly description: "External training";
            };
            readonly category_ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
            readonly competency_ids: {
                readonly type: "array";
                readonly description: "Competency ids of the training";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2];
            };
            readonly author_id: {
                readonly type: "integer";
                readonly description: "The person that creates the training";
                readonly examples: readonly [20];
            };
            readonly employee_id: {
                readonly type: "integer";
            };
            readonly cost: {
                readonly type: "integer";
            };
            readonly subsidized_cost: {
                readonly type: "integer";
            };
            readonly cost_decimal: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
            readonly subsidized_cost_decimal: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
            readonly year: {
                readonly type: "integer";
                readonly description: "Year of the training";
                readonly examples: readonly [2022];
            };
            readonly company_id: {
                readonly type: "integer";
                readonly description: "Company identifier of the training";
                readonly examples: readonly [1];
            };
            readonly attachments: {
                readonly type: "array";
                readonly description: "Attachments of the training";
                readonly items: {};
            };
            readonly valid_for: {
                readonly type: "integer";
                readonly description: "The training validity period";
                readonly examples: readonly [1];
            };
            readonly objectives: {
                readonly type: "string";
                readonly description: "Objectives of the course";
                readonly examples: readonly ["Intermediate-level communication course that focuses on building and enhancing language skills."];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "author_id", "name", "description", "external", "fundae_subsidized", "cost", "subsidized_cost", "cost_decimal", "subsidized_cost_decimal", "year", "catalog", "competency_ids", "total_training_cost", "total_training_subsidized_cost", "total_participants", "training_attendance_status", "access_id", "session_attendance", "competency_id", "modality"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly author_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly code: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                };
                readonly external_provider: {
                    readonly type: "string";
                };
                readonly external: {
                    readonly type: "boolean";
                };
                readonly total_cost: {
                    readonly type: "integer";
                };
                readonly fundae_subsidized: {
                    readonly type: "boolean";
                };
                readonly cost: {
                    readonly type: "integer";
                };
                readonly subsidized_cost: {
                    readonly type: "integer";
                };
                readonly total_cost_decimal: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly cost_decimal: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly subsidized_cost_decimal: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly category_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly year: {
                    readonly type: "integer";
                };
                readonly catalog: {
                    readonly type: "boolean";
                };
                readonly competency_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly total_training_cost: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly total_training_subsidized_cost: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly total_participants: {
                    readonly type: "integer";
                };
                readonly training_attendance_status: {
                    readonly type: "string";
                    readonly enum: readonly ["notassigned", "notstarted", "missing", "started", "partiallycompleted", "completed"];
                    readonly description: "`notassigned` `notstarted` `missing` `started` `partiallycompleted` `completed`";
                };
                readonly valid_for: {
                    readonly type: "integer";
                };
                readonly objectives: {
                    readonly type: "string";
                    readonly description: "Objectives of the course";
                    readonly examples: readonly ["Intermediate-level communication course that focuses on building and enhancing language skills."];
                };
                readonly number_of_expired_participants: {
                    readonly type: "integer";
                    readonly description: "Number of participants that have the course expired or about to expire in the next 3 months. Only applicable to trainings with validity period.";
                    readonly examples: readonly [2];
                };
                readonly access_id: {
                    readonly type: "integer";
                };
                readonly session_attendance: {
                    readonly type: "string";
                };
                readonly competency_id: {
                    readonly type: "integer";
                };
                readonly modality: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTrainingsTrainingsBulkDelete: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["ids"];
        readonly properties: {
            readonly ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "company_id", "author_id", "name", "description", "external", "fundae_subsidized", "cost", "subsidized_cost", "cost_decimal", "subsidized_cost_decimal", "year", "catalog", "competency_ids", "total_training_cost", "total_training_subsidized_cost", "total_participants", "training_attendance_status", "access_id", "session_attendance", "competency_id", "modality"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly company_id: {
                        readonly type: "integer";
                    };
                    readonly author_id: {
                        readonly type: "integer";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                    };
                    readonly description: {
                        readonly type: "string";
                    };
                    readonly created_at: {
                        readonly type: "string";
                    };
                    readonly updated_at: {
                        readonly type: "string";
                    };
                    readonly external_provider: {
                        readonly type: "string";
                    };
                    readonly external: {
                        readonly type: "boolean";
                    };
                    readonly total_cost: {
                        readonly type: "integer";
                    };
                    readonly fundae_subsidized: {
                        readonly type: "boolean";
                    };
                    readonly cost: {
                        readonly type: "integer";
                    };
                    readonly subsidized_cost: {
                        readonly type: "integer";
                    };
                    readonly total_cost_decimal: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly cost_decimal: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly subsidized_cost_decimal: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly category_ids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                        };
                    };
                    readonly status: {
                        readonly type: "string";
                    };
                    readonly year: {
                        readonly type: "integer";
                    };
                    readonly catalog: {
                        readonly type: "boolean";
                    };
                    readonly competency_ids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                        };
                    };
                    readonly total_training_cost: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly total_training_subsidized_cost: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly total_participants: {
                        readonly type: "integer";
                    };
                    readonly training_attendance_status: {
                        readonly type: "string";
                        readonly enum: readonly ["notassigned", "notstarted", "missing", "started", "partiallycompleted", "completed"];
                        readonly description: "`notassigned` `notstarted` `missing` `started` `partiallycompleted` `completed`";
                    };
                    readonly valid_for: {
                        readonly type: "integer";
                    };
                    readonly objectives: {
                        readonly type: "string";
                        readonly description: "Objectives of the course";
                        readonly examples: readonly ["Intermediate-level communication course that focuses on building and enhancing language skills."];
                    };
                    readonly number_of_expired_participants: {
                        readonly type: "integer";
                        readonly description: "Number of participants that have the course expired or about to expire in the next 3 months. Only applicable to trainings with validity period.";
                        readonly examples: readonly [2];
                    };
                    readonly access_id: {
                        readonly type: "integer";
                    };
                    readonly session_attendance: {
                        readonly type: "string";
                    };
                    readonly competency_id: {
                        readonly type: "integer";
                    };
                    readonly modality: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTrainingsTrainingsBulkUpdateCatalog: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["ids", "catalog"];
        readonly properties: {
            readonly ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
            readonly catalog: {
                readonly type: "boolean";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "company_id", "author_id", "name", "description", "external", "fundae_subsidized", "cost", "subsidized_cost", "cost_decimal", "subsidized_cost_decimal", "year", "catalog", "competency_ids", "total_training_cost", "total_training_subsidized_cost", "total_participants", "training_attendance_status", "access_id", "session_attendance", "competency_id", "modality"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly company_id: {
                        readonly type: "integer";
                    };
                    readonly author_id: {
                        readonly type: "integer";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                    };
                    readonly description: {
                        readonly type: "string";
                    };
                    readonly created_at: {
                        readonly type: "string";
                    };
                    readonly updated_at: {
                        readonly type: "string";
                    };
                    readonly external_provider: {
                        readonly type: "string";
                    };
                    readonly external: {
                        readonly type: "boolean";
                    };
                    readonly total_cost: {
                        readonly type: "integer";
                    };
                    readonly fundae_subsidized: {
                        readonly type: "boolean";
                    };
                    readonly cost: {
                        readonly type: "integer";
                    };
                    readonly subsidized_cost: {
                        readonly type: "integer";
                    };
                    readonly total_cost_decimal: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly cost_decimal: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly subsidized_cost_decimal: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly category_ids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                        };
                    };
                    readonly status: {
                        readonly type: "string";
                    };
                    readonly year: {
                        readonly type: "integer";
                    };
                    readonly catalog: {
                        readonly type: "boolean";
                    };
                    readonly competency_ids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                        };
                    };
                    readonly total_training_cost: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly total_training_subsidized_cost: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                    readonly total_participants: {
                        readonly type: "integer";
                    };
                    readonly training_attendance_status: {
                        readonly type: "string";
                        readonly enum: readonly ["notassigned", "notstarted", "missing", "started", "partiallycompleted", "completed"];
                        readonly description: "`notassigned` `notstarted` `missing` `started` `partiallycompleted` `completed`";
                    };
                    readonly valid_for: {
                        readonly type: "integer";
                    };
                    readonly objectives: {
                        readonly type: "string";
                        readonly description: "Objectives of the course";
                        readonly examples: readonly ["Intermediate-level communication course that focuses on building and enhancing language skills."];
                    };
                    readonly number_of_expired_participants: {
                        readonly type: "integer";
                        readonly description: "Number of participants that have the course expired or about to expire in the next 3 months. Only applicable to trainings with validity period.";
                        readonly examples: readonly [2];
                    };
                    readonly access_id: {
                        readonly type: "integer";
                    };
                    readonly session_attendance: {
                        readonly type: "string";
                    };
                    readonly competency_id: {
                        readonly type: "integer";
                    };
                    readonly modality: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesTrainingsTrainingsUpdateStatus: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "status", "notify"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly status: {
                readonly type: "string";
            };
            readonly notify: {
                readonly type: "boolean";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "author_id", "name", "description", "external", "fundae_subsidized", "cost", "subsidized_cost", "cost_decimal", "subsidized_cost_decimal", "year", "catalog", "competency_ids", "total_training_cost", "total_training_subsidized_cost", "total_participants", "training_attendance_status", "access_id", "session_attendance", "competency_id", "modality"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly author_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly code: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                };
                readonly external_provider: {
                    readonly type: "string";
                };
                readonly external: {
                    readonly type: "boolean";
                };
                readonly total_cost: {
                    readonly type: "integer";
                };
                readonly fundae_subsidized: {
                    readonly type: "boolean";
                };
                readonly cost: {
                    readonly type: "integer";
                };
                readonly subsidized_cost: {
                    readonly type: "integer";
                };
                readonly total_cost_decimal: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly cost_decimal: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly subsidized_cost_decimal: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly category_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly year: {
                    readonly type: "integer";
                };
                readonly catalog: {
                    readonly type: "boolean";
                };
                readonly competency_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly total_training_cost: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly total_training_subsidized_cost: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly total_participants: {
                    readonly type: "integer";
                };
                readonly training_attendance_status: {
                    readonly type: "string";
                    readonly enum: readonly ["notassigned", "notstarted", "missing", "started", "partiallycompleted", "completed"];
                    readonly description: "`notassigned` `notstarted` `missing` `started` `partiallycompleted` `completed`";
                };
                readonly valid_for: {
                    readonly type: "integer";
                };
                readonly objectives: {
                    readonly type: "string";
                    readonly description: "Objectives of the course";
                    readonly examples: readonly ["Intermediate-level communication course that focuses on building and enhancing language skills."];
                };
                readonly number_of_expired_participants: {
                    readonly type: "integer";
                    readonly description: "Number of participants that have the course expired or about to expire in the next 3 months. Only applicable to trainings with validity period.";
                    readonly examples: readonly [2];
                };
                readonly access_id: {
                    readonly type: "integer";
                };
                readonly session_attendance: {
                    readonly type: "string";
                };
                readonly competency_id: {
                    readonly type: "integer";
                };
                readonly modality: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesWorkScheduleDayConfigurationsBulkCud: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["overlap_period_id", "day_configurations"];
        readonly properties: {
            readonly overlap_period_id: {
                readonly type: "integer";
            };
            readonly day_configurations: {
                readonly type: "array";
                readonly items: {};
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "overlap_period_id", "weekday", "duration_in_seconds"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly overlap_period_id: {
                    readonly type: "integer";
                };
                readonly weekday: {
                    readonly type: "string";
                };
                readonly start_at: {
                    readonly type: "string";
                };
                readonly duration_in_seconds: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesWorkScheduleOverlapPeriods: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["author", "schedule_id", "create_params"];
        readonly properties: {
            readonly author: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
            readonly schedule_id: {
                readonly type: "integer";
            };
            readonly create_params: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "default", "schedule_id", "start_month", "start_day", "end_month", "end_day", "schedule_type"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly default: {
                    readonly type: "boolean";
                };
                readonly schedule_id: {
                    readonly type: "integer";
                };
                readonly start_month: {
                    readonly type: "integer";
                };
                readonly start_day: {
                    readonly type: "integer";
                };
                readonly end_month: {
                    readonly type: "integer";
                };
                readonly end_day: {
                    readonly type: "integer";
                };
                readonly schedule_type: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesWorkScheduleSchedules: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name", "schedule_type"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly schedule_type: {
                readonly type: "string";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id", "created_at", "updated_at", "employee_ids", "periods"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly archived_at: {
                    readonly type: "string";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                };
                readonly employee_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly periods: {
                    readonly type: "array";
                    readonly items: {};
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PostApi20241001ResourcesWorkScheduleSchedulesToggleArchive: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "author"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly author: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id", "created_at", "updated_at", "employee_ids", "periods"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly archived_at: {
                    readonly type: "string";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                };
                readonly employee_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly periods: {
                    readonly type: "array";
                    readonly items: {};
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesApiPublicWebhookSubscriptionsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Identifier of the webhook subscription";
                readonly examples: readonly [1];
            };
            readonly target_url: {
                readonly type: "string";
                readonly description: "URL where the webhook payload will be sent";
                readonly examples: readonly ["https://webhook.site/"];
            };
            readonly subscription_type: {
                readonly type: "string";
                readonly description: "Type of the webhook subscription";
                readonly examples: readonly ["ats/job_posting/create"];
            };
            readonly name: {
                readonly type: "string";
                readonly description: "Name of the webhook subscription";
                readonly examples: readonly ["Webhook subscription of a job posting created"];
            };
            readonly challenge: {
                readonly type: "string";
                readonly description: "String to verify the subscription";
                readonly examples: readonly ["2bca4e6d-9aaf-4f11-9e5d"];
            };
            readonly enabled: {
                readonly type: "boolean";
                readonly description: "Boolean to enable/disable the subscription";
                readonly examples: readonly [true];
            };
            readonly api_version: {
                readonly type: "string";
                readonly description: "API version of the webhook subscription that determines the schema of the payload";
                readonly enum: readonly ["2024-10-01"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "target_url", "type", "enabled", "api_version"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the webhook subscription";
                    readonly examples: readonly [1];
                };
                readonly target_url: {
                    readonly type: "string";
                    readonly description: "URL where the webhook payload will be sent";
                    readonly examples: readonly ["https://webhook.site/"];
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the webhook subscription";
                    readonly examples: readonly ["ats/job_posting/create"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the webhook subscription";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the webhook subscription";
                    readonly examples: readonly ["Webhook subscription of a job posting created"];
                };
                readonly challenge: {
                    readonly type: "string";
                    readonly description: "String to verify the subscription";
                    readonly examples: readonly ["2bca4e6d-9aaf-4f11-9e5d"];
                };
                readonly enabled: {
                    readonly type: "boolean";
                    readonly description: "Boolean to enable/disable the subscription";
                    readonly examples: readonly [true];
                };
                readonly api_version: {
                    readonly type: "string";
                    readonly description: "API version of the webhook subscription that determines the schema of the payload";
                    readonly examples: readonly ["2024-10-01"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesAtsApplicationsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly author_id: {
                readonly type: "integer";
                readonly description: "Application author id";
                readonly examples: readonly [1];
            };
            readonly author_type: {
                readonly type: "string";
                readonly description: "Application author type";
                readonly enum: readonly ["company", "access", "user"];
                readonly examples: readonly ["Company"];
            };
            readonly id: {
                readonly type: "integer";
                readonly description: "Application id";
                readonly examples: readonly [1];
            };
            readonly qualified: {
                readonly type: "boolean";
                readonly description: "Application is qualified";
                readonly examples: readonly [true];
            };
            readonly ats_application_phase_id: {
                readonly type: "integer";
                readonly description: "Application phase id";
                readonly examples: readonly [1];
            };
            readonly disqualified_reason: {
                readonly type: "string";
                readonly description: "Application disqualified reason";
                readonly examples: readonly ["Unfit for the role"];
            };
            readonly phone: {
                readonly type: "string";
                readonly description: "Application candidate phone";
                readonly examples: readonly ["123321"];
            };
            readonly ats_rejection_reason_id: {
                readonly type: "integer";
                readonly description: "Application rejection reason id";
                readonly examples: readonly [1];
            };
            readonly source: {
                readonly type: "string";
                readonly description: "Application source";
                readonly examples: readonly ["source"];
            };
            readonly source_id: {
                readonly type: "integer";
                readonly description: "Application source id";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "ats_job_posting_id", "ats_candidate_id", "created_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Id of the application";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company id of the application";
                    readonly examples: readonly [1];
                };
                readonly ats_job_posting_id: {
                    readonly type: "integer";
                    readonly description: "Job posting id of the application";
                    readonly examples: readonly [1];
                };
                readonly ats_candidate_id: {
                    readonly type: "integer";
                    readonly description: "Candidate id of the application";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee id of the application";
                    readonly examples: readonly [1];
                };
                readonly phone: {
                    readonly type: "string";
                    readonly description: "Candidate phone of the application";
                    readonly examples: readonly ["123321"];
                };
                readonly qualified: {
                    readonly type: "boolean";
                    readonly description: "Qualified of the application";
                    readonly examples: readonly [true];
                };
                readonly ats_application_phase_id: {
                    readonly type: "integer";
                    readonly description: "Application phase id";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Application created at date";
                    readonly examples: readonly ["2024-08-19T14:30:00Z"];
                };
                readonly cover_letter: {
                    readonly type: "string";
                    readonly description: "Application cover letter";
                    readonly examples: readonly ["cover_letter"];
                };
                readonly ats_conversation_id: {
                    readonly type: "integer";
                    readonly description: "Application conversation id";
                    readonly examples: readonly [1];
                };
                readonly medium: {
                    readonly type: "string";
                    readonly description: "Application medium";
                    readonly examples: readonly ["medium"];
                };
                readonly rating_average: {
                    readonly type: "integer";
                    readonly description: "Application average rating";
                    readonly examples: readonly [1];
                };
                readonly ats_rejection_reason_id: {
                    readonly type: "integer";
                    readonly description: "Application rejection reason id";
                    readonly examples: readonly [1];
                };
                readonly source_id: {
                    readonly type: "integer";
                    readonly description: "Application source id";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesAtsCandidatesId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "identifier of the candidate.";
                readonly examples: readonly [1];
            };
            readonly email: {
                readonly type: "string";
                readonly description: "email of the candidate.";
                readonly examples: readonly ["ana@factorial.com"];
            };
            readonly first_name: {
                readonly type: "string";
                readonly description: "first name of the candidate.";
                readonly examples: readonly ["Ana"];
            };
            readonly last_name: {
                readonly type: "string";
                readonly description: "last name of the candidate.";
                readonly examples: readonly ["Fernandez Perez"];
            };
            readonly talent_pool: {
                readonly type: "boolean";
                readonly description: "is the candidate part of talent pool?";
                readonly examples: readonly [true];
            };
            readonly consent_given_at: {
                readonly type: "string";
                readonly description: "date when the consent was given.";
                readonly examples: readonly ["2021-01-01T00:00:00Z"];
            };
            readonly phone_number: {
                readonly type: "string";
                readonly description: "phone number of the candidate.";
                readonly examples: readonly [645786980];
            };
            readonly personal_url: {
                readonly type: "string";
                readonly description: "personal web resource from the candidate.";
                readonly examples: readonly ["https://anaperez.factorial.com"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "first_name", "last_name", "full_name", "talent_pool", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the candidate.";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "company identifier.";
                    readonly examples: readonly [1];
                };
                readonly first_name: {
                    readonly type: "string";
                    readonly description: "name of the candidate.";
                    readonly examples: readonly ["Ana"];
                };
                readonly last_name: {
                    readonly type: "string";
                    readonly description: "last name of the candidate.";
                    readonly examples: readonly ["Fernandez Perez"];
                };
                readonly full_name: {
                    readonly type: "string";
                    readonly description: "full name of the candidate.";
                    readonly examples: readonly ["Ana Fernandez Perez"];
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "email of the candidate.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly talent_pool: {
                    readonly type: "boolean";
                    readonly description: "is the candidate part of talent pool?";
                    readonly examples: readonly [true];
                };
                readonly phone_number: {
                    readonly type: "string";
                    readonly description: "phone number of the candidate.";
                    readonly examples: readonly [645786980];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "creation date of the candidate.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "last update of the candidate.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly consent_given_at: {
                    readonly type: "string";
                    readonly description: "date when the consent was given.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly inactive_since: {
                    readonly type: "string";
                    readonly description: "date when the candidate became inactive.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly ats_job_posting_ids: {
                    readonly type: "array";
                    readonly description: "list of job posting identifiers.";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                };
                readonly personal_url: {
                    readonly type: "string";
                    readonly description: "personal web resource from the candidate.";
                    readonly examples: readonly ["https://anaperez.factorial.com"];
                };
                readonly consent_expiration_date: {
                    readonly type: "string";
                    readonly description: "date when the consent expires.";
                    readonly examples: readonly ["2021-01-01T00:00:00Z"];
                };
                readonly consent_to_talent_pool: {
                    readonly type: "boolean";
                    readonly description: "consent to talent pool.";
                    readonly examples: readonly [true];
                };
                readonly medium: {
                    readonly type: "string";
                    readonly description: "specifies additional details related to the source of the candidate, such as the referrer name for example if the source is referred.";
                    readonly examples: readonly ["email"];
                };
                readonly source_id: {
                    readonly type: "integer";
                    readonly description: "candidate source identifier, refers to ats/candidate_sources endpoint.";
                    readonly examples: readonly [1];
                };
                readonly gender: {
                    readonly type: "string";
                    readonly description: "gender of the candidate.\n\n`female` `male` `unanswered` `other`";
                    readonly enum: readonly ["female", "male", "unanswered", "other"];
                    readonly examples: readonly ["female"];
                };
                readonly score: {
                    readonly type: "number";
                    readonly description: "score of the candidate.";
                    readonly examples: readonly [7];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesAtsFeedbacksId: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "the ID of the feedback entry to be updated.";
                readonly examples: readonly [1];
            };
            readonly rating: {
                readonly type: "integer";
                readonly description: "the overall rating from 1 to 5 for the candidate's application.";
                readonly examples: readonly [5];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "the description of the feedback provided.";
                readonly examples: readonly ["The candidate has a great attitude and is a good fit for the team."];
            };
            readonly ats_application_phase_id: {
                readonly type: "integer";
                readonly description: "the ID of the phase within the application related to the feedback.";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "created_at", "ats_candidate_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "the ID of the feedback entry.";
                    readonly examples: readonly [1];
                };
                readonly rating: {
                    readonly type: "integer";
                    readonly description: "the overall rating from 1 to 5 for the candidate's application.";
                    readonly examples: readonly [4];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "the description of the feedback provided.";
                    readonly examples: readonly ["The candidate has a great attitude and is a good fit for the team."];
                };
                readonly ats_application_id: {
                    readonly type: "integer";
                    readonly description: "the ID of the application related to the feedback.";
                    readonly examples: readonly [1];
                };
                readonly ats_application_phase_id: {
                    readonly type: "integer";
                    readonly description: "the ID of the phase within the application related to the feedback.";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "the date and time when the feedback entry was created.";
                    readonly examples: readonly ["2022-01-01T00:00:00Z"];
                };
                readonly ats_candidate_id: {
                    readonly type: "integer";
                    readonly description: "the ID of the candidate to whom the feedback is associated.";
                    readonly examples: readonly [1];
                };
                readonly ats_evaluation_forms_id: {
                    readonly type: "integer";
                    readonly description: "the ID of the evaluation form to which the feedback belongs if the evaluation forms feature is active.";
                    readonly examples: readonly [1];
                };
                readonly evaluation_form_answers: {
                    readonly type: "array";
                    readonly description: "the answers from the evaluation form, if this feedback is related to an evaluation form.";
                    readonly items: {};
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesAtsJobPostingsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly title: {
                readonly type: "string";
            };
            readonly description: {
                readonly type: "string";
            };
            readonly contract_type: {
                readonly type: "string";
            };
            readonly workplace_type: {
                readonly type: "string";
            };
            readonly status: {
                readonly type: "string";
                readonly enum: readonly ["draft", "published", "unlisted", "archived", "cancelled"];
            };
            readonly schedule_type: {
                readonly type: "string";
            };
            readonly team_id: {
                readonly type: "integer";
            };
            readonly location_id: {
                readonly type: "integer";
            };
            readonly salary_format: {
                readonly type: "string";
            };
            readonly salary_from_amount_in_cents: {
                readonly type: "integer";
            };
            readonly salary_to_amount_in_cents: {
                readonly type: "integer";
            };
            readonly cv_requirement: {
                readonly type: "string";
            };
            readonly cover_letter_requirement: {
                readonly type: "string";
            };
            readonly phone_requirement: {
                readonly type: "string";
            };
            readonly photo_requirement: {
                readonly type: "string";
            };
            readonly salary_period: {
                readonly type: "string";
                readonly enum: readonly ["annual", "monthly", "daily"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "ats_company_id", "title", "remote", "status", "cv_requirement", "cover_letter_requirement", "phone_requirement", "photo_requirement", "salary_period", "created_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the job posting";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly ats_company_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the ATS company associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "Title of the job posting";
                    readonly examples: readonly ["My job title"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Description of the job posting";
                    readonly examples: readonly ["My job description"];
                };
                readonly contract_type: {
                    readonly type: "string";
                };
                readonly workplace_type: {
                    readonly type: "string";
                };
                readonly remote: {
                    readonly type: "boolean";
                    readonly description: "Indicates if the job posting is remote";
                    readonly examples: readonly ["true"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The current status of the job posting (e.g., draft, published, archived)\n\n`draft` `published` `unlisted` `archived` `cancelled`";
                    readonly enum: readonly ["draft", "published", "unlisted", "archived", "cancelled"];
                    readonly examples: readonly ["draft"];
                };
                readonly schedule_type: {
                    readonly type: "string";
                    readonly description: "The schedule type of the job posting (e.g., full_time, part_time)";
                    readonly examples: readonly ["full_time"];
                };
                readonly team_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the team associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly location_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the location associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the legal entity associated with the job posting";
                    readonly examples: readonly ["1"];
                };
                readonly salary_format: {
                    readonly type: "string";
                    readonly description: "The format of the salary (e.g., range, fixed_amount)";
                    readonly examples: readonly ["range"];
                };
                readonly salary_from_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The minimum salary amount in cents";
                    readonly examples: readonly ["3000000"];
                };
                readonly salary_to_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The maximum salary amount in cents";
                    readonly examples: readonly ["5000000"];
                };
                readonly hide_salary: {
                    readonly type: "boolean";
                    readonly description: "Indicates whether the salary information for the job posting should be hidden from applicants.";
                    readonly examples: readonly ["true"];
                };
                readonly cv_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the CV (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["mandatory"];
                };
                readonly cover_letter_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the cover letter (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["optional"];
                };
                readonly phone_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the phone number (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["do_not_ask"];
                };
                readonly photo_requirement: {
                    readonly type: "string";
                    readonly description: "Requirement for the phone number (e.g, mandatory, optional, do_not_ask)";
                    readonly examples: readonly ["do_not_ask"];
                };
                readonly preview_token: {
                    readonly type: "string";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "If published, the public URL of the job posting. Otherwise will be null";
                    readonly examples: readonly ["https://my-factorial-domain/job_posting/job-title-slug"];
                };
                readonly salary_period: {
                    readonly type: "string";
                    readonly enum: readonly ["annual", "monthly", "daily"];
                    readonly description: "`annual` `monthly` `daily`";
                };
                readonly published_at: {
                    readonly type: "string";
                    readonly description: "Published date in ISO 8601 format of the job. If never been published the value will be null";
                    readonly examples: readonly ["Tue, 02 Jul 2024 08:28:00.000000000 UTC +00:00"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Date in ISO 8601 format when the job posting was created";
                    readonly examples: readonly ["Wed, 10 Jul 2024 13:30:02.000000000 UTC +00:00"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesAttendanceBreakConfigurationsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Id of the break configuration";
                readonly examples: readonly [1];
            };
            readonly enabled: {
                readonly type: "boolean";
                readonly description: "Status of the break configuration if enabled or not";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "attendance_employees_setting_id", "time_settings_break_configuration_id", "enabled"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly attendance_employees_setting_id: {
                    readonly type: "integer";
                    readonly description: "Id of the attendance employee setting";
                };
                readonly time_settings_break_configuration_id: {
                    readonly type: "integer";
                    readonly description: "Id of the time settings break configuration";
                };
                readonly enabled: {
                    readonly type: "boolean";
                    readonly description: "Status of the break configuration if enabled or not";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the break configuration";
                };
                readonly paid: {
                    readonly type: "boolean";
                    readonly description: "Check the break configuration is paid or not";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesAttendanceOvertimeRequestsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly date: {
                readonly type: "string";
            };
            readonly description: {
                readonly type: "string";
            };
            readonly hours_amount: {
                readonly type: "number";
            };
            readonly reason: {
                readonly type: "string";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "author_id", "status", "date", "hours_amount_in_cents", "approver", "is_editable"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly approver_id: {
                    readonly type: "integer";
                };
                readonly author_id: {
                    readonly type: "integer";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["pending", "approved", "rejected", "none"];
                    readonly description: "`pending` `approved` `rejected` `none`";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly reason: {
                    readonly type: "string";
                };
                readonly date: {
                    readonly type: "string";
                };
                readonly hours_amount_in_cents: {
                    readonly type: "integer";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly approver: {
                    readonly type: "boolean";
                };
                readonly approver_full_name: {
                    readonly type: "string";
                };
                readonly is_editable: {
                    readonly type: "boolean";
                    readonly description: "Defines if the overtime request can be edited";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesAttendanceShiftsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Id of the shift";
                readonly examples: readonly [1];
            };
            readonly clock_in: {
                readonly type: "string";
                readonly description: "Time of the clock in";
                readonly examples: readonly ["2024-01-01T12:12:01-02:00"];
            };
            readonly clock_out: {
                readonly type: "string";
                readonly description: "Time of the clock out";
                readonly examples: readonly ["2024-01-01T12:12:01-02:00"];
            };
            readonly date: {
                readonly type: "string";
                readonly description: "Date of the shift";
                readonly examples: readonly ["2024-01-01"];
            };
            readonly reference_date: {
                readonly type: "string";
                readonly description: "reference date of the shift";
                readonly examples: readonly ["2024-01-01"];
            };
            readonly observations: {
                readonly type: "string";
                readonly description: "Comments added to the shift";
                readonly examples: readonly ["This is an observation"];
            };
            readonly location_type: {
                readonly type: "string";
                readonly description: "Type of the location";
                readonly enum: readonly ["office", "business_trip", "work_from_home"];
                readonly examples: readonly ["office"];
            };
            readonly workplace_id: {
                readonly type: "integer";
                readonly description: "Id of the location related";
                readonly examples: readonly [1];
            };
            readonly time_settings_break_configuration_id: {
                readonly type: "integer";
                readonly description: "Id of the break configuration";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "date", "reference_date", "created_at", "company_id", "minutes"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the shift";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the employee assigned to the shift";
                    readonly examples: readonly [1];
                };
                readonly date: {
                    readonly type: "string";
                    readonly description: "Date of the shift";
                    readonly examples: readonly ["2023-10-01"];
                };
                readonly reference_date: {
                    readonly type: "string";
                    readonly description: "Reference date for the shift";
                    readonly examples: readonly ["2023-09-30"];
                };
                readonly clock_in: {
                    readonly type: "string";
                    readonly description: "Time when the employee clocked in";
                    readonly examples: readonly ["08:30"];
                };
                readonly clock_out: {
                    readonly type: "string";
                    readonly description: "Time when the employee clocked out";
                    readonly examples: readonly ["12:30"];
                };
                readonly in_source: {
                    readonly type: "string";
                    readonly description: "Source of the clock-in time";
                    readonly examples: readonly ["automatic"];
                };
                readonly out_source: {
                    readonly type: "string";
                    readonly description: "Source of the clock-out time";
                    readonly examples: readonly ["automatic"];
                };
                readonly observations: {
                    readonly type: "string";
                    readonly description: "Additional observations about the shift";
                    readonly examples: readonly ["Employee arrived late due to traffic"];
                };
                readonly location_type: {
                    readonly type: "string";
                    readonly description: "Type of location for the shift\n\n`office` `business_trip` `work_from_home`";
                    readonly enum: readonly ["office", "business_trip", "work_from_home"];
                    readonly examples: readonly ["office"];
                };
                readonly half_day: {
                    readonly type: "string";
                    readonly description: "Indicates which worked part of the day\n\n`beginning_of_day` `end_of_day`";
                    readonly enum: readonly ["beginning_of_day", "end_of_day"];
                    readonly examples: readonly ["beginning_of_day"];
                };
                readonly in_location_latitude: {
                    readonly type: "number";
                    readonly description: "Latitude of the clock-in location";
                    readonly examples: readonly [37.7749];
                };
                readonly in_location_longitude: {
                    readonly type: "number";
                    readonly description: "Longitude of the clock-in location";
                    readonly examples: readonly [-122.4194];
                };
                readonly in_location_accuracy: {
                    readonly type: "number";
                    readonly description: "Accuracy of the clock-in location";
                    readonly examples: readonly [5];
                };
                readonly out_location_latitude: {
                    readonly type: "number";
                    readonly description: "Latitude of the clock-out location";
                    readonly examples: readonly [37.7749];
                };
                readonly out_location_longitude: {
                    readonly type: "number";
                    readonly description: "Longitude of the clock-out location";
                    readonly examples: readonly [-122.4194];
                };
                readonly out_location_accuracy: {
                    readonly type: "number";
                    readonly description: "Accuracy of the clock-out location";
                    readonly examples: readonly [5.7];
                };
                readonly workable: {
                    readonly type: "boolean";
                    readonly description: "Indicates if the shift is workable";
                    readonly examples: readonly [true];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Timestamp when the shift record was created";
                    readonly examples: readonly ["2023-10-01T08:00:00Z"];
                };
                readonly workplace_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the location";
                    readonly examples: readonly [1];
                };
                readonly time_settings_break_configuration_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the break configuration";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Identifier for the company";
                    readonly examples: readonly [1];
                };
                readonly minutes: {
                    readonly type: "integer";
                    readonly description: "Number in minutes of the shift";
                    readonly examples: readonly [152];
                };
                readonly clock_in_with_seconds: {
                    readonly type: "string";
                    readonly description: "Clock in time with seconds";
                    readonly examples: readonly ["08:30:15"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesBookkeepersManagementIncidencesId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "incidence (aka employee update) identifier to update.";
                readonly examples: readonly [1];
            };
            readonly status: {
                readonly type: "string";
                readonly description: "status of the incidence (aka employee update). It can be any of 'in-preparation', 'to-do', 'doing', 'done', 'discarded'";
                readonly examples: readonly ["to-do"];
            };
            readonly has_message: {
                readonly type: "boolean";
                readonly description: "Boolean that indicates is the incidence (aka employee update) has message";
                readonly examples: readonly [true];
            };
            readonly message_from: {
                readonly type: "string";
            };
            readonly read_at: {
                readonly type: "string";
                readonly description: "Date in which the  incidence (aka employee update) was read";
                readonly examples: readonly ["2020-01-01"];
            };
            readonly mark_as_read: {
                readonly type: "boolean";
                readonly description: "Boolean that indicate if the incidence is read";
                readonly examples: readonly [true];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "legal_entity_id", "name", "target_id", "target_type", "status", "company_id", "created_at", "is_reopened"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the incidence (aka employee update).";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "identifier of employee related.";
                    readonly examples: readonly [1];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "identifier of legal entity related.";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "name of the incidence (aka employee update). It also represent the incidence type. For example a new hire incidence will be";
                    readonly examples: readonly ["hiring"];
                };
                readonly custom_name: {
                    readonly type: "string";
                };
                readonly target_id: {
                    readonly type: "integer";
                    readonly description: "The incidence (aka employee update) is also related to a another resource, for example for a leave target, the target identifier will be the leave id.";
                    readonly examples: readonly [1];
                };
                readonly target_type: {
                    readonly type: "string";
                    readonly description: "The incidence (aka employee update) is also related to a another resource, for example a leave. This is the target type. The other types are Employee, Contracts::ContractVersion, BookkeepersManagement::ManualIncidence, Finance::CostCenterMembership.";
                    readonly examples: readonly ["Timeoff::Leave"];
                };
                readonly starts_on: {
                    readonly type: "string";
                    readonly description: "The date the incidence (aka employee update) starts.";
                    readonly examples: readonly ["2020-01-01"];
                };
                readonly ends_on: {
                    readonly type: "string";
                    readonly description: "The date the incidence (aka employee update) end.";
                    readonly examples: readonly ["2020-01-01"];
                };
                readonly read_at: {
                    readonly type: "string";
                    readonly description: "The date the incidence (aka employee update) was read.";
                    readonly examples: readonly ["2020-01-01"];
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "identifier of company related.";
                    readonly examples: readonly [1];
                };
                readonly message_from: {
                    readonly type: "string";
                    readonly description: "Indicate the message sender on the incidence (aka employee update). It can be any of 'bookkeeper', 'admin'";
                    readonly examples: readonly ["admin"];
                };
                readonly has_message: {
                    readonly type: "boolean";
                    readonly description: "Boolean that indicates if the incidence (aka employee update) has unread messages.";
                    readonly examples: readonly [true];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "Date in which incidence (aka employee update) was created.";
                    readonly examples: readonly [true];
                };
                readonly is_reopened: {
                    readonly type: "boolean";
                    readonly description: "Boolean that indicates if the incidence (aka employee update) has been reopened.";
                    readonly examples: readonly [true];
                };
                readonly legal_entity_name: {
                    readonly type: "string";
                };
                readonly employee_first_name: {
                    readonly type: "string";
                };
                readonly employee_last_name: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesContractsCompensationsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["contracts_taxonomy_id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly contracts_taxonomy_id: {
                readonly type: "integer";
            };
            readonly description: {
                readonly type: "string";
            };
            readonly compensation_type: {
                readonly type: "string";
            };
            readonly amount: {
                readonly type: "integer";
            };
            readonly unit: {
                readonly type: "string";
            };
            readonly sync_with_supplements: {
                readonly type: "boolean";
            };
            readonly payroll_policy_id: {
                readonly type: "integer";
            };
            readonly recurrence_count: {
                readonly type: "integer";
            };
            readonly starts_on: {
                readonly type: "string";
            };
            readonly recurrence: {
                readonly type: "string";
            };
            readonly first_payment_on: {
                readonly type: "string";
            };
            readonly calculation: {
                readonly type: "string";
            };
            readonly time_condition: {
                readonly type: "string";
                readonly enum: readonly ["full_day", "half_day", "custom"];
            };
            readonly minimum_amount_of_hours: {
                readonly type: "integer";
            };
            readonly minimum_amount_of_hours_in_cents: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "contract_version_id", "contracts_taxonomy_id", "unit"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Compensation ID";
                    readonly examples: readonly [1];
                };
                readonly contract_version_id: {
                    readonly type: "integer";
                    readonly description: "Contract version ID";
                    readonly examples: readonly [1];
                };
                readonly contracts_taxonomy_id: {
                    readonly type: "integer";
                    readonly description: "Contracts taxonomy ID";
                    readonly examples: readonly [1];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Compensation description";
                    readonly examples: readonly ["Compensation for Meal"];
                };
                readonly compensation_type: {
                    readonly type: "string";
                    readonly description: "Required field. You can only use the following options: fixed, undefined, up_to, per_worked_day, per_worked_hour";
                    readonly examples: readonly ["fixed"];
                };
                readonly amount: {
                    readonly type: "integer";
                    readonly description: "Required field unless your compensation type is undefined";
                    readonly examples: readonly [1000];
                };
                readonly unit: {
                    readonly type: "string";
                    readonly description: "Unit of the compensation";
                    readonly examples: readonly ["Money"];
                };
                readonly sync_with_supplements: {
                    readonly type: "boolean";
                    readonly description: "Sync with supplements";
                };
                readonly payroll_policy_id: {
                    readonly type: "integer";
                    readonly description: "Payroll policy ID";
                    readonly examples: readonly [1];
                };
                readonly recurrence_count: {
                    readonly type: "integer";
                    readonly description: "Recurrence count";
                    readonly examples: readonly [1];
                };
                readonly starts_on: {
                    readonly type: "string";
                    readonly description: "When the compensation starts_on";
                    readonly examples: readonly ["2022-01-01"];
                };
                readonly recurrence: {
                    readonly type: "string";
                    readonly description: "Compensation recurrence";
                    readonly examples: readonly ["monthly"];
                };
                readonly first_payment_on: {
                    readonly type: "string";
                    readonly description: "When the first payment is done";
                    readonly examples: readonly ["2022-01-01"];
                };
                readonly calculation: {
                    readonly type: "string";
                    readonly description: "Compensation calculation";
                    readonly examples: readonly ["current period"];
                };
                readonly currency: {
                    readonly type: "string";
                };
                readonly time_condition: {
                    readonly type: "string";
                    readonly enum: readonly ["full_day", "half_day", "custom"];
                    readonly description: "`full_day` `half_day` `custom`";
                };
                readonly minimum_amount_of_hours: {
                    readonly type: "integer";
                };
                readonly minimum_amount_of_hours_in_cents: {
                    readonly type: "integer";
                    readonly description: "Compensation expected minimum amount of hours in cents";
                    readonly examples: readonly [1000];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesContractsContractVersionsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "contract version identifier.";
                readonly examples: readonly [1];
            };
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "employee identifier, refers to /employees/employees endpoint.";
                readonly examples: readonly [1];
            };
            readonly effective_on: {
                readonly type: "string";
                readonly description: "the day the specific contract starts, in case of hiring the same than starts_on.";
                readonly examples: readonly ["2024-10-06"];
            };
            readonly starts_on: {
                readonly type: "string";
                readonly description: "the day the employee is hired.";
                readonly examples: readonly ["2024-10-06"];
            };
            readonly ends_on: {
                readonly type: "string";
                readonly description: "the day the employee is terminated.";
                readonly examples: readonly ["2024-10-06"];
            };
            readonly working_hours_frequency: {
                readonly type: "string";
                readonly description: "the frequency of the working hours.";
                readonly examples: readonly ["week"];
            };
            readonly working_week_days: {
                readonly type: "string";
                readonly description: "the days of the week the employee works.";
                readonly examples: readonly ["monday,tuesday,wednesday,thursday,friday"];
            };
            readonly working_hours: {
                readonly type: "integer";
                readonly description: "the amount of hours the employee works.";
                readonly examples: readonly [40];
            };
            readonly salary_frequency: {
                readonly type: "string";
                readonly description: "the frequency of the salary payment.";
                readonly examples: readonly ["yearly"];
            };
            readonly salary_amount: {
                readonly type: "integer";
                readonly description: "the amount of money the employee earns.";
                readonly examples: readonly [40000];
            };
            readonly job_title: {
                readonly type: "string";
                readonly description: "job title of the employee.";
                readonly examples: readonly ["Designer"];
            };
            readonly es_cotization_group: {
                readonly type: "integer";
                readonly description: "cotization group identifier.";
                readonly examples: readonly [1];
            };
            readonly es_professional_category_id: {
                readonly type: "integer";
                readonly description: "professional category identifier.";
                readonly examples: readonly [1];
            };
            readonly es_education_level_id: {
                readonly type: "integer";
                readonly description: "education level identifier.";
                readonly examples: readonly [1];
            };
            readonly es_contract_type_id: {
                readonly type: "integer";
                readonly description: "contract type identifier.";
                readonly examples: readonly [1];
            };
            readonly es_working_day_type_id: {
                readonly type: "integer";
                readonly description: "working day type identifier.";
                readonly examples: readonly [1];
            };
            readonly has_trial_period: {
                readonly type: "boolean";
                readonly description: "a flag that indicates if the employee has a trial period.";
                readonly examples: readonly [true];
            };
            readonly trial_period_ends_on: {
                readonly type: "string";
                readonly description: "when the trial period ends.";
                readonly examples: readonly ["2024-10-06"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["company_id", "employee_id", "effective_on", "has_payroll", "created_at", "updated_at", "fr_forfait_jours"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier for the contract version.";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "identifier for company.";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "employee identifier, refers to /employees/employees endpoint.";
                    readonly examples: readonly [1];
                };
                readonly effective_on: {
                    readonly type: "string";
                    readonly description: "the day the specific contract starts, in case of hiring the same than starts_on.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly job_title: {
                    readonly type: "string";
                    readonly description: "job title of the employee.";
                    readonly examples: readonly ["Designer"];
                };
                readonly job_catalog_level: {
                    readonly type: "string";
                    readonly description: "the level of the employee in the job catalog.";
                    readonly examples: readonly ["Senior Designer"];
                };
                readonly job_catalog_role: {
                    readonly type: "string";
                    readonly description: "the role of the employee in the job catalog.";
                    readonly examples: readonly ["Designer"];
                };
                readonly starts_on: {
                    readonly type: "string";
                    readonly description: "the day the employee is hired.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly ends_on: {
                    readonly type: "string";
                    readonly description: "the day the employee is terminated.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly has_payroll: {
                    readonly type: "boolean";
                    readonly description: "boolean that indicates if the employee asociated to this contract belongs to a payroll policy.";
                    readonly examples: readonly [true];
                };
                readonly has_trial_period: {
                    readonly type: "boolean";
                    readonly description: "a flag that indicates if the employee has a trial period.";
                    readonly examples: readonly [true];
                };
                readonly trial_period_ends_on: {
                    readonly type: "string";
                    readonly description: "when the trial period ends.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly salary_amount: {
                    readonly type: "integer";
                    readonly description: "the amount of money the employee earns.";
                    readonly examples: readonly [1000];
                };
                readonly salary_frequency: {
                    readonly type: "string";
                    readonly description: "the frequency of the salary payment.";
                    readonly examples: readonly ["yearly"];
                };
                readonly working_week_days: {
                    readonly type: "string";
                    readonly description: "the days of the week the employee works.";
                    readonly examples: readonly ["monday,tuesday,wednesday,thursday,friday"];
                };
                readonly working_hours: {
                    readonly type: "integer";
                    readonly description: "the amount of hours the employee works.";
                    readonly examples: readonly [40];
                };
                readonly working_hours_frequency: {
                    readonly type: "string";
                    readonly description: "the frequency of the working hours.";
                    readonly examples: readonly ["week"];
                };
                readonly max_legal_yearly_hours: {
                    readonly type: "integer";
                    readonly description: "the maximum amount of hours the employee can work in a year.";
                    readonly examples: readonly [2000];
                };
                readonly maximum_weekly_hours: {
                    readonly type: "integer";
                    readonly description: "the maximum amount of hours the employee can work in a week.";
                    readonly examples: readonly [40];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "the date the contract version was created.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "the date of the last contract version updated.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly es_has_teleworking_contract: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the contract has teleworking.";
                    readonly examples: readonly [true];
                };
                readonly es_cotization_group: {
                    readonly type: "integer";
                    readonly description: "the group of cotization of the employee.";
                    readonly examples: readonly [1];
                };
                readonly es_contract_observations: {
                    readonly type: "string";
                    readonly description: "observations of the contract.";
                    readonly examples: readonly ["review contract for job promotion"];
                };
                readonly es_job_description: {
                    readonly type: "string";
                    readonly description: "the job description of the employee.";
                    readonly examples: readonly ["Designer"];
                };
                readonly es_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "contract type identifier.";
                    readonly examples: readonly [1];
                };
                readonly es_working_day_type_id: {
                    readonly type: "integer";
                    readonly description: "working day type identifier.";
                    readonly examples: readonly [1];
                };
                readonly es_education_level_id: {
                    readonly type: "integer";
                    readonly description: "education level identifier.";
                    readonly examples: readonly [1];
                };
                readonly es_professional_category_id: {
                    readonly type: "integer";
                    readonly description: "professional category identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_employee_type: {
                    readonly type: "string";
                    readonly description: "employee type.";
                    readonly examples: readonly ["apprenti"];
                };
                readonly fr_forfait_jours: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the employee is allowed to work within the framework of a fixed number of days.";
                    readonly examples: readonly [true];
                };
                readonly fr_jours_par_an: {
                    readonly type: "integer";
                    readonly description: "the number of days the employee is allowed to work.";
                    readonly examples: readonly [200];
                };
                readonly fr_coefficient: {
                    readonly type: "string";
                };
                readonly fr_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "contract type identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_level_id: {
                    readonly type: "integer";
                    readonly description: "level identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_step_id: {
                    readonly type: "integer";
                    readonly description: "step identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_mutual_id: {
                    readonly type: "integer";
                    readonly description: "mutual identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_professional_category_id: {
                    readonly type: "integer";
                    readonly description: "professional category identifier.";
                    readonly examples: readonly [1];
                };
                readonly fr_work_type_id: {
                    readonly type: "integer";
                    readonly description: "work type identifier.";
                    readonly examples: readonly [1];
                };
                readonly de_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "contract type identifier.";
                    readonly examples: readonly [1];
                };
                readonly pt_contract_type_id: {
                    readonly type: "integer";
                    readonly description: "contract type identifier.";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesCustomFieldsValuesId: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly value: {
                readonly type: "string";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "custom_field_identifier", "valuable_id", "field_id", "valuable_type"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the custom field value";
                    readonly examples: readonly [1];
                };
                readonly value: {
                    readonly type: "boolean";
                    readonly description: "Custom Fields value";
                    readonly examples: readonly ["This is an example value for a custom field"];
                };
                readonly long_text_value: {
                    readonly type: "string";
                    readonly description: "Custom field text value";
                    readonly examples: readonly ["The value of a text custom field"];
                };
                readonly custom_field_identifier: {
                    readonly type: "string";
                };
                readonly date_value: {
                    readonly type: "string";
                    readonly description: "Custom field date value";
                    readonly examples: readonly ["2022-01-01"];
                };
                readonly single_choice_value: {
                    readonly type: "string";
                    readonly description: "Custom field single choice value";
                    readonly examples: readonly ["Option 1"];
                };
                readonly cents_value: {
                    readonly type: "integer";
                    readonly description: "Custom field number value";
                    readonly examples: readonly [100];
                };
                readonly valuable_id: {
                    readonly type: "integer";
                };
                readonly field_id: {
                    readonly type: "integer";
                };
                readonly valuable_type: {
                    readonly type: "string";
                };
                readonly label: {
                    readonly type: "string";
                };
                readonly required: {
                    readonly type: "boolean";
                };
                readonly usage_group_id: {
                    readonly type: "integer";
                };
                readonly usage_group_slug: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesDocumentsDocumentsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "public", "request_esignature", "signee_ids"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "document identifiers.";
                readonly examples: readonly [1];
            };
            readonly public: {
                readonly type: "boolean";
                readonly description: "flag to indicate if the document is public.";
                readonly examples: readonly [true];
            };
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "employee identifier associated to the document.";
                readonly examples: readonly [1];
            };
            readonly folder_id: {
                readonly type: "integer";
                readonly description: "folder identifier, references to documents/folders endpoint.";
                readonly examples: readonly [1];
            };
            readonly request_esignature: {
                readonly type: "boolean";
                readonly description: "flag to indicate if the document requires an electronic signature.";
                readonly examples: readonly [true];
            };
            readonly signee_ids: {
                readonly type: "array";
                readonly description: "list of user access identifiers associated to the document, refers to /employees/employees endpoint.";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["created_at", "filename", "id", "public", "space", "updated_at"];
            readonly properties: {
                readonly author_id: {
                    readonly type: "integer";
                    readonly description: "access identifier of the author, refers to /employees/employees endpoint.";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "company identifier, refers to /api/me endpoint.";
                    readonly examples: readonly [1];
                };
                readonly content_type: {
                    readonly type: "string";
                    readonly description: "document content type.";
                    readonly examples: readonly ["application/pdf"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "creation date of the document.";
                    readonly examples: readonly ["2020-01-01T00:00:00Z"];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "employee identifier associated to the document.";
                    readonly examples: readonly [1];
                };
                readonly extension: {
                    readonly type: "string";
                    readonly description: "document extension.";
                    readonly examples: readonly ["pdf"];
                };
                readonly file_size: {
                    readonly type: "integer";
                    readonly description: "document file size in bytes.";
                    readonly examples: readonly [1024];
                };
                readonly file: {
                    readonly type: "string";
                    readonly description: "url of the document for download it.";
                    readonly examples: readonly ["/documents/60"];
                };
                readonly filename: {
                    readonly type: "string";
                    readonly description: "name of the document.";
                    readonly examples: readonly ["document.pdf"];
                };
                readonly folder_id: {
                    readonly type: "integer";
                    readonly description: "folder identifier, references to documents/folders endpoint.";
                    readonly examples: readonly [1];
                };
                readonly id: {
                    readonly type: "integer";
                    readonly description: "document identifier.";
                    readonly examples: readonly [1];
                };
                readonly is_company_document: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the document is a company document.";
                    readonly examples: readonly [true];
                };
                readonly is_management_document: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the document is a management document.";
                    readonly examples: readonly [true];
                };
                readonly is_pending_assignment: {
                    readonly type: "boolean";
                    readonly description: "flag that indicates if the document is pending assignment.";
                    readonly examples: readonly [true];
                };
                readonly leave_id: {
                    readonly type: "integer";
                    readonly description: "leave identifier associated to the document, refers to /timeoff/leaves endpoint.";
                    readonly examples: readonly [1];
                };
                readonly public: {
                    readonly type: "boolean";
                    readonly description: "flag to indicate if the document is public.";
                    readonly examples: readonly [true];
                };
                readonly signature_status: {
                    readonly type: "string";
                    readonly description: "document signature status.\n\n`pending` `partially_signed` `declined` `completed` `bounced_email` `cancelled` `error`";
                    readonly enum: readonly ["pending", "partially_signed", "declined", "completed", "bounced_email", "cancelled", "error"];
                    readonly examples: readonly ["pending"];
                };
                readonly signees: {
                    readonly type: "array";
                    readonly description: "list of signee access identifiers associated to the document, refers to /employees/employees endpoint.";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly space: {
                    readonly type: "string";
                    readonly description: "document space.";
                    readonly examples: readonly ["company_public"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "last update date of the document.";
                    readonly examples: readonly ["2020-01-01T00:00:00Z"];
                };
                readonly deleted_at: {
                    readonly type: "string";
                    readonly description: "deletion date of the document.";
                    readonly examples: readonly ["2020-01-01T00:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesDocumentsFoldersId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["company_id", "id", "name"];
        readonly properties: {
            readonly company_id: {
                readonly type: "integer";
                readonly description: "Company ID";
                readonly examples: readonly [1];
            };
            readonly id: {
                readonly type: "integer";
                readonly description: "Folder id";
                readonly examples: readonly [3];
            };
            readonly name: {
                readonly type: "string";
                readonly description: "Folder name";
                readonly examples: readonly ["New folder name"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["active", "id", "name"];
            readonly properties: {
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "Whether the folder is active or not";
                    readonly examples: readonly [true];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company ID of the folder";
                    readonly examples: readonly [1];
                };
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Folder ID";
                    readonly examples: readonly [10];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Folder name";
                    readonly examples: readonly ["Payslips"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesEmployeesEmployeesId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "id of the employee.";
                readonly examples: readonly [1];
            };
            readonly access_id: {
                readonly type: "integer";
                readonly description: "access_id of the creator.";
                readonly examples: readonly [1];
            };
            readonly gender: {
                readonly type: "string";
                readonly description: "gender of the employee (male | female).";
                readonly examples: readonly ["female"];
            };
            readonly first_name: {
                readonly type: "string";
                readonly description: "name of the employee.";
                readonly examples: readonly ["Ana"];
            };
            readonly last_name: {
                readonly type: "string";
                readonly description: "last name of the employee.";
                readonly examples: readonly ["Blanco Perez"];
            };
            readonly identifier: {
                readonly type: "string";
                readonly description: "national identifier number.";
                readonly examples: readonly ["QKG587532Y"];
            };
            readonly identifier_type: {
                readonly type: "string";
                readonly description: "type of identifier (ex passport).";
                readonly examples: readonly ["passport"];
            };
            readonly birthday_on: {
                readonly type: "string";
                readonly description: "birthday of the employee.";
                readonly examples: readonly ["1990-06-06"];
            };
            readonly nationality: {
                readonly type: "string";
                readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                readonly examples: readonly ["ES"];
            };
            readonly address_line_1: {
                readonly type: "string";
                readonly description: "address of the employee.";
                readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
            };
            readonly address_line_2: {
                readonly type: "string";
                readonly description: "address of the employee.";
                readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
            };
            readonly postal_code: {
                readonly type: "string";
                readonly description: "postal code of the employee.";
                readonly examples: readonly [27004];
            };
            readonly city: {
                readonly type: "string";
                readonly description: "city of the employee.";
                readonly examples: readonly ["Santander"];
            };
            readonly state: {
                readonly type: "string";
                readonly description: "state/province/region of the employee.";
                readonly examples: readonly ["Cataluña"];
            };
            readonly country: {
                readonly type: "string";
                readonly description: "country code of the employee (Spain ES, United Kingdom GB).";
                readonly examples: readonly ["ES"];
            };
            readonly bank_number: {
                readonly type: "string";
                readonly description: "bank account number of the employee.";
                readonly examples: readonly ["ES6220809324751871912999"];
            };
            readonly swift_bic: {
                readonly type: "string";
                readonly description: "code to identify banks and financial institutions globally.";
                readonly examples: readonly ["CAGLES2M510"];
            };
            readonly manager_id: {
                readonly type: "integer";
                readonly description: "id of manager, you can get the manager_id from employees endpoint.";
                readonly examples: readonly [1];
            };
            readonly timeoff_manager_id: {
                readonly type: "integer";
                readonly description: "id of manager, you can get the manager_id from employees endpoint.";
                readonly examples: readonly [1];
            };
            readonly social_security_number: {
                readonly type: "string";
                readonly description: "social security number of the employee.";
                readonly examples: readonly [238038194000];
            };
            readonly has_work_permit: {
                readonly type: "boolean";
                readonly description: "does the employee have work permit?";
                readonly examples: readonly [true];
            };
            readonly phone_number: {
                readonly type: "string";
                readonly description: "phone number of the employee.";
                readonly examples: readonly [657483987];
            };
            readonly company_identifier: {
                readonly type: "string";
                readonly description: "identity number or string used inside a company to internally identify the employee.";
                readonly examples: readonly ["bb9d281e"];
            };
            readonly legal_entity_id: {
                readonly type: "integer";
                readonly description: "legal entity of the employee, references to companies/legal_entities.";
                readonly examples: readonly [1];
            };
            readonly location_id: {
                readonly type: "integer";
                readonly description: "location id of the employee, references to locations/locations.";
                readonly examples: readonly [1];
            };
            readonly preferred_name: {
                readonly type: "string";
                readonly description: "nickname of the employee or a name that defines the employee better.";
                readonly examples: readonly ["Anita"];
            };
            readonly pronouns: {
                readonly type: "string";
                readonly description: "pronouns that an employee uses to define themselves.";
                readonly examples: readonly ["She/Her"];
            };
            readonly contact_name: {
                readonly type: "string";
                readonly description: "name of the employee contact.";
                readonly examples: readonly ["Laura Delgado"];
            };
            readonly contact_number: {
                readonly type: "string";
                readonly description: "phone number of the employee contact .";
                readonly examples: readonly [657482908];
            };
            readonly personal_email: {
                readonly type: "string";
                readonly description: "personal email of the employee.";
                readonly examples: readonly ["ana@factorial.com"];
            };
            readonly disability_percentage_cents: {
                readonly type: "integer";
                readonly description: "officially certified level of disability granted by public administration for individuals with physical or mental impairments, expressed in cents";
                readonly examples: readonly [1200];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "access_id", "first_name", "last_name", "full_name", "company_id", "created_at", "updated_at", "is_terminating"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "id of the employee.";
                    readonly examples: readonly [1];
                };
                readonly access_id: {
                    readonly type: "integer";
                    readonly description: "access_id associated to the employee.";
                    readonly examples: readonly [1];
                };
                readonly first_name: {
                    readonly type: "string";
                    readonly description: "name of the employee.";
                    readonly examples: readonly ["Ana"];
                };
                readonly last_name: {
                    readonly type: "string";
                    readonly description: "last name of the employee.";
                    readonly examples: readonly ["Blanco Perez"];
                };
                readonly full_name: {
                    readonly type: "string";
                    readonly description: "full name of the employee.";
                    readonly examples: readonly ["Ana Blanco Perez"];
                };
                readonly preferred_name: {
                    readonly type: "string";
                    readonly description: "nickname of the employee or a name that defines the employee better.";
                    readonly examples: readonly ["Anita"];
                };
                readonly birth_name: {
                    readonly type: "string";
                    readonly description: "Birthname of the employee.";
                    readonly examples: readonly ["Anna"];
                };
                readonly gender: {
                    readonly type: "string";
                    readonly description: "gender of the employee (male | female).";
                    readonly examples: readonly ["female"];
                };
                readonly identifier: {
                    readonly type: "string";
                    readonly description: "national identifier number.";
                    readonly examples: readonly ["QKG587532Y"];
                };
                readonly identifier_type: {
                    readonly type: "string";
                    readonly description: "type of identifier (ex passport).";
                    readonly examples: readonly ["passport"];
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "personal email of the employee.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly login_email: {
                    readonly type: "string";
                    readonly description: "email associated to the session.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly birthday_on: {
                    readonly type: "string";
                    readonly description: "birthday of the employee.";
                    readonly examples: readonly ["1990-06-06"];
                };
                readonly nationality: {
                    readonly type: "string";
                    readonly description: "nationality country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly address_line_1: {
                    readonly type: "string";
                    readonly description: "address of the employee.";
                    readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                };
                readonly address_line_2: {
                    readonly type: "string";
                    readonly description: "secondary address of the employee.";
                    readonly examples: readonly ["Calle Rosalía de Castro 10, 1º 1ª"];
                };
                readonly postal_code: {
                    readonly type: "string";
                    readonly description: "postal code of the employee.";
                    readonly examples: readonly [27004];
                };
                readonly city: {
                    readonly type: "string";
                    readonly description: "city of the employee.";
                    readonly examples: readonly ["Santander"];
                };
                readonly state: {
                    readonly type: "string";
                    readonly description: "state/province/region of the employee.";
                    readonly examples: readonly ["Cantabria"];
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "country code of the employee (Spain ES, United Kingdom GB).";
                    readonly examples: readonly ["ES"];
                };
                readonly bank_number: {
                    readonly type: "string";
                    readonly description: "bank account number of the employee.";
                    readonly examples: readonly ["ES6220809324751871912999"];
                };
                readonly swift_bic: {
                    readonly type: "string";
                    readonly description: "code to identify banks and financial institutions globally.";
                    readonly examples: readonly ["CAGLES2M510"];
                };
                readonly bank_number_format: {
                    readonly type: "string";
                    readonly description: "bank number format.\n\n`iban` `sort_code_and_account_number` `routing_number_and_account_number` `clabe` `other` `bank_name_and_account_number`";
                    readonly enum: readonly ["iban", "sort_code_and_account_number", "routing_number_and_account_number", "clabe", "other", "bank_name_and_account_number"];
                    readonly examples: readonly ["iban"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "id of the company to which the employee belongs (not editable).";
                    readonly examples: readonly [1];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "legal entity of the employee, references to companies/legal_entities.";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "creation date of the employee.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "date of last modification of the employee";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly social_security_number: {
                    readonly type: "string";
                    readonly description: "social security number of the employee.";
                    readonly examples: readonly [238038194000];
                };
                readonly is_terminating: {
                    readonly type: "boolean";
                    readonly description: "is the employee being terminated?";
                };
                readonly terminated_on: {
                    readonly type: "string";
                    readonly description: "termination date of the employee.";
                    readonly examples: readonly ["2024-10-06"];
                };
                readonly termination_reason: {
                    readonly type: "string";
                    readonly description: "A reason for the termination.";
                    readonly examples: readonly ["The employee has left the company"];
                };
                readonly termination_observations: {
                    readonly type: "string";
                    readonly description: "observations about the termination.";
                    readonly examples: readonly ["Ana has been working on this project before she left"];
                };
                readonly manager_id: {
                    readonly type: "integer";
                    readonly description: "manager id of the employee, you can get the manager id from employees endpoint.";
                    readonly examples: readonly [1];
                };
                readonly timeoff_manager_id: {
                    readonly type: "integer";
                    readonly description: "Timeoff manager id of the employee.";
                    readonly examples: readonly [1];
                };
                readonly phone_number: {
                    readonly type: "string";
                    readonly description: "phone number of the employee.";
                    readonly examples: readonly [657483987];
                };
                readonly company_identifier: {
                    readonly type: "string";
                    readonly description: "identity number or string used inside a company to internally identify the employee.";
                    readonly examples: readonly ["bb9d281e"];
                };
                readonly age_number: {
                    readonly type: "integer";
                    readonly description: "age of the employee.";
                    readonly examples: readonly [30];
                };
                readonly contact_name: {
                    readonly type: "string";
                    readonly description: "name of the employee contact.";
                    readonly examples: readonly ["Laura Delgado"];
                };
                readonly contact_number: {
                    readonly type: "string";
                    readonly description: "phone number of the employee contact .";
                    readonly examples: readonly [647384950];
                };
                readonly personal_email: {
                    readonly type: "string";
                    readonly description: "personal email of the employee.";
                    readonly examples: readonly ["ana@factorial.com"];
                };
                readonly pronouns: {
                    readonly type: "string";
                    readonly description: "pronouns that an employee uses to define themselves.";
                    readonly examples: readonly ["She/Her"];
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "status of the employee, true when active, false when terminated.";
                    readonly examples: readonly [true];
                };
                readonly disability_percentage_cents: {
                    readonly type: "integer";
                    readonly description: "officially certified level of disability granted by public administration for individuals with physical or mental impairments, expressed in cents";
                    readonly examples: readonly [1200];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesLocationsLocationsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly name: {
                readonly type: "string";
            };
            readonly country: {
                readonly type: "string";
            };
            readonly main: {
                readonly type: "boolean";
            };
            readonly city: {
                readonly type: "string";
            };
            readonly state: {
                readonly type: "string";
            };
            readonly phone_number: {
                readonly type: "string";
            };
            readonly postal_code: {
                readonly type: "string";
            };
            readonly address_line_one: {
                readonly type: "string";
            };
            readonly address_line_two: {
                readonly type: "string";
            };
            readonly timezone: {
                readonly type: "string";
            };
            readonly latitude: {
                readonly type: "number";
            };
            readonly longitude: {
                readonly type: "number";
            };
            readonly radius: {
                readonly type: "number";
            };
            readonly siret: {
                readonly type: "string";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "name", "main"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly timezone: {
                    readonly type: "string";
                };
                readonly country: {
                    readonly type: "string";
                };
                readonly state: {
                    readonly type: "string";
                };
                readonly city: {
                    readonly type: "string";
                };
                readonly address_line_1: {
                    readonly type: "string";
                };
                readonly address_line_2: {
                    readonly type: "string";
                };
                readonly postal_code: {
                    readonly type: "string";
                };
                readonly phone_number: {
                    readonly type: "string";
                };
                readonly main: {
                    readonly type: "boolean";
                };
                readonly latitude: {
                    readonly type: "number";
                };
                readonly longitude: {
                    readonly type: "number";
                };
                readonly radius: {
                    readonly type: "number";
                };
                readonly siret: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesLocationsWorkAreasId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "name"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly name: {
                readonly type: "string";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "location_id", "name"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly location_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly archived_at: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesPayrollEmployeesIdentifiersId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "country"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "payroll employee identifier";
                readonly examples: readonly [1];
            };
            readonly social_security_number: {
                readonly type: "string";
                readonly description: "social security number of the employee";
                readonly examples: readonly [123456788];
            };
            readonly tax_id: {
                readonly type: "string";
                readonly description: "tax id of the employee";
                readonly examples: readonly [123456789];
            };
            readonly country: {
                readonly type: "string";
                readonly description: "country code of the employee pt | it | de";
                readonly enum: readonly ["pt", "de", "it"];
                readonly examples: readonly ["it"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "country"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "payroll employee identifier";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "identifier of the employee";
                    readonly examples: readonly [1];
                };
                readonly social_security_number: {
                    readonly type: "string";
                    readonly description: "social security number of the employee";
                    readonly examples: readonly [123456788];
                };
                readonly tax_id: {
                    readonly type: "string";
                    readonly description: "tax id of the employee";
                    readonly examples: readonly [123456789];
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "country code of the employee pt | it | de\n\n`pt` `de` `it`";
                    readonly enum: readonly ["pt", "de", "it"];
                    readonly examples: readonly ["it"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesPayrollFamilySituationsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "employee_id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Family situation id.";
                readonly examples: readonly [3];
            };
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "Employee id.";
                readonly examples: readonly [10];
            };
            readonly civil_status: {
                readonly type: "string";
                readonly description: "Civil status of the employee.";
                readonly enum: readonly ["single", "cohabitating", "divorced", "married", "unknown", "civil_partnership", "separated", "widow", "not_applicable"];
                readonly examples: readonly ["married"];
            };
            readonly number_of_dependants: {
                readonly type: "integer";
                readonly description: "Number of dependants of the employee.";
                readonly examples: readonly [2];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "ID of the family situation.";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee id of the family situation.";
                    readonly examples: readonly [5];
                };
                readonly civil_status: {
                    readonly type: "string";
                    readonly description: "Civil status of the employee.\n\n`single` `cohabitating` `divorced` `married` `unknown` `civil_partnership` `separated` `widow` `not_applicable`";
                    readonly enum: readonly ["single", "cohabitating", "divorced", "married", "unknown", "civil_partnership", "separated", "widow", "not_applicable"];
                    readonly examples: readonly ["married"];
                };
                readonly number_of_dependants: {
                    readonly type: "integer";
                    readonly description: "Number of dependants of the employee.";
                    readonly examples: readonly [2];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesPayrollIntegrationsBaseCodesId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "code"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Code identifier";
                readonly examples: readonly [1];
            };
            readonly code: {
                readonly type: "string";
                readonly description: "Code Value";
                readonly examples: readonly ["COD-51"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "code", "codeable_id", "codeable_type", "integration"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Code identifier";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company ID where the code belongs to";
                    readonly examples: readonly [2];
                };
                readonly code: {
                    readonly type: "string";
                    readonly description: "Code value";
                    readonly examples: readonly ["COD-51"];
                };
                readonly codeable_id: {
                    readonly type: "integer";
                    readonly description: "Related object ID. Used together with codeable_type";
                    readonly examples: readonly [5];
                };
                readonly codeable_type: {
                    readonly type: "string";
                    readonly description: "Related object type. Used together with codeable_id";
                    readonly examples: readonly ["Employee | Company | LegalEntity | Location | TimeoffLeaveType"];
                };
                readonly integration: {
                    readonly type: "string";
                    readonly description: "Integration name\n\n`a3innuva` `a3nom` `paierh` `silae` `silae_api` `datev` `datev_api` `datev_lug_api` `zucchetti`";
                    readonly enum: readonly ["a3innuva", "a3nom", "paierh", "silae", "silae_api", "datev", "datev_api", "datev_lug_api", "zucchetti"];
                    readonly examples: readonly ["a3innuva"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesPayrollSupplementsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "The supplement id";
                readonly examples: readonly [1];
            };
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "The employee id of the supplement";
                readonly examples: readonly [1];
            };
            readonly contracts_compensation_id: {
                readonly type: "integer";
                readonly description: "The supplement contract compensation id";
                readonly examples: readonly [1];
            };
            readonly contracts_taxonomy_id: {
                readonly type: "integer";
                readonly description: "The supplement contract taxonomy id";
                readonly examples: readonly [2];
            };
            readonly amount_in_cents: {
                readonly type: "integer";
                readonly description: "Supplement amount in cents";
                readonly examples: readonly [50000];
            };
            readonly effective_on: {
                readonly type: "string";
                readonly description: "Supplement effective on date following the format YYYY-MM-DD";
                readonly examples: readonly ["2024-01-01"];
            };
            readonly unit: {
                readonly type: "string";
                readonly description: "Supplement unit";
                readonly examples: readonly ["usd"];
            };
            readonly payroll_policy_period_id: {
                readonly type: "integer";
                readonly description: "Supplement payroll policy period  id";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "company_id", "unit"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "The identifier of the supplement";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "The identifier of the employee associated with the supplement";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "The identifier of the company associated with the supplement";
                    readonly examples: readonly [1];
                };
                readonly contracts_compensation_id: {
                    readonly type: "integer";
                    readonly description: "The contract compensation identifier associated with the supplement";
                    readonly examples: readonly [1];
                };
                readonly contracts_taxonomy_id: {
                    readonly type: "integer";
                    readonly description: "The taxonomy identifier associated with the supplement";
                    readonly examples: readonly [1];
                };
                readonly amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The amount of the supplement in cents";
                    readonly examples: readonly [10000];
                };
                readonly unit: {
                    readonly type: "string";
                    readonly description: "The unit of the supplement\n\n`money` `units` `time`";
                    readonly enum: readonly ["money", "units", "time"];
                    readonly examples: readonly ["hours"];
                };
                readonly effective_on: {
                    readonly type: "string";
                    readonly description: "The date on which the supplement becomes effective";
                    readonly examples: readonly ["2024-01-01"];
                };
                readonly created_at: {
                    readonly type: "boolean";
                    readonly description: "The created at date when the supplement was created";
                    readonly examples: readonly ["2024-01-01T12:00:00Z"];
                };
                readonly updated_at: {
                    readonly type: "boolean";
                    readonly description: "The last updated at date when the supplement was last updated";
                    readonly examples: readonly ["2024-01-05T12:00:00Z"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The description of the supplement";
                    readonly examples: readonly ["Supplement for additional work hours"];
                };
                readonly payroll_policy_period_id: {
                    readonly type: "integer";
                    readonly description: "The payroll policy period identifier associated with the supplement";
                    readonly examples: readonly [23456];
                };
                readonly employee_observations: {
                    readonly type: "array";
                    readonly description: "Observations on the employee made by the admin or manager";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["Worked extra shifts", "Bonus for holiday work"];
                };
                readonly raw_minutes_in_cents: {
                    readonly type: "integer";
                    readonly description: "The raw value of minutes in cents associated with the supplement";
                    readonly examples: readonly [5000];
                };
                readonly minutes_in_cents: {
                    readonly type: "integer";
                    readonly description: "The value of minutes in cents after adjustments";
                    readonly examples: readonly [4800];
                };
                readonly equivalent_minutes_in_cents: {
                    readonly type: "integer";
                    readonly description: "The equivalent value of minutes in cents for payroll processing";
                    readonly examples: readonly [4600];
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "The currency used for the supplement, typically in ISO 4217 format";
                    readonly examples: readonly ["USD"];
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                    readonly description: "The legal entity identifier associated with the supplement";
                    readonly examples: readonly [1];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesPerformanceReviewVisibilitySettingsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["performance_review_process_id", "restrict_answers_visibility_to_reportees", "early_access_to_answers_for_managers", "anonymous_peer_evaluation_for_target"];
        readonly properties: {
            readonly performance_review_process_id: {
                readonly type: "integer";
                readonly description: "Review process ID";
                readonly examples: readonly [1];
            };
            readonly restrict_answers_visibility_to_reportees: {
                readonly type: "boolean";
                readonly description: "When enabled, employees don't have access to their results";
            };
            readonly early_access_to_answers_for_managers: {
                readonly type: "boolean";
                readonly description: "When enabled, managers can access the results of their reports before deadline";
                readonly examples: readonly [true];
            };
            readonly anonymous_peer_evaluation_for_target: {
                readonly type: "boolean";
                readonly description: "When enabled, peer evaluations are anonymous so employees don't know who reviewed them";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "performance_review_process_id", "restrict_answers_visibility_to_reportees", "early_access_to_answers_for_managers", "anonymous_peer_evaluation_for_target"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly performance_review_process_id: {
                    readonly type: "integer";
                    readonly description: "Review process ID";
                    readonly examples: readonly [1];
                };
                readonly restrict_answers_visibility_to_reportees: {
                    readonly type: "boolean";
                    readonly description: "Employees don't have access to their results when enabled";
                };
                readonly early_access_to_answers_for_managers: {
                    readonly type: "boolean";
                    readonly description: "Managers can access the results of their reports before deadline when enabled";
                    readonly examples: readonly [true];
                };
                readonly anonymous_peer_evaluation_for_target: {
                    readonly type: "boolean";
                    readonly description: "Peer evaluations are anonymous when enabled, so employees don't know who reviewed them";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesPostsCommentsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "post_id", "text"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "identifier of the comment";
                readonly examples: readonly [1];
            };
            readonly post_id: {
                readonly type: "integer";
                readonly description: "identifier of the post";
                readonly examples: readonly [1];
            };
            readonly text: {
                readonly type: "string";
                readonly description: "Text of the comment";
                readonly examples: readonly ["How is the week going Ana?"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "post_id", "author_id", "text", "created_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the comment";
                    readonly examples: readonly [1];
                };
                readonly post_id: {
                    readonly type: "integer";
                    readonly description: "identifier of the post";
                    readonly examples: readonly [1];
                };
                readonly author_id: {
                    readonly type: "integer";
                    readonly description: "author identifier refers to the employee access, you can get the employee from the employee endpoint";
                    readonly examples: readonly [1];
                };
                readonly text: {
                    readonly type: "string";
                    readonly description: "text of the comment";
                    readonly examples: readonly ["How is the week going Ana?"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "date of the comment";
                    readonly examples: readonly ["2024-07-17T00:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesPostsGroupsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Identifier of the group.";
                readonly examples: readonly [1];
            };
            readonly title: {
                readonly type: "string";
                readonly description: "title of the group.";
                readonly examples: readonly ["Company announcements"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "description of the group.";
                readonly examples: readonly ["The place to find all company announcements."];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "title"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifier of the group.";
                    readonly examples: readonly [1];
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "title of the group.";
                    readonly examples: readonly ["Company announcements"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "description of the group.";
                    readonly examples: readonly ["The place to find all company announcements."];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesPostsPostsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "identifier of the post";
                readonly examples: readonly [1];
            };
            readonly title: {
                readonly type: "string";
                readonly description: "title of the post";
                readonly examples: readonly ["Are you ready for the perfomance review?"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "description of the post";
                readonly examples: readonly ["As you know today we start the performance review process."];
            };
            readonly post_group_id: {
                readonly type: "integer";
                readonly description: "group identifier of the post, references to posts/groups endpoint";
                readonly examples: readonly [1];
            };
            readonly allow_comments_and_reactions: {
                readonly type: "boolean";
                readonly description: "allow comments and reactions on the post";
                readonly examples: readonly [true];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "allow_comments_and_reactions", "published_at", "created_at", "updated_at", "visits_count", "comments_count"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "identifiers of the post";
                    readonly examples: readonly [1];
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "title of the post";
                    readonly examples: readonly ["Are you ready for the perfomance review?"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "description of the post";
                    readonly examples: readonly ["As you know today we start the performance review process."];
                };
                readonly allow_comments_and_reactions: {
                    readonly type: "boolean";
                    readonly description: "allow comments and reactions on the post";
                    readonly examples: readonly [true];
                };
                readonly published_at: {
                    readonly type: "string";
                    readonly description: "date when the post has been published";
                    readonly examples: readonly ["2024-07-17T00:00:00Z"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "date when the post has been created";
                    readonly examples: readonly ["2024-07-17T00:00:00Z"];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "date when the post has been updated";
                    readonly examples: readonly ["2024-07-17T00:00:00Z"];
                };
                readonly visits_count: {
                    readonly type: "integer";
                    readonly description: "number of visits of the post";
                    readonly examples: readonly [10];
                };
                readonly cover_image_url: {
                    readonly type: "string";
                    readonly description: "url of the cover image";
                    readonly examples: readonly ["https://example.com/image.jpg"];
                };
                readonly posts_group_id: {
                    readonly type: "integer";
                    readonly description: "group identifier of the post, references to posts/groups endpoint";
                    readonly examples: readonly [1];
                };
                readonly comments_count: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesProjectManagementFlexibleTimeRecordsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "imputed_minutes"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly imputed_minutes: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "date", "imputed_minutes", "project_worker_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly date: {
                    readonly type: "string";
                };
                readonly imputed_minutes: {
                    readonly type: "integer";
                };
                readonly project_worker_id: {
                    readonly type: "integer";
                };
                readonly subproject_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesProjectManagementProjectTasksId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "name", "follow_up", "project_id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly name: {
                readonly type: "string";
            };
            readonly content: {
                readonly type: "string";
            };
            readonly starts_on: {
                readonly type: "string";
            };
            readonly follow_up: {
                readonly type: "boolean";
            };
            readonly due_on: {
                readonly type: "string";
            };
            readonly assignee_ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
            readonly project_id: {
                readonly type: "integer";
            };
            readonly subproject_id: {
                readonly type: "integer";
            };
            readonly files_to_add: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly format: "binary";
                };
            };
            readonly files_to_remove: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
            readonly status: {
                readonly type: "string";
                readonly enum: readonly ["todo", "in_progress", "done", "discarded"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "project_id", "task_id", "follow_up"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly project_id: {
                    readonly type: "integer";
                };
                readonly subproject_id: {
                    readonly type: "integer";
                };
                readonly task_id: {
                    readonly type: "integer";
                };
                readonly follow_up: {
                    readonly type: "boolean";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesProjectManagementProjectsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "name"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly name: {
                readonly type: "string";
            };
            readonly code: {
                readonly type: "string";
            };
            readonly start_date: {
                readonly type: "string";
            };
            readonly due_date: {
                readonly type: "string";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "status", "employees_assignment", "is_billable", "legal_entity_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly code: {
                    readonly type: "string";
                };
                readonly start_date: {
                    readonly type: "string";
                };
                readonly due_date: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["active", "closed", "processing"];
                    readonly description: "`active` `closed` `processing`";
                };
                readonly employees_assignment: {
                    readonly type: "string";
                    readonly enum: readonly ["manual", "company"];
                    readonly description: "`manual` `company`";
                };
                readonly inputed_minutes: {
                    readonly type: "integer";
                };
                readonly is_billable: {
                    readonly type: "boolean";
                };
                readonly fixed_cost_cents: {
                    readonly type: "integer";
                };
                readonly labor_cost_cents: {
                    readonly type: "integer";
                };
                readonly legal_entity_id: {
                    readonly type: "integer";
                };
                readonly spending_cost_cents: {
                    readonly type: "integer";
                };
                readonly client_id: {
                    readonly type: "integer";
                    readonly description: "The client id of the project";
                    readonly examples: readonly [123];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesTasksTasksId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "name"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "id of a task.";
                readonly examples: readonly [1];
            };
            readonly name: {
                readonly type: "string";
                readonly description: "name of  task.";
                readonly examples: readonly ["My task"];
            };
            readonly content: {
                readonly type: "string";
                readonly description: "description of the task.";
                readonly examples: readonly ["Complete your performance review before Friday"];
            };
            readonly due_on: {
                readonly type: "string";
                readonly description: "expiration date of the task.";
                readonly examples: readonly ["2024-06-06"];
            };
            readonly assignee_ids: {
                readonly type: "array";
                readonly description: "employees assigned to the task, assignee_id references to employee_id.";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3];
            };
            readonly status: {
                readonly type: "string";
                readonly description: "status of the task (todo | in_progress | done | discarded).";
                readonly enum: readonly ["todo", "in_progress", "done", "discarded"];
                readonly examples: readonly ["todo"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id", "assignee_ids", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the task";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the task";
                    readonly examples: readonly ["Upload payroll files"];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the author of the task";
                    readonly examples: readonly [1];
                };
                readonly content: {
                    readonly type: "string";
                    readonly description: "Content of the task";
                    readonly examples: readonly ["Do it as soon as possible"];
                };
                readonly due_on: {
                    readonly type: "string";
                    readonly description: "Due on date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly assignee_ids: {
                    readonly type: "array";
                    readonly description: "Employees assigned to the task, assignee_id references to employee_id";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3];
                };
                readonly author_employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee id of the author of the task";
                    readonly examples: readonly [1];
                };
                readonly completed_at: {
                    readonly type: "string";
                    readonly description: "Completed at date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly completed_by_id: {
                    readonly type: "integer";
                    readonly description: "Completed by identifier";
                    readonly examples: readonly [1];
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "Updated at date of the task";
                    readonly examples: readonly ["2024-01-01T00:00:00Z"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the task\n\n`todo` `in_progress` `done` `discarded`";
                    readonly enum: readonly ["todo", "in_progress", "done", "discarded"];
                    readonly examples: readonly ["done"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesTeamsMembershipsId: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly lead: {
                readonly type: "boolean";
                readonly description: "Assign an employee as a lead for their respective team.";
                readonly examples: readonly [true];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "team_id", "lead"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Membership ID";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company ID of the membership";
                    readonly examples: readonly [5];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee ID of the membership";
                    readonly examples: readonly [12];
                };
                readonly team_id: {
                    readonly type: "integer";
                    readonly description: "Team ID of the membership";
                    readonly examples: readonly [4];
                };
                readonly lead: {
                    readonly type: "boolean";
                    readonly description: "Whether the employee is a lead of the team or not";
                    readonly examples: readonly [true];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesTeamsTeamsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "id of the team";
                readonly examples: readonly [1];
            };
            readonly name: {
                readonly type: "string";
                readonly description: "name of the team";
                readonly examples: readonly ["Engineering"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Description of the team";
                readonly examples: readonly ["Engineering team description"];
            };
            readonly avatar: {
                readonly type: "string";
                readonly description: "Avatar of the team";
                readonly format: "binary";
                readonly examples: readonly ["https://api.factorialhr.com/rails/active_storage/representations/redirect/bob.png"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly avatar: {
                    readonly type: "string";
                };
                readonly employee_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly lead_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly company_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesTimePlanningPlanningVersionsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "effective_at", "planning_tool"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly effective_at: {
                readonly type: "string";
            };
            readonly number_of_rest_days_in_cents: {
                readonly type: "integer";
            };
            readonly planning_tool: {
                readonly type: "string";
            };
            readonly schedule_id: {
                readonly type: "integer";
            };
            readonly author: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["effective_at", "planning_tool", "employee_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly effective_at: {
                    readonly type: "string";
                };
                readonly planning_tool: {
                    readonly type: "string";
                };
                readonly number_of_rest_days_in_cents: {
                    readonly type: "integer";
                };
                readonly employee_id: {
                    readonly type: "integer";
                };
                readonly work_schedule_schedule_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesTimeSettingsBreakConfigurationsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly name: {
                readonly type: "string";
            };
            readonly paid: {
                readonly type: "boolean";
            };
            readonly archived: {
                readonly type: "boolean";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "paid", "archived"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly paid: {
                    readonly type: "boolean";
                };
                readonly archived: {
                    readonly type: "boolean";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesTimeoffAllowanceIncidencesId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly days_in_cents: {
                readonly type: "integer";
                readonly description: "How many units multiplied by 100 do you want to add/substract. Can be positive or negative";
                readonly examples: readonly [100];
            };
            readonly timeoff_allowance_id: {
                readonly type: "integer";
                readonly description: "Allowance Id";
                readonly examples: readonly [1];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "A free text field to add a description to the incidence";
                readonly examples: readonly ["Working on a bank holiday a different day"];
            };
            readonly effective_on: {
                readonly type: "string";
                readonly description: "When does the incidence take effect. This is related to the allowance cycle.";
                readonly examples: readonly ["2024-01-05"];
            };
            readonly target_balance: {
                readonly type: "string";
                readonly description: "Which counter does the incidence affect. Can be \"accrued\" or \"available\"";
                readonly enum: readonly ["available", "accrued"];
                readonly examples: readonly ["accrued"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "employee_id", "days_in_cents", "timeoff_allowance_id", "effective_on", "created_at", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier of the allowance incidence";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee id of the affected employee";
                    readonly examples: readonly [1];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Optional comment regarding the incidence";
                    readonly examples: readonly ["Added because working on a holiday"];
                };
                readonly days_in_cents: {
                    readonly type: "integer";
                    readonly description: "How many units * 100 does the incidence add/substract. Can be positive or negative. Example is one unit";
                    readonly examples: readonly [100];
                };
                readonly timeoff_allowance_id: {
                    readonly type: "integer";
                    readonly description: "To what allowance does the incidence affect. It will dictate if its days or hours";
                    readonly examples: readonly [2];
                };
                readonly effective_on: {
                    readonly type: "string";
                    readonly description: "When does the incidence take effect; this is for time off cycles calculations.";
                    readonly examples: readonly ["2024-01-02"];
                };
                readonly target_balance: {
                    readonly type: "string";
                    readonly description: "Whether the incidence affects the Accrued or the Available counter.";
                    readonly examples: readonly ["accrued"];
                };
                readonly created_at: {
                    readonly type: "integer";
                    readonly description: "Unix timestamp when the DB record was created";
                    readonly examples: readonly [1723623354];
                };
                readonly updated_at: {
                    readonly type: "integer";
                    readonly description: "Unix timestamp when the DB record was last updated";
                    readonly examples: readonly [1723623354];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesTimeoffAllowancesId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly accrued_denominator_in_cents: {
                readonly type: "integer";
                readonly description: "Only for Allowances based on worked time. It represents how many units you need to work to be granted allowance units";
                readonly examples: readonly [1000];
            };
            readonly accrued_factor_in_cents: {
                readonly type: "integer";
                readonly description: "Only for Allowances based on worked time. It represents how many units you are given per unit of time worked";
                readonly examples: readonly [10];
            };
            readonly available_days: {
                readonly type: "string";
                readonly description: "Indicates how the allowance units are accrued. For example all_days means all allowance days are given on the first day of the cycle.";
                readonly enum: readonly ["all_days", "generated_days", "generated_days_monthly", "generated_days_monthly_first_day", "monthly_fifteenth", "mensiversary", "bimonthly_first_and_fifteenth", "bimonthly_fifteenth_and_last"];
                readonly examples: readonly ["all_days"];
            };
            readonly carry_over_units_in_cents: {
                readonly type: "integer";
                readonly description: "How many units can carry over between cycles multiplied by 100";
                readonly examples: readonly [1500];
            };
            readonly count_holiday_as_workable: {
                readonly type: "boolean";
                readonly description: "This setting flags if units taken during a bank holiday should be deducted or not from allowance.";
            };
            readonly days_type: {
                readonly type: "string";
                readonly description: "Indicates if the allowance is based on working on calendar days.";
                readonly enum: readonly ["working_days", "natural_days", "natural_days_only_range", "french_calendar_days", "french_ouvres"];
                readonly examples: readonly ["working_days"];
            };
            readonly expire_in_months: {
                readonly type: "integer";
                readonly description: "When does the carryover expire in months.";
                readonly examples: readonly [6];
            };
            readonly frequency: {
                readonly type: "string";
                readonly description: "Defines duration of the allowance cycles. Can be \"yearly\", \"monthly_flexible\" or \"lifetime\"";
                readonly enum: readonly ["monthly_flexible", "yearly", "lifetime"];
                readonly examples: readonly ["yearly"];
            };
            readonly holiday_allowance_in_cents: {
                readonly type: "integer";
                readonly description: "Base amount of holiday allowance units multiplied by 100";
                readonly examples: readonly [2300];
            };
            readonly leave_type_ids: {
                readonly type: "array";
                readonly description: "An array of leave type ids associated with that allowance";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2, 3, 4];
            };
            readonly maximum_amount_in_cents: {
                readonly type: "integer";
                readonly description: "Maximum the allowance can reach on accrued";
                readonly examples: readonly [2800];
            };
            readonly name: {
                readonly type: "string";
                readonly description: "Allowance name set by the user";
                readonly examples: readonly ["Holiday Allowance"];
            };
            readonly negative_counter_type: {
                readonly type: "string";
                readonly description: "Whether the allowance allows to request more days than available.";
                readonly enum: readonly ["negative_counter_disabled", "negative_counter_enabled"];
                readonly examples: readonly ["negative_counter_disabled"];
            };
            readonly position: {
                readonly type: "integer";
                readonly description: "Indicates the position in the allowance when rendering them in UI";
                readonly examples: readonly [0];
            };
            readonly proration_type: {
                readonly type: "string";
                readonly description: "Whether the allowance has proration enabled or not.";
                readonly enum: readonly ["proration_enabled", "proration_disabled"];
                readonly examples: readonly ["proration_enabled"];
            };
            readonly pto_proratio_enabled: {
                readonly type: "boolean";
                readonly description: "Whether the allowance days are prorated or not";
            };
            readonly range_type: {
                readonly type: "string";
                readonly description: "Configures how leaves duration is handled.";
                readonly enum: readonly ["exact_range", "extra_non_working_days_at_end"];
                readonly examples: readonly ["working_days"];
            };
            readonly rounding: {
                readonly type: "string";
                readonly description: "How the accrued units of the allowance are rounded. It depends if the allowance is set in hours or days.";
                readonly enum: readonly ["half_day", "decimals", "quarters", "round_up"];
                readonly examples: readonly ["half_day"];
            };
            readonly tenure_period_transition: {
                readonly type: "string";
                readonly description: "In case the allowance has tenure periods, when is this tenure applied.";
                readonly enum: readonly ["beginning_of_cycle", "end_of_cycle", "after_milestone"];
                readonly examples: readonly ["beginning_of_cycle"];
            };
            readonly tenure_periods_enabled: {
                readonly type: "boolean";
                readonly description: "Whether the allowance has tenure periods enabled or not.";
            };
            readonly tenure_periods: {
                readonly type: "array";
                readonly description: "The tenure periods associated with the allowance.";
                readonly items: {};
            };
            readonly unlimited_accrued_hours: {
                readonly type: "boolean";
                readonly description: "Flag to indicate if there is unlimited accrual.";
            };
            readonly unlimited_carry_over: {
                readonly type: "boolean";
                readonly description: "Flag to indicate if there is unlimited carry over.";
            };
            readonly unlimited_carry_over_expiration: {
                readonly type: "boolean";
                readonly description: "Boolean to flag if carryover does not expire";
            };
            readonly unlimited_holidays: {
                readonly type: "boolean";
                readonly description: "Flag to indicate that the allowance has unlimited available days";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "allowance_type", "available_days", "count_holiday_as_workable", "leave_type_ids", "name", "proration_type", "rounding", "tenure_periods", "timeoff_cycle", "timeoff_policy_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier of the allowance";
                    readonly examples: readonly [1];
                };
                readonly accrued_denominator_in_cents: {
                    readonly type: "integer";
                    readonly description: "Only for Allowances based on worked time. It represents how many units you need to work to be granted allowance units";
                    readonly examples: readonly [1000];
                };
                readonly accrued_factor_in_cents: {
                    readonly type: "integer";
                    readonly description: "Only for Allowances based on worked time. It represents how many units you are given per unit of time worked";
                    readonly examples: readonly [10];
                };
                readonly accrued_units_availability: {
                    readonly type: "string";
                    readonly description: "When can the acrrued units be spent.\n\n`current_cycle` `next_cycle`";
                    readonly enum: readonly ["current_cycle", "next_cycle"];
                    readonly examples: readonly ["current_cycle"];
                };
                readonly allowance_type: {
                    readonly type: "string";
                    readonly description: "Sets the allowance units. Can be \"days\" or \"hours\"\n\n`days` `hours`";
                    readonly enum: readonly ["days", "hours"];
                    readonly examples: readonly ["days"];
                };
                readonly available_days: {
                    readonly type: "string";
                    readonly description: "Indicates how the allowance units are accrued. For example all_days means all allowance days are given on the first day of the cycle.\n\n`all_days` `generated_days` `generated_days_monthly` `generated_days_monthly_first_day` `monthly_fifteenth` `mensiversary` `bimonthly_first_and_fifteenth` `bimonthly_fifteenth_and_last`";
                    readonly enum: readonly ["all_days", "generated_days", "generated_days_monthly", "generated_days_monthly_first_day", "monthly_fifteenth", "mensiversary", "bimonthly_first_and_fifteenth", "bimonthly_fifteenth_and_last"];
                    readonly examples: readonly ["all_days"];
                };
                readonly carry_over_days: {
                    readonly type: "integer";
                    readonly description: "How many units can carry over between cycles";
                    readonly examples: readonly [15];
                };
                readonly carry_over_units_in_cents: {
                    readonly type: "integer";
                    readonly description: "How many units can carry over between cycles multiplied by 100";
                    readonly examples: readonly [1500];
                };
                readonly count_holiday_as_workable: {
                    readonly type: "boolean";
                    readonly description: "This setting flags if units taken during a bank holiday should be deducted or not from allowance.";
                };
                readonly cycle_length: {
                    readonly type: "integer";
                    readonly description: "How many months does each allowance cycle last";
                    readonly examples: readonly [12];
                };
                readonly cycle_start: {
                    readonly type: "string";
                    readonly description: "When does the cycle start.";
                    readonly examples: readonly ["jan"];
                };
                readonly days_type: {
                    readonly type: "string";
                    readonly description: "Indicates if the allowance is based on working on calendar days.\n\n`working_days` `natural_days` `natural_days_only_range` `french_calendar_days` `french_ouvres`";
                    readonly enum: readonly ["working_days", "natural_days", "natural_days_only_range", "french_calendar_days", "french_ouvres"];
                    readonly examples: readonly ["working_days"];
                };
                readonly employee_carry_over_starting_year: {
                    readonly type: "integer";
                    readonly description: "When does the carryover start";
                    readonly examples: readonly [1];
                };
                readonly expire_in_months: {
                    readonly type: "integer";
                    readonly description: "When does the carryover expire in months.";
                    readonly examples: readonly [6];
                };
                readonly frequency: {
                    readonly type: "string";
                    readonly description: "Defines duration of the allowance cycles. Can be \"yearly\", \"monthly_flexible\" or \"lifetime\"\n\n`monthly_flexible` `yearly` `lifetime`";
                    readonly enum: readonly ["monthly_flexible", "yearly", "lifetime"];
                    readonly examples: readonly ["yearly"];
                };
                readonly holiday_allowance_in_cents: {
                    readonly type: "integer";
                    readonly description: "Base amount of holiday allowance units multiplied by 100";
                    readonly examples: readonly [2300];
                };
                readonly leave_type_ids: {
                    readonly type: "array";
                    readonly description: "An array of leave type ids associated with that allowance";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2, 3, 4];
                };
                readonly maximum_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "Maximum the allowance can reach on accrued";
                    readonly examples: readonly [2800];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Allowance name set by the user";
                    readonly examples: readonly ["Holiday Allowance"];
                };
                readonly negative_counter_type: {
                    readonly type: "string";
                    readonly description: "Whether the allowance allows to request more days than available\n\n`negative_counter_disabled` `negative_counter_enabled`";
                    readonly enum: readonly ["negative_counter_disabled", "negative_counter_enabled"];
                    readonly examples: readonly ["negative_counter_disabled"];
                };
                readonly position: {
                    readonly type: "integer";
                    readonly description: "Indicates the position in the allowance when rendering them in UI";
                    readonly examples: readonly [0];
                };
                readonly proration_type: {
                    readonly type: "string";
                    readonly description: "Whether the allowance has proration enabled or not.\n\n`proration_enabled` `proration_disabled`";
                    readonly enum: readonly ["proration_enabled", "proration_disabled"];
                    readonly examples: readonly ["proration_enabled"];
                };
                readonly pto_proratio_enabled: {
                    readonly type: "boolean";
                    readonly description: "Whether the allowance days are prorrated or not";
                };
                readonly range_type: {
                    readonly type: "string";
                    readonly description: "Configures how leaves duration is handled.\n\n`exact_range` `extra_non_working_days_at_end`";
                    readonly enum: readonly ["exact_range", "extra_non_working_days_at_end"];
                    readonly examples: readonly ["working_days"];
                };
                readonly rounding: {
                    readonly type: "string";
                    readonly description: "How the accrued units of the allowance are rounded. It depends if the allowance is set in hours or days.\n\n`half_day` `decimals` `quarters` `round_up`";
                    readonly enum: readonly ["half_day", "decimals", "quarters", "round_up"];
                    readonly examples: readonly ["half_day"];
                };
                readonly send_notification: {
                    readonly type: "boolean";
                };
                readonly source_units: {
                    readonly type: "string";
                    readonly description: "This field configures the type of allowance (fixed balance, based on worked time)\n\n`base_units` `overtime_units` `by_worked_time`";
                    readonly enum: readonly ["base_units", "overtime_units", "by_worked_time"];
                    readonly examples: readonly ["base_units"];
                };
                readonly tenure_period_transition: {
                    readonly type: "string";
                    readonly description: "In case the allowance has tenure periods, when is this tenure applied.\n\n`beginning_of_cycle` `end_of_cycle` `after_milestone`";
                    readonly enum: readonly ["beginning_of_cycle", "end_of_cycle", "after_milestone"];
                    readonly examples: readonly ["beginning_of_cycle"];
                };
                readonly tenure_periods: {
                    readonly type: "array";
                    readonly description: "The tenure periods associated with the allowance.";
                    readonly items: {};
                };
                readonly tenure_periods_enabled: {
                    readonly type: "boolean";
                    readonly description: "Whether the allowance has tenure periods enabled or not.";
                };
                readonly timeoff_cycle: {
                    readonly type: "string";
                    readonly description: "Value to indicate how the allowance cycle is configured. Its an abbreviation of the first and last month.";
                    readonly examples: readonly ["jan_dec"];
                };
                readonly timeoff_policy_id: {
                    readonly type: "integer";
                    readonly description: "The Id of the policy to which the allowance belongs to";
                    readonly examples: readonly [1];
                };
                readonly unlimited_accrued_hours: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate if there is unlimited accrual.";
                };
                readonly unlimited_carry_over: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate if there is unlimited carry over.";
                };
                readonly unlimited_carry_over_expiration: {
                    readonly type: "boolean";
                    readonly description: "Boolean to flag if carryover does not expire";
                };
                readonly unlimited_holidays: {
                    readonly type: "boolean";
                    readonly description: "Flag to indicate that the allowance has unlimited available days";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesTimeoffBlockedPeriodsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "name", "leave_type_ids", "time_periods_attributes", "strategy"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly name: {
                readonly type: "string";
                readonly description: "Name of the blocked period.";
                readonly examples: readonly ["Onboarding period edited"];
            };
            readonly leave_type_ids: {
                readonly type: "array";
                readonly description: "An array of leave type identifiers for which employees can not request timeoff edited";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [1, 2];
            };
            readonly time_periods_attributes: {
                readonly type: "array";
                readonly description: "The tenure periods associated with the allowance edited.";
                readonly items: {};
            };
            readonly strategy: {
                readonly type: "string";
                readonly description: "Type of access group";
                readonly examples: readonly ["fqlmultiselect"];
            };
            readonly members: {
                readonly type: "array";
                readonly description: "Array of employees manually selected";
                readonly items: {
                    readonly type: "integer";
                };
                readonly examples: readonly [25, 22, 23];
            };
            readonly query: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "name", "leave_type_ids", "time_periods", "strategy", "members"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier of the blocked period";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company id of the blocked period";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the blocked period.";
                    readonly examples: readonly ["Onboarding period"];
                };
                readonly leave_type_ids: {
                    readonly type: "array";
                    readonly description: "Leave types for which absence request has been blocked";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                };
                readonly time_periods: {
                    readonly type: "array";
                    readonly description: "The tenure periods associated with the allowance.";
                    readonly items: {};
                };
                readonly strategy: {
                    readonly type: "string";
                    readonly description: "Type of access group";
                    readonly examples: readonly ["everyone"];
                };
                readonly members: {
                    readonly type: "array";
                    readonly description: "Employees whose timeoff will be affected";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                };
                readonly location_ids: {
                    readonly type: "array";
                    readonly description: "Array of locations workplace identifiers where the employees are located";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                };
                readonly team_ids: {
                    readonly type: "array";
                    readonly description: "Array of team identifiers which the selected employees belong to";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesTimeoffLeaveTypesId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["identifier", "details_required"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Identifier of the leave type to update";
                readonly examples: readonly [5];
            };
            readonly accrues: {
                readonly type: "boolean";
                readonly description: "Whether the leave type accrues over time";
                readonly examples: readonly [true];
            };
            readonly approval_required: {
                readonly type: "boolean";
                readonly description: "Whether approval is required for this leave type";
                readonly examples: readonly [true];
            };
            readonly identifier: {
                readonly type: "string";
                readonly description: "A unique identifier for the leave type";
                readonly examples: readonly ["custom"];
            };
            readonly attachment: {
                readonly type: "boolean";
                readonly description: "Whether an attachment is required for this leave type";
                readonly examples: readonly [true];
            };
            readonly color: {
                readonly type: "string";
                readonly description: "The color associated with this leave type (hex code)";
                readonly examples: readonly ["red"];
            };
            readonly name: {
                readonly type: "string";
                readonly description: "The name of the leave type";
                readonly examples: readonly ["Sick Leave"];
            };
            readonly visibility: {
                readonly type: "boolean";
                readonly description: "Whether the leave type is visible to employees";
                readonly examples: readonly [true];
            };
            readonly workable: {
                readonly type: "boolean";
                readonly description: "Whether the leave type is workable (can be worked on during leave)";
            };
            readonly payable: {
                readonly type: "boolean";
                readonly description: "Whether the leave type is payable";
                readonly examples: readonly [true];
            };
            readonly is_attachment_mandatory: {
                readonly type: "boolean";
                readonly description: "Whether the attachment is mandatory or a status description (boolean or string)";
            };
            readonly half_days_units_enabled: {
                readonly type: "boolean";
                readonly description: "Whether half-day units are enabled for this leave type";
                readonly examples: readonly [true];
            };
            readonly max_days_in_cents: {
                readonly type: "integer";
                readonly description: "Maximum days in cents that can be taken";
                readonly examples: readonly [5000];
            };
            readonly min_days_in_cents: {
                readonly type: "integer";
                readonly description: "Minimum days in cents that must be taken";
                readonly examples: readonly [1000];
            };
            readonly active: {
                readonly type: "boolean";
                readonly description: "Whether the leave type is active";
                readonly examples: readonly [true];
            };
            readonly allow_endless: {
                readonly type: "boolean";
                readonly description: "Whether endless leave is allowed";
            };
            readonly restricted: {
                readonly type: "boolean";
                readonly description: "Whether the leave type is restricted";
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Description of the leave type";
                readonly examples: readonly ["Leave for sick days"];
            };
            readonly details_required: {
                readonly type: "boolean";
                readonly description: "Whether additional details are required for the leave type";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "identifier", "color", "attachment", "visibility", "workable", "company_id", "allowance_ids", "details_required"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the leave type";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the leave type";
                    readonly examples: readonly ["Annual Leave"];
                };
                readonly translated_name: {
                    readonly type: "string";
                    readonly description: "Translated name of the leave type, if available";
                    readonly examples: readonly ["Congé Annuel"];
                };
                readonly identifier: {
                    readonly type: "string";
                    readonly description: "Unique identifier of the leave type";
                    readonly examples: readonly ["annual_leave"];
                };
                readonly color: {
                    readonly type: "string";
                    readonly description: "The color associated with this leave type";
                    readonly examples: readonly ["red"];
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is active";
                    readonly examples: readonly [true];
                };
                readonly editable: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is editable";
                };
                readonly approval_required: {
                    readonly type: "boolean";
                    readonly description: "Whether approval is required for this leave type";
                    readonly examples: readonly [true];
                };
                readonly accrues: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type accrues over time";
                    readonly examples: readonly [true];
                };
                readonly attachment: {
                    readonly type: "boolean";
                    readonly description: "Whether an attachment is required for this leave type";
                    readonly examples: readonly [true];
                };
                readonly allow_endless: {
                    readonly type: "boolean";
                    readonly description: "Whether endless leave is allowed";
                };
                readonly restricted: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is restricted";
                };
                readonly visibility: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is visible to employees";
                    readonly examples: readonly [true];
                };
                readonly workable: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is workable";
                };
                readonly payable: {
                    readonly type: "boolean";
                    readonly description: "Whether the leave type is payable";
                    readonly examples: readonly [true];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the company associated with this leave type";
                    readonly examples: readonly [1];
                };
                readonly is_attachment_mandatory: {
                    readonly type: "boolean";
                    readonly description: "Whether the attachment is mandatory";
                };
                readonly allowance_ids: {
                    readonly type: "array";
                    readonly description: "List of allowance identifiers associated with this leave type";
                    readonly items: {
                        readonly type: "integer";
                    };
                    readonly examples: readonly [1, 2];
                };
                readonly half_days_units_enabled: {
                    readonly type: "boolean";
                    readonly description: "Whether half-day units are enabled for this leave type";
                    readonly examples: readonly [true];
                };
                readonly max_days_in_cents: {
                    readonly type: "integer";
                    readonly description: "Maximum days in cents that can be taken";
                    readonly examples: readonly [5000];
                };
                readonly min_days_in_cents: {
                    readonly type: "integer";
                    readonly description: "Minimum days in cents that must be taken";
                    readonly examples: readonly [1000];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Description of the leave type";
                    readonly examples: readonly ["This leave type is for annual holidays."];
                };
                readonly details_required: {
                    readonly type: "boolean";
                    readonly description: "Whether additional details are required for the leave type";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesTimeoffLeavesId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "The leave id";
            };
            readonly employee_id: {
                readonly type: "integer";
                readonly description: "The employee id of the leave";
                readonly examples: readonly [1];
            };
            readonly leave_type_id: {
                readonly type: "integer";
                readonly description: "The leave type id";
                readonly examples: readonly [1];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "The description of the leave";
                readonly examples: readonly ["Leaving in the morning for a medical appointment"];
            };
            readonly start_on: {
                readonly type: "string";
                readonly description: "The valid start date of the leave following the format YYYY-MM-DD";
                readonly examples: readonly ["2024-05-05"];
            };
            readonly finish_on: {
                readonly type: "string";
                readonly description: "The valid end date of the leave following the format YYYY-MM-DD";
                readonly examples: readonly ["2024-05-05"];
            };
            readonly half_day: {
                readonly type: "string";
                readonly description: "If the leave is in: [beggining_of_day, end_of_day]";
                readonly examples: readonly ["end_of_day"];
            };
            readonly start_time: {
                readonly type: "string";
                readonly description: "The start time of a leave";
                readonly examples: readonly ["14:00"];
            };
            readonly hours_amount_in_cents: {
                readonly type: "integer";
                readonly description: "The hours amount in cents of a leave";
                readonly examples: readonly ["400"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "employee_id", "start_on", "updated_at"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Identifier of the Leave";
                    readonly examples: readonly [1];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "Company identifier of the employee of the leave";
                    readonly examples: readonly [1];
                };
                readonly employee_id: {
                    readonly type: "integer";
                    readonly description: "Employee identifier of the leave";
                    readonly examples: readonly [1];
                };
                readonly start_on: {
                    readonly type: "string";
                    readonly description: "The start date of the leave";
                    readonly examples: readonly ["2023-09-01"];
                };
                readonly finish_on: {
                    readonly type: "string";
                    readonly description: "The end date of the leave";
                    readonly examples: readonly ["2023-09-10"];
                };
                readonly half_day: {
                    readonly type: "string";
                    readonly description: "Indicates if the leave is taken as a half-day";
                    readonly examples: readonly ["end_of_day"];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A description of the leave";
                    readonly examples: readonly ["Annual family vacation"];
                };
                readonly reason: {
                    readonly type: "string";
                    readonly description: "The reason provided by the employee for taking the leave";
                    readonly examples: readonly ["Medical appointment"];
                };
                readonly leave_type_id: {
                    readonly type: "integer";
                    readonly description: "The identifier for the type of leave";
                    readonly examples: readonly [2];
                };
                readonly leave_type_name: {
                    readonly type: "string";
                    readonly description: "The name of the leave type";
                    readonly examples: readonly ["Vacation"];
                };
                readonly approved: {
                    readonly type: "boolean";
                    readonly description: "Indicates whether the leave has been approved";
                    readonly examples: readonly [true];
                };
                readonly employee_full_name: {
                    readonly type: "string";
                    readonly description: "The full name of the employee taking the leave";
                    readonly examples: readonly ["John Doe"];
                };
                readonly start_time: {
                    readonly type: "string";
                    readonly description: "The start time of the leave";
                    readonly examples: readonly ["09:00"];
                };
                readonly hours_amount_in_cents: {
                    readonly type: "integer";
                    readonly description: "The total number of hours taken for the leave, represented in cents";
                    readonly examples: readonly [80000];
                };
                readonly updated_at: {
                    readonly type: "string";
                    readonly description: "The updated at date of the leave";
                    readonly examples: readonly ["2023-08-31T15:30:00Z"];
                };
                readonly created_at: {
                    readonly type: "string";
                    readonly description: "The created at date of the leave";
                    readonly examples: readonly ["2023-08-01T08:00:00Z"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesTimeoffPoliciesId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Id of the policy to update.";
                readonly examples: readonly [1];
            };
            readonly name: {
                readonly type: "string";
                readonly description: "The name of the policy.";
                readonly examples: readonly ["Policy for remotes"];
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Policy description.";
                readonly examples: readonly ["This policy will apply only for remote employees"];
            };
            readonly main: {
                readonly type: "boolean";
                readonly description: "If the policy is the main policy.";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "The policy id.";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Policy name.";
                    readonly examples: readonly ["Policy for remotes"];
                };
                readonly main: {
                    readonly type: "boolean";
                    readonly description: "Is the main policy? It will return true if it's the main policy if not it will return false.";
                    readonly examples: readonly [true];
                };
                readonly company_id: {
                    readonly type: "integer";
                    readonly description: "The company id.";
                    readonly examples: readonly [1];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The policy description.";
                    readonly examples: readonly ["This policy will apply only for remote employees"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesTrainingsSessionsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "name"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly name: {
                readonly type: "string";
            };
            readonly starts_at: {
                readonly type: "string";
            };
            readonly ends_at: {
                readonly type: "string";
            };
            readonly due_date: {
                readonly type: "string";
            };
            readonly duration: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
            readonly modality: {
                readonly type: "string";
            };
            readonly link: {
                readonly type: "string";
            };
            readonly location: {
                readonly type: "string";
            };
            readonly subsidized: {
                readonly type: "boolean";
            };
            readonly recurrent: {
                readonly type: "boolean";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "training_id", "subsidized", "session_attendances_status"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly training_id: {
                    readonly type: "integer";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly training_class_id: {
                    readonly type: "integer";
                };
                readonly starts_at: {
                    readonly type: "string";
                };
                readonly ends_at: {
                    readonly type: "string";
                };
                readonly due_date: {
                    readonly type: "string";
                };
                readonly duration: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly modality: {
                    readonly type: "string";
                };
                readonly link: {
                    readonly type: "string";
                };
                readonly location: {
                    readonly type: "string";
                };
                readonly session_attendance_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly session_feedback_id: {
                    readonly type: "integer";
                };
                readonly subsidized: {
                    readonly type: "boolean";
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly session_attendances_status: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesTrainingsTrainingMembershipsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
                readonly description: "Unique identifier for the training membership. Only used to identify the training membership to update.";
                readonly examples: readonly [1];
            };
            readonly training_completed_at: {
                readonly type: "string";
                readonly description: "This field is used to record the date a training was completed for trainings that have an expiry date.";
                readonly examples: readonly ["2022-01-01"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "access_id", "training_id", "status"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "Unique identifier for the training membership.";
                    readonly examples: readonly [1];
                };
                readonly access_id: {
                    readonly type: "integer";
                    readonly description: "Access_id associated to the employee, refers to employees/employees endpoint.";
                    readonly examples: readonly [1];
                };
                readonly training_id: {
                    readonly type: "integer";
                    readonly description: "This field is used to filter those trainings memberships that belongs to this training.";
                    readonly examples: readonly [1];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "This field is used to filter those trainings memberships whose attendance status is the given.";
                    readonly examples: readonly ["notstarted"];
                };
                readonly training_due_date: {
                    readonly type: "string";
                    readonly description: "This field is used for those trainings with an expiry date.";
                    readonly examples: readonly ["2022-01-01"];
                };
                readonly training_completed_at: {
                    readonly type: "string";
                    readonly description: "This field is used to record the date a training was completed for trainings that have an expiry date.";
                    readonly examples: readonly ["2022-01-01"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesTrainingsTrainingsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "name", "description", "external", "year"];
        readonly properties: {
            readonly id: {
                readonly type: "integer";
            };
            readonly name: {
                readonly type: "string";
            };
            readonly code: {
                readonly type: "string";
            };
            readonly description: {
                readonly type: "string";
            };
            readonly external_provider: {
                readonly type: "string";
            };
            readonly external: {
                readonly type: "boolean";
            };
            readonly category_ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
            readonly competency_ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                };
            };
            readonly cost: {
                readonly type: "integer";
            };
            readonly subsidized_cost: {
                readonly type: "integer";
            };
            readonly cost_decimal: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
            readonly subsidized_cost_decimal: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
            readonly year: {
                readonly type: "integer";
            };
            readonly valid_for: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "company_id", "author_id", "name", "description", "external", "fundae_subsidized", "cost", "subsidized_cost", "cost_decimal", "subsidized_cost_decimal", "year", "catalog", "competency_ids", "total_training_cost", "total_training_subsidized_cost", "total_participants", "training_attendance_status", "access_id", "session_attendance", "competency_id", "modality"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly author_id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly code: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                };
                readonly external_provider: {
                    readonly type: "string";
                };
                readonly external: {
                    readonly type: "boolean";
                };
                readonly total_cost: {
                    readonly type: "integer";
                };
                readonly fundae_subsidized: {
                    readonly type: "boolean";
                };
                readonly cost: {
                    readonly type: "integer";
                };
                readonly subsidized_cost: {
                    readonly type: "integer";
                };
                readonly total_cost_decimal: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly cost_decimal: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly subsidized_cost_decimal: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly category_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly status: {
                    readonly type: "string";
                };
                readonly year: {
                    readonly type: "integer";
                };
                readonly catalog: {
                    readonly type: "boolean";
                };
                readonly competency_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly total_training_cost: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly total_training_subsidized_cost: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly total_participants: {
                    readonly type: "integer";
                };
                readonly training_attendance_status: {
                    readonly type: "string";
                    readonly enum: readonly ["notassigned", "notstarted", "missing", "started", "partiallycompleted", "completed"];
                    readonly description: "`notassigned` `notstarted` `missing` `started` `partiallycompleted` `completed`";
                };
                readonly valid_for: {
                    readonly type: "integer";
                };
                readonly objectives: {
                    readonly type: "string";
                    readonly description: "Objectives of the course";
                    readonly examples: readonly ["Intermediate-level communication course that focuses on building and enhancing language skills."];
                };
                readonly number_of_expired_participants: {
                    readonly type: "integer";
                    readonly description: "Number of participants that have the course expired or about to expire in the next 3 months. Only applicable to trainings with validity period.";
                    readonly examples: readonly [2];
                };
                readonly access_id: {
                    readonly type: "integer";
                };
                readonly session_attendance: {
                    readonly type: "string";
                };
                readonly competency_id: {
                    readonly type: "integer";
                };
                readonly modality: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesWorkScheduleOverlapPeriodsId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["author", "id", "update_params"];
        readonly properties: {
            readonly author: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
            readonly id: {
                readonly type: "integer";
            };
            readonly update_params: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "default", "schedule_id", "start_month", "start_day", "end_month", "end_day", "schedule_type"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly default: {
                    readonly type: "boolean";
                };
                readonly schedule_id: {
                    readonly type: "integer";
                };
                readonly start_month: {
                    readonly type: "integer";
                };
                readonly start_day: {
                    readonly type: "integer";
                };
                readonly end_month: {
                    readonly type: "integer";
                };
                readonly end_day: {
                    readonly type: "integer";
                };
                readonly schedule_type: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PutApi20241001ResourcesWorkScheduleSchedulesId: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["id", "author"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
            };
            readonly id: {
                readonly type: "integer";
            };
            readonly author: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["1"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["id", "name", "company_id", "created_at", "updated_at", "employee_ids", "periods"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly archived_at: {
                    readonly type: "string";
                };
                readonly company_id: {
                    readonly type: "integer";
                };
                readonly created_at: {
                    readonly type: "string";
                };
                readonly updated_at: {
                    readonly type: "string";
                };
                readonly employee_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "integer";
                    };
                };
                readonly periods: {
                    readonly type: "array";
                    readonly items: {};
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
export { DeleteApi20241001ResourcesApiPublicWebhookSubscriptionsId, DeleteApi20241001ResourcesAtsApplicationsId, DeleteApi20241001ResourcesAtsCandidatesId, DeleteApi20241001ResourcesAtsFeedbacksId, DeleteApi20241001ResourcesAtsJobPostingsId, DeleteApi20241001ResourcesAttendanceOvertimeRequestsId, DeleteApi20241001ResourcesAttendanceShiftsId, DeleteApi20241001ResourcesContractsCompensationsId, DeleteApi20241001ResourcesContractsContractVersionsId, DeleteApi20241001ResourcesCustomFieldsFieldsId, DeleteApi20241001ResourcesDocumentsDocumentsId, DeleteApi20241001ResourcesFinanceCostCentersId, DeleteApi20241001ResourcesLocationsLocationsId, DeleteApi20241001ResourcesPayrollEmployeesIdentifiersId, DeleteApi20241001ResourcesPayrollIntegrationsBaseCodesId, DeleteApi20241001ResourcesPayrollSupplementsId, DeleteApi20241001ResourcesPerformanceReviewOwnersId, DeleteApi20241001ResourcesPerformanceReviewProcessTargetsId, DeleteApi20241001ResourcesPerformanceReviewProcessesId, DeleteApi20241001ResourcesPostsCommentsId, DeleteApi20241001ResourcesPostsGroupsId, DeleteApi20241001ResourcesPostsPostsId, DeleteApi20241001ResourcesProjectManagementFlexibleTimeRecordsId, DeleteApi20241001ResourcesProjectManagementSubprojectsId, DeleteApi20241001ResourcesProjectManagementTimeRecordsId, DeleteApi20241001ResourcesShiftManagementShiftsId, DeleteApi20241001ResourcesTasksTaskFilesId, DeleteApi20241001ResourcesTasksTasksId, DeleteApi20241001ResourcesTeamsMembershipsId, DeleteApi20241001ResourcesTeamsTeamsId, DeleteApi20241001ResourcesTimePlanningPlanningVersionsId, DeleteApi20241001ResourcesTimeoffAllowanceIncidencesId, DeleteApi20241001ResourcesTimeoffAllowancesId, DeleteApi20241001ResourcesTimeoffBlockedPeriodsId, DeleteApi20241001ResourcesTimeoffLeavesId, DeleteApi20241001ResourcesTimeoffPoliciesId, DeleteApi20241001ResourcesTrainingsCategoriesId, DeleteApi20241001ResourcesTrainingsSessionsId, DeleteApi20241001ResourcesTrainingsTrainingsId, DeleteApi20241001ResourcesWorkScheduleOverlapPeriodsId, GetApi20241001ResourcesApiPublicCredentials, GetApi20241001ResourcesApiPublicWebhookSubscriptions, GetApi20241001ResourcesApiPublicWebhookSubscriptionsId, GetApi20241001ResourcesAtsAnswers, GetApi20241001ResourcesAtsAnswersId, GetApi20241001ResourcesAtsApplicationPhases, GetApi20241001ResourcesAtsApplicationPhasesId, GetApi20241001ResourcesAtsApplications, GetApi20241001ResourcesAtsApplicationsId, GetApi20241001ResourcesAtsCandidateSources, GetApi20241001ResourcesAtsCandidateSourcesId, GetApi20241001ResourcesAtsCandidates, GetApi20241001ResourcesAtsCandidatesId, GetApi20241001ResourcesAtsEvaluationForms, GetApi20241001ResourcesAtsEvaluationFormsId, GetApi20241001ResourcesAtsFeedbacks, GetApi20241001ResourcesAtsFeedbacksId, GetApi20241001ResourcesAtsHiringStages, GetApi20241001ResourcesAtsHiringStagesId, GetApi20241001ResourcesAtsJobPostings, GetApi20241001ResourcesAtsJobPostingsId, GetApi20241001ResourcesAtsMessages, GetApi20241001ResourcesAtsMessagesId, GetApi20241001ResourcesAtsRejectionReasons, GetApi20241001ResourcesAtsRejectionReasonsId, GetApi20241001ResourcesAttendanceBreakConfigurations, GetApi20241001ResourcesAttendanceBreakConfigurationsId, GetApi20241001ResourcesAttendanceEstimatedTimes, GetApi20241001ResourcesAttendanceEstimatedTimesId, GetApi20241001ResourcesAttendanceOpenShifts, GetApi20241001ResourcesAttendanceOvertimeRequests, GetApi20241001ResourcesAttendanceOvertimeRequestsId, GetApi20241001ResourcesAttendanceShifts, GetApi20241001ResourcesAttendanceShiftsId, GetApi20241001ResourcesAttendanceWorkedTimes, GetApi20241001ResourcesBookkeepersManagementIncidences, GetApi20241001ResourcesBookkeepersManagementIncidencesId, GetApi20241001ResourcesCompaniesLegalEntities, GetApi20241001ResourcesCompaniesLegalEntitiesId, GetApi20241001ResourcesContractsCompensations, GetApi20241001ResourcesContractsCompensationsId, GetApi20241001ResourcesContractsContractVersions, GetApi20241001ResourcesContractsContractVersionsId, GetApi20241001ResourcesContractsReferenceContracts, GetApi20241001ResourcesContractsTaxonomies, GetApi20241001ResourcesContractsTaxonomiesId, GetApi20241001ResourcesCustomFieldsFields, GetApi20241001ResourcesCustomFieldsFieldsId, GetApi20241001ResourcesCustomFieldsOptions, GetApi20241001ResourcesCustomFieldsOptionsId, GetApi20241001ResourcesCustomFieldsResourceFields, GetApi20241001ResourcesCustomFieldsResourceFieldsId, GetApi20241001ResourcesCustomFieldsValues, GetApi20241001ResourcesCustomFieldsValuesId, GetApi20241001ResourcesCustomResourcesSchemas, GetApi20241001ResourcesCustomResourcesSchemasId, GetApi20241001ResourcesCustomResourcesValues, GetApi20241001ResourcesCustomResourcesValuesId, GetApi20241001ResourcesDocumentsDocuments, GetApi20241001ResourcesDocumentsDocumentsId, GetApi20241001ResourcesDocumentsFolders, GetApi20241001ResourcesDocumentsFoldersId, GetApi20241001ResourcesEmployeeUpdatesAbsences, GetApi20241001ResourcesEmployeeUpdatesAbsencesId, GetApi20241001ResourcesEmployeeUpdatesContractChanges, GetApi20241001ResourcesEmployeeUpdatesContractChangesId, GetApi20241001ResourcesEmployeeUpdatesNewHires, GetApi20241001ResourcesEmployeeUpdatesNewHiresId, GetApi20241001ResourcesEmployeeUpdatesPersonalChanges, GetApi20241001ResourcesEmployeeUpdatesPersonalChangesId, GetApi20241001ResourcesEmployeeUpdatesSummaries, GetApi20241001ResourcesEmployeeUpdatesSummariesId, GetApi20241001ResourcesEmployeeUpdatesTerminations, GetApi20241001ResourcesEmployeeUpdatesTerminationsId, GetApi20241001ResourcesEmployeesEmployees, GetApi20241001ResourcesEmployeesEmployeesId, GetApi20241001ResourcesExpensesExpensables, GetApi20241001ResourcesExpensesExpensablesId, GetApi20241001ResourcesExpensesExpenses, GetApi20241001ResourcesExpensesExpensesId, GetApi20241001ResourcesExpensesMileages, GetApi20241001ResourcesExpensesMileagesId, GetApi20241001ResourcesFinanceAccounts, GetApi20241001ResourcesFinanceAccountsId, GetApi20241001ResourcesFinanceCostCenterMemberships, GetApi20241001ResourcesFinanceCostCenters, GetApi20241001ResourcesFinanceCostCentersId, GetApi20241001ResourcesHolidaysCompanyHolidays, GetApi20241001ResourcesHolidaysCompanyHolidaysId, GetApi20241001ResourcesLocationsLocations, GetApi20241001ResourcesLocationsLocationsId, GetApi20241001ResourcesLocationsWorkAreas, GetApi20241001ResourcesLocationsWorkAreasId, GetApi20241001ResourcesMarketplaceInstallationSettings, GetApi20241001ResourcesMarketplaceSettings, GetApi20241001ResourcesPayrollEmployeesIdentifiers, GetApi20241001ResourcesPayrollEmployeesIdentifiersId, GetApi20241001ResourcesPayrollFamilySituations, GetApi20241001ResourcesPayrollIntegrationsBaseCodes, GetApi20241001ResourcesPayrollSupplements, GetApi20241001ResourcesPayrollSupplementsId, GetApi20241001ResourcesPerformanceAgreements, GetApi20241001ResourcesPerformanceAgreementsId, GetApi20241001ResourcesPerformanceReviewEvaluationAnswers, GetApi20241001ResourcesPerformanceReviewEvaluations, GetApi20241001ResourcesPerformanceReviewEvaluationsId, GetApi20241001ResourcesPerformanceReviewOwners, GetApi20241001ResourcesPerformanceReviewProcessEstimatedTargets, GetApi20241001ResourcesPerformanceReviewProcessTargets, GetApi20241001ResourcesPerformanceReviewProcessTargetsId, GetApi20241001ResourcesPerformanceReviewProcesses, GetApi20241001ResourcesPerformanceReviewProcessesId, GetApi20241001ResourcesPerformanceReviewQuestionnaireByStrategies, GetApi20241001ResourcesPerformanceReviewQuestionnaireByStrategiesId, GetApi20241001ResourcesPerformanceReviewVisibilitySettings, GetApi20241001ResourcesPerformanceTargetManagers, GetApi20241001ResourcesPerformanceTargetManagersId, GetApi20241001ResourcesPostsComments, GetApi20241001ResourcesPostsCommentsId, GetApi20241001ResourcesPostsGroups, GetApi20241001ResourcesPostsGroupsId, GetApi20241001ResourcesPostsPosts, GetApi20241001ResourcesPostsPostsId, GetApi20241001ResourcesProjectManagementExpenseRecords, GetApi20241001ResourcesProjectManagementExpenseRecordsId, GetApi20241001ResourcesProjectManagementExportableExpenses, GetApi20241001ResourcesProjectManagementExportableProjects, GetApi20241001ResourcesProjectManagementFlexibleTimeRecordComments, GetApi20241001ResourcesProjectManagementFlexibleTimeRecordCommentsId, GetApi20241001ResourcesProjectManagementFlexibleTimeRecords, GetApi20241001ResourcesProjectManagementFlexibleTimeRecordsId, GetApi20241001ResourcesProjectManagementProjectTasks, GetApi20241001ResourcesProjectManagementProjectTasksId, GetApi20241001ResourcesProjectManagementProjectWorkers, GetApi20241001ResourcesProjectManagementProjectWorkersId, GetApi20241001ResourcesProjectManagementProjects, GetApi20241001ResourcesProjectManagementProjectsId, GetApi20241001ResourcesProjectManagementSubprojects, GetApi20241001ResourcesProjectManagementSubprojectsId, GetApi20241001ResourcesProjectManagementTimeRecords, GetApi20241001ResourcesProjectManagementTimeRecordsId, GetApi20241001ResourcesShiftManagementShifts, GetApi20241001ResourcesShiftManagementShiftsId, GetApi20241001ResourcesTasksTaskFiles, GetApi20241001ResourcesTasksTaskFilesId, GetApi20241001ResourcesTasksTasks, GetApi20241001ResourcesTasksTasksId, GetApi20241001ResourcesTeamsMemberships, GetApi20241001ResourcesTeamsMembershipsId, GetApi20241001ResourcesTeamsTeams, GetApi20241001ResourcesTeamsTeamsId, GetApi20241001ResourcesTimePlanningPlanningVersions, GetApi20241001ResourcesTimeSettingsBreakConfigurations, GetApi20241001ResourcesTimeSettingsBreakConfigurationsId, GetApi20241001ResourcesTimeoffAllowanceIncidences, GetApi20241001ResourcesTimeoffAllowanceIncidencesId, GetApi20241001ResourcesTimeoffAllowanceStats, GetApi20241001ResourcesTimeoffAllowanceStatsId, GetApi20241001ResourcesTimeoffAllowances, GetApi20241001ResourcesTimeoffAllowancesId, GetApi20241001ResourcesTimeoffBlockedPeriods, GetApi20241001ResourcesTimeoffLeaveTypes, GetApi20241001ResourcesTimeoffLeaveTypesId, GetApi20241001ResourcesTimeoffLeaves, GetApi20241001ResourcesTimeoffLeavesId, GetApi20241001ResourcesTimeoffPolicies, GetApi20241001ResourcesTimeoffPoliciesId, GetApi20241001ResourcesTimeoffPolicyTimelines, GetApi20241001ResourcesTrainingsCategories, GetApi20241001ResourcesTrainingsCategoriesId, GetApi20241001ResourcesTrainingsSessionAccessMemberships, GetApi20241001ResourcesTrainingsSessionAccessMembershipsId, GetApi20241001ResourcesTrainingsSessionAttendances, GetApi20241001ResourcesTrainingsSessionAttendancesId, GetApi20241001ResourcesTrainingsSessions, GetApi20241001ResourcesTrainingsSessionsId, GetApi20241001ResourcesTrainingsTrainingMemberships, GetApi20241001ResourcesTrainingsTrainingMembershipsId, GetApi20241001ResourcesTrainingsTrainings, GetApi20241001ResourcesTrainingsTrainingsId, GetApi20241001ResourcesWorkScheduleDayConfigurations, GetApi20241001ResourcesWorkScheduleDayConfigurationsId, GetApi20241001ResourcesWorkScheduleOverlapPeriods, GetApi20241001ResourcesWorkScheduleSchedules, GetApi20241001ResourcesWorkScheduleSchedulesId, PostApi20241001ResourcesApiPublicWebhookSubscriptions, PostApi20241001ResourcesAtsApplications, PostApi20241001ResourcesAtsCandidates, PostApi20241001ResourcesAtsEvaluationFormsSaveAsTemplate, PostApi20241001ResourcesAtsFeedbacks, PostApi20241001ResourcesAtsJobPostings, PostApi20241001ResourcesAtsJobPostingsDuplicate, PostApi20241001ResourcesAtsMessages, PostApi20241001ResourcesAttendanceBreakConfigurations, PostApi20241001ResourcesAttendanceOvertimeRequests, PostApi20241001ResourcesAttendanceOvertimeRequestsApprove, PostApi20241001ResourcesAttendanceOvertimeRequestsReject, PostApi20241001ResourcesAttendanceShifts, PostApi20241001ResourcesAttendanceShiftsAutofill, PostApi20241001ResourcesAttendanceShiftsBreakEnd, PostApi20241001ResourcesAttendanceShiftsBreakStart, PostApi20241001ResourcesAttendanceShiftsClockIn, PostApi20241001ResourcesAttendanceShiftsClockOut, PostApi20241001ResourcesAttendanceShiftsToggleClock, PostApi20241001ResourcesContractsCompensations, PostApi20241001ResourcesContractsContractVersions, PostApi20241001ResourcesCustomFieldsFields, PostApi20241001ResourcesCustomFieldsOptions, PostApi20241001ResourcesCustomFieldsResourceFields, PostApi20241001ResourcesCustomFieldsValues, PostApi20241001ResourcesCustomResourcesSchemas, PostApi20241001ResourcesCustomResourcesValues, PostApi20241001ResourcesDocumentsDocuments, PostApi20241001ResourcesDocumentsDocumentsMoveToTrashBin, PostApi20241001ResourcesDocumentsDocumentsRestoreFromTrashBin, PostApi20241001ResourcesDocumentsFolders, PostApi20241001ResourcesEmployeesEmployeesCreateWithContract, PostApi20241001ResourcesEmployeesEmployeesInvite, PostApi20241001ResourcesEmployeesEmployeesTerminate, PostApi20241001ResourcesEmployeesEmployeesUnterminate, PostApi20241001ResourcesFinanceAccounts, PostApi20241001ResourcesFinanceCostCenterMembershipsBulkCreateUpdate, PostApi20241001ResourcesFinanceCostCenters, PostApi20241001ResourcesFinanceCostCentersEdit, PostApi20241001ResourcesLocationsLocations, PostApi20241001ResourcesLocationsWorkAreas, PostApi20241001ResourcesLocationsWorkAreasArchive, PostApi20241001ResourcesLocationsWorkAreasUnarchive, PostApi20241001ResourcesPayrollEmployeesIdentifiers, PostApi20241001ResourcesPayrollFamilySituations, PostApi20241001ResourcesPayrollIntegrationsBaseCodes, PostApi20241001ResourcesPayrollPolicyPeriodsChangeStatus, PostApi20241001ResourcesPayrollSupplements, PostApi20241001ResourcesPerformanceAgreementsBulkInitiate, PostApi20241001ResourcesPerformanceAgreementsInitiate, PostApi20241001ResourcesPerformanceReviewEvaluationsReplaceReviewer, PostApi20241001ResourcesPerformanceReviewOwnersBulkCreate, PostApi20241001ResourcesPerformanceReviewProcessTargetsAddPeers, PostApi20241001ResourcesPerformanceReviewProcessTargetsBulkCreate, PostApi20241001ResourcesPerformanceReviewProcessTargetsRemovePeerEvaluations, PostApi20241001ResourcesPerformanceReviewProcesses, PostApi20241001ResourcesPerformanceReviewProcessesDuplicate, PostApi20241001ResourcesPerformanceReviewProcessesRemindInBulk, PostApi20241001ResourcesPerformanceReviewProcessesReopen, PostApi20241001ResourcesPerformanceReviewProcessesStart, PostApi20241001ResourcesPerformanceReviewProcessesStop, PostApi20241001ResourcesPerformanceReviewProcessesToggleArchive, PostApi20241001ResourcesPerformanceReviewProcessesUpdateAgreementsConfiguration, PostApi20241001ResourcesPerformanceReviewProcessesUpdateBasicInfo, PostApi20241001ResourcesPerformanceReviewProcessesUpdateDeadline, PostApi20241001ResourcesPerformanceReviewProcessesUpdateReviewerStrategies, PostApi20241001ResourcesPerformanceReviewProcessesUpdateSchedule, PostApi20241001ResourcesPerformanceReviewProcessesUpdateTargetStrategy, PostApi20241001ResourcesPerformanceReviewQuestionnaireByStrategiesUpdateDefaultRatingScale, PostApi20241001ResourcesPerformanceReviewQuestionnaireByStrategiesUpdateQuestionnaireForStrategy, PostApi20241001ResourcesPostsComments, PostApi20241001ResourcesPostsGroups, PostApi20241001ResourcesPostsGroupsArchive, PostApi20241001ResourcesPostsPosts, PostApi20241001ResourcesProjectManagementFlexibleTimeRecordComments, PostApi20241001ResourcesProjectManagementFlexibleTimeRecordCommentsDeleteByFlexibleTimeRecord, PostApi20241001ResourcesProjectManagementFlexibleTimeRecordCommentsUpdateByFlexibleTimeRecord, PostApi20241001ResourcesProjectManagementFlexibleTimeRecords, PostApi20241001ResourcesProjectManagementProjectTasks, PostApi20241001ResourcesProjectManagementProjectTasksBulkDestroy, PostApi20241001ResourcesProjectManagementProjectTasksBulkDuplicate, PostApi20241001ResourcesProjectManagementProjectWorkers, PostApi20241001ResourcesProjectManagementProjectWorkersBulkAssign, PostApi20241001ResourcesProjectManagementProjectWorkersBulkCreate, PostApi20241001ResourcesProjectManagementProjectWorkersUnassign, PostApi20241001ResourcesProjectManagementProjects, PostApi20241001ResourcesProjectManagementProjectsActivate, PostApi20241001ResourcesProjectManagementProjectsChangeAssignment, PostApi20241001ResourcesProjectManagementProjectsClose, PostApi20241001ResourcesProjectManagementProjectsSoftDelete, PostApi20241001ResourcesProjectManagementSubprojects, PostApi20241001ResourcesProjectManagementSubprojectsRename, PostApi20241001ResourcesProjectManagementTimeRecords, PostApi20241001ResourcesProjectManagementTimeRecordsBulkDelete, PostApi20241001ResourcesProjectManagementTimeRecordsBulkProcess, PostApi20241001ResourcesProjectManagementTimeRecordsUpdateProjectWorker, PostApi20241001ResourcesShiftManagementShifts, PostApi20241001ResourcesShiftManagementShiftsBulkDelete, PostApi20241001ResourcesTasksTaskFiles, PostApi20241001ResourcesTasksTasks, PostApi20241001ResourcesTasksTasksBulkChangeStatus, PostApi20241001ResourcesTasksTasksBulkDelete, PostApi20241001ResourcesTasksTasksCopy, PostApi20241001ResourcesTasksTasksCreateComment, PostApi20241001ResourcesTasksTasksResolve, PostApi20241001ResourcesTeamsMemberships, PostApi20241001ResourcesTeamsTeams, PostApi20241001ResourcesTimePlanningPlanningVersions, PostApi20241001ResourcesTimePlanningPlanningVersionsBulkCreate, PostApi20241001ResourcesTimePlanningPlanningVersionsDeactivate, PostApi20241001ResourcesTimeSettingsBreakConfigurations, PostApi20241001ResourcesTimeoffAllowanceIncidences, PostApi20241001ResourcesTimeoffAllowances, PostApi20241001ResourcesTimeoffAllowancesDeleteWithAltAllowance, PostApi20241001ResourcesTimeoffBlockedPeriods, PostApi20241001ResourcesTimeoffLeaveTypes, PostApi20241001ResourcesTimeoffLeaves, PostApi20241001ResourcesTimeoffLeavesApprove, PostApi20241001ResourcesTimeoffLeavesReject, PostApi20241001ResourcesTimeoffPolicies, PostApi20241001ResourcesTrainingsCategories, PostApi20241001ResourcesTrainingsSessionAccessMembershipsBulkCreate, PostApi20241001ResourcesTrainingsSessionAccessMembershipsBulkDestroy, PostApi20241001ResourcesTrainingsSessionAttendancesBulkUpdate, PostApi20241001ResourcesTrainingsSessions, PostApi20241001ResourcesTrainingsTrainingMembershipsBulkCreate, PostApi20241001ResourcesTrainingsTrainingMembershipsBulkDestroy, PostApi20241001ResourcesTrainingsTrainings, PostApi20241001ResourcesTrainingsTrainingsBulkDelete, PostApi20241001ResourcesTrainingsTrainingsBulkUpdateCatalog, PostApi20241001ResourcesTrainingsTrainingsUpdateStatus, PostApi20241001ResourcesWorkScheduleDayConfigurationsBulkCud, PostApi20241001ResourcesWorkScheduleOverlapPeriods, PostApi20241001ResourcesWorkScheduleSchedules, PostApi20241001ResourcesWorkScheduleSchedulesToggleArchive, PutApi20241001ResourcesApiPublicWebhookSubscriptionsId, PutApi20241001ResourcesAtsApplicationsId, PutApi20241001ResourcesAtsCandidatesId, PutApi20241001ResourcesAtsFeedbacksId, PutApi20241001ResourcesAtsJobPostingsId, PutApi20241001ResourcesAttendanceBreakConfigurationsId, PutApi20241001ResourcesAttendanceOvertimeRequestsId, PutApi20241001ResourcesAttendanceShiftsId, PutApi20241001ResourcesBookkeepersManagementIncidencesId, PutApi20241001ResourcesContractsCompensationsId, PutApi20241001ResourcesContractsContractVersionsId, PutApi20241001ResourcesCustomFieldsValuesId, PutApi20241001ResourcesDocumentsDocumentsId, PutApi20241001ResourcesDocumentsFoldersId, PutApi20241001ResourcesEmployeesEmployeesId, PutApi20241001ResourcesLocationsLocationsId, PutApi20241001ResourcesLocationsWorkAreasId, PutApi20241001ResourcesPayrollEmployeesIdentifiersId, PutApi20241001ResourcesPayrollFamilySituationsId, PutApi20241001ResourcesPayrollIntegrationsBaseCodesId, PutApi20241001ResourcesPayrollSupplementsId, PutApi20241001ResourcesPerformanceReviewVisibilitySettingsId, PutApi20241001ResourcesPostsCommentsId, PutApi20241001ResourcesPostsGroupsId, PutApi20241001ResourcesPostsPostsId, PutApi20241001ResourcesProjectManagementFlexibleTimeRecordsId, PutApi20241001ResourcesProjectManagementProjectTasksId, PutApi20241001ResourcesProjectManagementProjectsId, PutApi20241001ResourcesTasksTasksId, PutApi20241001ResourcesTeamsMembershipsId, PutApi20241001ResourcesTeamsTeamsId, PutApi20241001ResourcesTimePlanningPlanningVersionsId, PutApi20241001ResourcesTimeSettingsBreakConfigurationsId, PutApi20241001ResourcesTimeoffAllowanceIncidencesId, PutApi20241001ResourcesTimeoffAllowancesId, PutApi20241001ResourcesTimeoffBlockedPeriodsId, PutApi20241001ResourcesTimeoffLeaveTypesId, PutApi20241001ResourcesTimeoffLeavesId, PutApi20241001ResourcesTimeoffPoliciesId, PutApi20241001ResourcesTrainingsSessionsId, PutApi20241001ResourcesTrainingsTrainingMembershipsId, PutApi20241001ResourcesTrainingsTrainingsId, PutApi20241001ResourcesWorkScheduleOverlapPeriodsId, PutApi20241001ResourcesWorkScheduleSchedulesId };
